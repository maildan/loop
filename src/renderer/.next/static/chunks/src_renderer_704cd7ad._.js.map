{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/stores/useStructureStore.ts"],"sourcesContent":["// 🔥 스토리 구조 글로벌 스토어 - Zustand + 지속성\n\nimport { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport { ProjectStructure } from '../../shared/types';\n\ninterface StructureStore {\n    structures: Record<string, ProjectStructure[]>; // projectId를 키로 하는 구조들\n    currentEditor: {\n        projectId: string;\n        editorType: 'chapter' | 'synopsis' | 'idea' | 'notes' | 'characters' | 'structure';\n        itemId?: string;\n        itemTitle?: string;\n    } | null;\n\n    // 🔥 액션들\n    setStructures: (projectId: string, structures: ProjectStructure[]) => void;\n    addStructureItem: (projectId: string, item: ProjectStructure) => Promise<void>;\n    updateStructureItem: (projectId: string, itemId: string, updates: Partial<ProjectStructure>) => Promise<void>;\n    deleteStructureItem: (projectId: string, itemId: string) => Promise<void>;\n    reorderStructures: (projectId: string, newOrder: ProjectStructure[]) => void;\n\n    // 🔥 에디터 상태 관리\n    setCurrentEditor: (editor: StructureStore['currentEditor']) => void;\n    clearCurrentEditor: () => void;\n}\n\nexport const useStructureStore = create<StructureStore>()(\n    persist(\n        (set, get) => ({\n            structures: {},\n            currentEditor: null,\n\n            // 🔥 구조 설정\n            setStructures: (projectId, structures) =>\n                set((state) => ({\n                    structures: {\n                        ...state.structures,\n                        [projectId]: structures,\n                    },\n                })),\n\n            // 🔥 구조 아이템 추가 (DB 저장 포함)\n            addStructureItem: async (projectId, item) => {\n                // 1. UI에 즉시 반영 (Optimistic Update)\n                set((state) => ({\n                    structures: {\n                        ...state.structures,\n                        [projectId]: [...(state.structures[projectId] || []), item],\n                    },\n                }));\n\n                // 2. DB에 저장 요청\n                try {\n                    await window.electronAPI.projects.upsertStructure(item);\n                    console.log('✅ Structure item saved to DB:', item.id);\n                } catch (error) {\n                    console.error('❌ Failed to save structure item to DB:', error);\n                    // TODO: 실패 시 UI 롤백 로직 추가\n                }\n            },\n\n            // 🔥 구조 아이템 업데이트 (DB 저장 포함)\n            updateStructureItem: async (projectId, itemId, updates) => {\n                let updatedItem: ProjectStructure | null = null;\n\n                // 1. UI에 즉시 반영\n                set((state) => {\n                    const newStructures = (state.structures[projectId] || []).map((item) => {\n                        if (item.id === itemId) {\n                            updatedItem = { ...item, ...updates, updatedAt: new Date() };\n                            return updatedItem;\n                        }\n                        return item;\n                    });\n                    return {\n                        structures: { ...state.structures, [projectId]: newStructures },\n                    };\n                });\n\n                // 2. DB에 저장 요청\n                if (updatedItem) {\n                    try {\n                        await window.electronAPI.projects.upsertStructure(updatedItem);\n                        console.log('✅ Structure item updated in DB:', itemId);\n                    } catch (error) {\n                        console.error('❌ Failed to update structure item in DB:', error);\n                        // TODO: 실패 시 UI 롤백 로직 추가\n                    }\n                }\n            },\n\n            // 🔥 구조 아이템 삭제 (DB 삭제 포함)\n            deleteStructureItem: async (projectId, itemId) => {\n                // 1. UI에 즉시 반영\n                set((state) => ({\n                    structures: {\n                        ...state.structures,\n                        [projectId]: (state.structures[projectId] || []).filter((item) => item.id !== itemId),\n                    },\n                }));\n\n                // 2. DB에서 삭제 요청\n                try {\n                    await window.electronAPI.projects.deleteStructure(itemId);\n                    console.log('✅ Structure item deleted from DB:', itemId);\n                } catch (error) {\n                    console.error('❌ Failed to delete structure item from DB:', error);\n                    // TODO: 실패 시 UI 롤백 로직 추가\n                }\n            },\n\n            // 🔥 구조 순서 변경\n            reorderStructures: (projectId, newOrder) =>\n                set((state) => ({\n                    structures: {\n                        ...state.structures,\n                        [projectId]: newOrder,\n                    },\n                })),\n\n            // 🔥 현재 에디터 설정\n            setCurrentEditor: (editor) =>\n                set({ currentEditor: editor }),\n\n            // 🔥 현재 에디터 초기화\n            clearCurrentEditor: () =>\n                set({ currentEditor: null }),\n        }),\n        {\n            name: 'loop-structure-store', // localStorage 키\n            storage: createJSONStorage(() => localStorage),\n            partialize: (state) => ({\n                structures: state.structures,\n                currentEditor: state.currentEditor,\n            }),\n        }\n    )\n);\n\nexport default useStructureStore;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/hooks/useLongPress.ts"],"sourcesContent":["// 🔥 롱프레스 훅 - 간단하고 확실한 구현\n\nimport { useRef, useCallback } from 'react';\nimport { Logger } from '../../shared/logger';\n\ninterface UseLongPressOptions {\n    onLongPress: () => void;\n    onShortPress?: () => void;\n    delay?: number;\n}\n\ninterface UseLongPressResult {\n    onMouseDown: (event: React.MouseEvent) => void;\n    onMouseUp: (event: React.MouseEvent) => void;\n    onMouseLeave: (event: React.MouseEvent) => void;\n    onTouchStart: (event: React.TouchEvent) => void;\n    onTouchEnd: (event: React.TouchEvent) => void;\n    onTouchCancel: (event: React.TouchEvent) => void;\n}\n\nexport function useLongPress({\n    onLongPress,\n    onShortPress,\n    delay = 600\n}: UseLongPressOptions): UseLongPressResult {\n    const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n    const isLongPressRef = useRef(false);\n    const isPressingRef = useRef(false);\n\n    const startPress = useCallback(() => {\n        if (isPressingRef.current) return;\n\n        isPressingRef.current = true;\n        isLongPressRef.current = false;\n\n        // 롱프레스 타이머 시작\n        timeoutRef.current = setTimeout(() => {\n            if (isPressingRef.current) {\n                isLongPressRef.current = true;\n                onLongPress();\n                Logger.debug('LONGPRESS', '롱프레스 실행됨!');\n            }\n        }, delay);\n\n        Logger.debug('LONGPRESS', '롱프레스 시작', { delay });\n    }, [onLongPress, delay]);\n\n    const endPress = useCallback(() => {\n        if (!isPressingRef.current) return;\n\n        isPressingRef.current = false;\n\n        // 타이머 정리\n        if (timeoutRef.current) {\n            clearTimeout(timeoutRef.current);\n            timeoutRef.current = null;\n        }\n\n        // 롱프레스가 실행되지 않았다면 숏프레스 실행\n        if (!isLongPressRef.current && onShortPress) {\n            onShortPress();\n            Logger.debug('LONGPRESS', '숏프레스 실행됨!');\n        }\n\n        isLongPressRef.current = false;\n    }, [onShortPress]);\n\n    const cancelPress = useCallback(() => {\n        isPressingRef.current = false;\n\n        if (timeoutRef.current) {\n            clearTimeout(timeoutRef.current);\n            timeoutRef.current = null;\n        }\n\n        isLongPressRef.current = false;\n        Logger.debug('LONGPRESS', '롱프레스 취소됨');\n    }, []);\n\n    // 마우스 이벤트 핸들러\n    const onMouseDown = useCallback((event: React.MouseEvent) => {\n        if (event.button !== 0) return; // 왼쪽 클릭만\n        event.preventDefault();\n        startPress();\n    }, [startPress]);\n\n    const onMouseUp = useCallback((event: React.MouseEvent) => {\n        event.preventDefault();\n        endPress();\n    }, [endPress]);\n\n    const onMouseLeave = useCallback((event: React.MouseEvent) => {\n        cancelPress();\n    }, [cancelPress]);\n\n    // 터치 이벤트 핸들러\n    const onTouchStart = useCallback((event: React.TouchEvent) => {\n        if (event.touches.length > 1) return; // 단일 터치만\n        event.preventDefault();\n        startPress();\n    }, [startPress]);\n\n    const onTouchEnd = useCallback((event: React.TouchEvent) => {\n        event.preventDefault();\n        endPress();\n    }, [endPress]);\n\n    const onTouchCancel = useCallback((event: React.TouchEvent) => {\n        cancelPress();\n    }, [cancelPress]);\n\n    return {\n        onMouseDown,\n        onMouseUp,\n        onMouseLeave,\n        onTouchStart,\n        onTouchEnd,\n        onTouchCancel\n    };\n}\n\nexport default useLongPress;"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAE1B;AACA;;;;AAiBO,SAAS,aAAa,EACzB,WAAW,EACX,YAAY,EACZ,QAAQ,GAAG,EACO;;IAClB,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAyB;IACjD,MAAM,iBAAiB,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAC9B,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAE7B,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;gDAAE;YAC3B,IAAI,cAAc,OAAO,EAAE;YAE3B,cAAc,OAAO,GAAG;YACxB,eAAe,OAAO,GAAG;YAEzB,cAAc;YACd,WAAW,OAAO,GAAG;wDAAW;oBAC5B,IAAI,cAAc,OAAO,EAAE;wBACvB,eAAe,OAAO,GAAG;wBACzB;wBACA,0HAAA,CAAA,SAAM,CAAC,KAAK,CAAC,aAAa;oBAC9B;gBACJ;uDAAG;YAEH,0HAAA,CAAA,SAAM,CAAC,KAAK,CAAC,aAAa,WAAW;gBAAE;YAAM;QACjD;+CAAG;QAAC;QAAa;KAAM;IAEvB,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;8CAAE;YACzB,IAAI,CAAC,cAAc,OAAO,EAAE;YAE5B,cAAc,OAAO,GAAG;YAExB,SAAS;YACT,IAAI,WAAW,OAAO,EAAE;gBACpB,aAAa,WAAW,OAAO;gBAC/B,WAAW,OAAO,GAAG;YACzB;YAEA,0BAA0B;YAC1B,IAAI,CAAC,eAAe,OAAO,IAAI,cAAc;gBACzC;gBACA,0HAAA,CAAA,SAAM,CAAC,KAAK,CAAC,aAAa;YAC9B;YAEA,eAAe,OAAO,GAAG;QAC7B;6CAAG;QAAC;KAAa;IAEjB,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;iDAAE;YAC5B,cAAc,OAAO,GAAG;YAExB,IAAI,WAAW,OAAO,EAAE;gBACpB,aAAa,WAAW,OAAO;gBAC/B,WAAW,OAAO,GAAG;YACzB;YAEA,eAAe,OAAO,GAAG;YACzB,0HAAA,CAAA,SAAM,CAAC,KAAK,CAAC,aAAa;QAC9B;gDAAG,EAAE;IAEL,cAAc;IACd,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;iDAAE,CAAC;YAC7B,IAAI,MAAM,MAAM,KAAK,GAAG,QAAQ,SAAS;YACzC,MAAM,cAAc;YACpB;QACJ;gDAAG;QAAC;KAAW;IAEf,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;+CAAE,CAAC;YAC3B,MAAM,cAAc;YACpB;QACJ;8CAAG;QAAC;KAAS;IAEb,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;kDAAE,CAAC;YAC9B;QACJ;iDAAG;QAAC;KAAY;IAEhB,aAAa;IACb,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;kDAAE,CAAC;YAC9B,IAAI,MAAM,OAAO,CAAC,MAAM,GAAG,GAAG,QAAQ,SAAS;YAC/C,MAAM,cAAc;YACpB;QACJ;iDAAG;QAAC;KAAW;IAEf,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;gDAAE,CAAC;YAC5B,MAAM,cAAc;YACpB;QACJ;+CAAG;QAAC;KAAS;IAEb,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;mDAAE,CAAC;YAC/B;QACJ;kDAAG;QAAC;KAAY;IAEhB,OAAO;QACH;QACA;QACA;QACA;QACA;QACA;IACJ;AACJ;GAnGgB;uCAqGD","debugId":null}},
    {"offset": {"line": 270, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/app/projects/%5Bid%5D/ProjectPageClient.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { useParams, useSearchParams } from 'next/navigation';\nimport { ProjectEditor } from '../../../components/projects/ProjectEditor';\nimport { ProjectErrorBoundary } from '../../../components/projects/ErrorBoundary';\nimport { Logger } from '../../../../shared/logger';\n\n// 🔥 클라이언트 컴포넌트 - 동적 라우팅 로직\nexport default function ProjectPageClient(): React.ReactElement {\n  const params = useParams();\n  const searchParams = useSearchParams();\n  const paramId = Array.isArray(params.id) ? params.id[0] : params.id;\n  const openId = searchParams.get('open') || searchParams.get('id') || undefined;\n\n  // 🔥 정적 루트(`/projects/new`)에서 쿼리로 열린 경우 처리\n  const projectId = (paramId === 'new' && openId) ? openId : (paramId || openId);\n\n  // 🔥 파라미터 검증\n  if (!projectId) {\n    Logger.error('PROJECT_PAGE', 'Missing project ID in route parameters');\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">오류</h1>\n          <p className=\"text-slate-600\">프로젝트 ID가 없습니다.</p>\n        </div>\n      </div>\n    );\n  }\n\n  Logger.debug('PROJECT_PAGE', 'Loading project page', { projectId });\n\n  return (\n    <ProjectErrorBoundary>\n      <ProjectEditor projectId={projectId} />\n    </ProjectErrorBoundary>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;;;AANA;;;;;AASe,SAAS;;IACtB,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,eAAe,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,UAAU,MAAM,OAAO,CAAC,OAAO,EAAE,IAAI,OAAO,EAAE,CAAC,EAAE,GAAG,OAAO,EAAE;IACnE,MAAM,SAAS,aAAa,GAAG,CAAC,WAAW,aAAa,GAAG,CAAC,SAAS;IAErE,2CAA2C;IAC3C,MAAM,YAAY,AAAC,YAAY,SAAS,SAAU,SAAU,WAAW;IAEvE,aAAa;IACb,IAAI,CAAC,WAAW;QACd,0HAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB;QAC7B,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAuC;;;;;;kCACrD,6LAAC;wBAAE,WAAU;kCAAiB;;;;;;;;;;;;;;;;;IAItC;IAEA,0HAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,wBAAwB;QAAE;IAAU;IAEjE,qBACE,6LAAC,8JAAA,CAAA,uBAAoB;kBACnB,cAAA,6LAAC,8JAAA,CAAA,gBAAa;YAAC,WAAW;;;;;;;;;;;AAGhC;GA7BwB;;QACP,qIAAA,CAAA,YAAS;QACH,qIAAA,CAAA,kBAAe;;;KAFd","debugId":null}}]
}