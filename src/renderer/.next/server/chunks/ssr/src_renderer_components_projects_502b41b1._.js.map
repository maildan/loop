{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/EditorConfig.ts"],"sourcesContent":["// 🔥 EasyMDE 에디터 설정 모듈\n\n// EasyMDE 타입 정의\ninterface EasyMDEEditor {\n  codemirror: CodeMirrorEditor;\n  value(): string;\n  value(val: string): void;\n  togglePreview(): void;\n  toggleSideBySide(): void;\n  toggleFullScreen(): void;\n  isPreviewActive(): boolean;\n  isSideBySideActive(): boolean;\n  isFullscreenActive(): boolean;\n}\n\ninterface CodeMirrorEditor {\n  getCursor(): { line: number; ch: number };\n  getLine(line: number): string;\n  replaceRange(replacement: string, from: { line: number; ch: number }, to?: { line: number; ch: number }): void;\n  setCursor(pos: { line: number; ch: number }): void;\n  getSelection(): string;\n  setSelection(anchor: { line: number; ch: number }, head?: { line: number; ch: number }): void;\n  replaceSelection(replacement: string): void;\n}\n\nexport interface EditorToolbarItem {\n  name: string;\n  action: (editor: EasyMDEEditor) => void;\n  className: string;\n  title: string;\n}\n\n// 🔥 작가 친화적 EasyMDE 설정 (FontAwesome 아이콘 + 한국어 최적화)\nexport const getEditorOptions = () => ({\n  autofocus: true,\n  spellChecker: false,\n  placeholder: '이야기를 시작해보세요...',\n  status: ['lines', 'words', 'cursor'],\n  toolbar: false, // 🔥 기본 툴바 숨기기 (커스텀 Lucide 툴바 사용)\n  shortcuts: {\n    \"toggleBold\": \"Cmd-B\",        // 🔥 macOS 스타일 단축키\n    \"toggleItalic\": \"Cmd-I\", \n    \"drawLink\": \"Cmd-K\",\n    \"toggleHeading1\": \"Cmd-Alt-1\", // 🔥 노션 스타일 헤딩 단축키\n    \"toggleHeading2\": \"Cmd-Alt-2\",\n    \"toggleHeading3\": \"Cmd-Alt-3\",\n    \"cleanBlock\": \"Cmd-E\",\n    \"drawImage\": \"Cmd-Alt-I\",\n    \"toggleUnorderedList\": \"Cmd-Shift-8\", // 🔥 노션 스타일 리스트\n    \"toggleOrderedList\": \"Cmd-Shift-7\",   // 🔥 노션 스타일 번호 리스트\n    \"toggleBlockquote\": \"Cmd-Shift-9\",    // 🔥 노션 스타일 인용구\n    \"toggleCodeBlock\": \"Cmd-Alt-C\",\n    \"togglePreview\": \"Cmd-P\",\n    \"toggleSideBySide\": \"F9\",\n    \"toggleFullScreen\": \"F11\",\n    \"toggleDarkMode\": \"Cmd-D\" // 🔥 다크모드 토글 단축키 추가\n  },\n  // 🔥 한글 입력 최적화 설정 (2024-2025 최신 IME 지원)\n  inputStyle: \"contenteditable\" as const, // 🔥 IME 지원 향상을 위해 contenteditable 사용\n  nativeSpellcheck: true, // 🔥 IME와 함께 네이티브 스펠체크 활성화\n  previewRender: (plainText: string) => {\n    return `<div class=\"prose dark:prose-invert max-w-none\">${plainText}</div>`;\n  },\n  renderingConfig: {\n    singleLineBreaks: false,\n    codeSyntaxHighlighting: true,\n  },\n  autoDownloadFontAwesome: false, // 🔥 FontAwesome 비활성화 (Lucide로 교체 예정)\n  tabSize: 2,\n  lineWrapping: true,\n  styleSelectedText: false, // 🔥 성능 향상을 위해 비활성화\n  parsingConfig: {\n    allowAtxHeaderWithoutSpace: true,\n  },\n  lineNumbers: false,\n  mode: {\n    name: \"markdown\",\n    highlightFormatting: false, // 🔥 노션 스타일을 위해 마크업 숨기기\n  },\n  // 🔥 한글 입력 최적화 설정 (IME 방해 요소 제거)\n  configureMouse: () => ({ addNew: false }),\n  indentWithTabs: false,\n  smartIndent: false, // 🔥 스마트 인덴트 비활성화 (한글 입력 방해 방지)\n  electricChars: false, // 🔥 자동 문자 교정 비활성화 (한글 조합 방해 방지)\n  rtlMoveVisually: true,\n  // 🔥 노션 스타일 커스텀 키 맵핑 (커서 위치 보존 강화)\n  extraKeys: {\n    // 🔥 노션 스타일 굵게 (Cmd+B) - 기가차드 수정: 포커스 조작 제거\n    \"Cmd-B\": function(cm: CodeMirrorEditor) {\n      const cursor = cm.getCursor();\n      const selection = cm.getSelection();\n      \n      if (selection) {\n        cm.replaceSelection(`**${selection}**`);\n      } else {\n        cm.replaceSelection('****');\n        cm.setCursor({ line: cursor.line, ch: cursor.ch + 2 });\n      }\n    },\n    \n    // 🔥 노션 스타일 기울임 (Cmd+I) - 기가차드 수정: 포커스 조작 제거\n    \"Cmd-I\": function(cm: CodeMirrorEditor) {\n      const cursor = cm.getCursor();\n      const selection = cm.getSelection();\n      \n      if (selection) {\n        cm.replaceSelection(`*${selection}*`);\n      } else {\n        cm.replaceSelection('**');\n        cm.setCursor({ line: cursor.line, ch: cursor.ch + 1 });\n      }\n    },\n    \n    // 🔥 노션 스타일 링크 (Cmd+K) - 기가차드 수정: 포커스 조작 제거\n    \"Cmd-K\": function(cm: CodeMirrorEditor) {\n      const cursor = cm.getCursor();\n      const selection = cm.getSelection();\n      \n      if (selection) {\n        cm.replaceSelection(`[${selection}]()`);\n        const newCursor = cm.getCursor();\n        cm.setCursor({ line: newCursor.line, ch: newCursor.ch - 1 });\n      } else {\n        cm.replaceSelection('[링크 텍스트]()');\n        cm.setSelection(\n          { line: cursor.line, ch: cursor.ch + 1 },\n          { line: cursor.line, ch: cursor.ch + 6 }\n        );\n      }\n    },\n    \n    // 🔥 기가차드 마크다운 변환: Space 키로 마크업 자동 변환\n    \"Space\": function(cm: CodeMirrorEditor) {\n      const cursor = cm.getCursor();\n      const line = cm.getLine(cursor.line);\n      const lineStart = line.substring(0, cursor.ch);\n      \n      // 1. 헤딩 패턴 감지 (# 1-6개) - 정확한 마크다운 변환\n      const headingMatch = lineStart.match(/^(#{1,6})$/);\n      if (headingMatch) {\n        // 단순히 스페이스만 추가 (### -> ### )\n        cm.replaceSelection(' ');\n        return;\n      }\n      \n      // 2. 리스트 패턴 감지 (- 또는 *)\n      const listMatch = lineStart.match(/^([-*])$/);\n      if (listMatch) {\n        cm.replaceSelection(' ');\n        return;\n      }\n      \n      // 3. 번호 리스트 패턴 감지 (1. 2. 등)\n      const numberedListMatch = lineStart.match(/^(\\d+\\.)$/);\n      if (numberedListMatch) {\n        cm.replaceSelection(' ');\n        return;\n      }\n      \n      // 4. 인용구 패턴 감지 (>)\n      const quoteMatch = lineStart.match(/^(>)$/);\n      if (quoteMatch) {\n        cm.replaceSelection(' ');\n        return;\n      }\n      \n      // 기본 스페이스 입력\n      cm.replaceSelection(' ');\n    }\n  }\n});\n\n// 🔥 포커스 모드용 설정\nexport const getFocusModeOptions = () => ({\n  ...getEditorOptions(),\n  toolbar: false,\n  status: false,\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/EditorProvider.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useRef, useCallback } from 'react';\nimport type { Editor } from '@tiptap/core';\nimport { Logger } from '../../../../shared/logger';\nimport { setupKoreanInputOptimization } from './MarkdownUtils';\nimport { getEditorOptions, getFocusModeOptions } from './EditorConfig';\n\ninterface EditorContextType {\n  editorRef: React.RefObject<Editor | null>;\n  initializeEditor: (editor: Editor) => void;\n  getEditorOptions: () => Record<string, unknown>;\n  getFocusModeOptions: () => Record<string, unknown>;\n}\n\nconst EditorContext = createContext<EditorContextType | null>(null);\n\nexport function useEditor(): EditorContextType {\n  const context = useContext(EditorContext);\n  if (!context) {\n    throw new Error('useEditor must be used within EditorProvider');\n  }\n  return context;\n}\n\ninterface EditorProviderProps {\n  children: React.ReactNode;\n}\n\nexport function EditorProvider({ children }: EditorProviderProps): React.ReactElement {\n  const editorRef = useRef<Editor | null>(null);\n\n  const initializeEditor = useCallback((editor: Editor) => {\n    if (!editor) return;\n\n    try {\n      Logger.debug('EDITOR', 'Initializing editor for Korean input optimization');\n\n      // 🔥 에디터 레퍼런스 저장\n      editorRef.current = editor;\n\n      // 에디터 참조 저장\n      editorRef.current = editor;\n\n      Logger.info('EDITOR', 'Editor initialized with Korean input optimization');\n    } catch (error) {\n      Logger.error('EDITOR', 'Failed to initialize editor', error);\n    }\n  }, []);\n\n  const contextValue: EditorContextType = {\n    editorRef,\n    initializeEditor,\n    getEditorOptions,\n    getFocusModeOptions\n  };\n\n  return (\n    <EditorContext.Provider value={contextValue}>\n      {children}\n    </EditorContext.Provider>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AAEA;AAEA;AANA;;;;;AAeA,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA4B;AAEvD,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAMO,SAAS,eAAe,EAAE,QAAQ,EAAuB;IAC9D,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAiB;IAExC,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACpC,IAAI,CAAC,QAAQ;QAEb,IAAI;YACF,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,UAAU;YAEvB,iBAAiB;YACjB,UAAU,OAAO,GAAG;YAEpB,YAAY;YACZ,UAAU,OAAO,GAAG;YAEpB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU;QACxB,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,UAAU,+BAA+B;QACxD;IACF,GAAG,EAAE;IAEL,MAAM,eAAkC;QACtC;QACA;QACA,kBAAA,mKAAA,CAAA,mBAAgB;QAChB,qBAAA,mKAAA,CAAA,sBAAmB;IACrB;IAEA,qBACE,8OAAC,cAAc,QAAQ;QAAC,OAAO;kBAC5B;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/EditorShortcuts.ts"],"sourcesContent":["// 🔥 기가차드 노션 스타일 단축키 시스템\n'use client';\n\nimport { Editor } from '@tiptap/react';\nimport { Logger } from '../../../../shared/logger';\n\n// 🔥 플랫폼별 modifier 키 감지\nconst isMac = typeof window !== 'undefined' && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst modifierKey = isMac ? 'metaKey' : 'ctrlKey';\n\n// 🔥 단축키 정의 (노션 스타일)\nexport interface EditorShortcut {\n  key: string;\n  modifier: boolean;\n  shift?: boolean;\n  alt?: boolean;\n  action: (editor: Editor) => boolean;\n  description: string;\n}\n\n// 🔥 기본 텍스트 포맷팅 단축키\nexport const TEXT_FORMATTING_SHORTCUTS: EditorShortcut[] = [\n  {\n    key: 'b',\n    modifier: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleBold().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Bold toggled');\n      return true;\n    },\n    description: '볼드 토글'\n  },\n  {\n    key: 'i',\n    modifier: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleItalic().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Italic toggled');\n      return true;\n    },\n    description: '이탤릭 토글'\n  },\n  {\n    key: 'u',\n    modifier: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleUnderline().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Underline toggled');\n      return true;\n    },\n    description: '언더라인 토글'\n  },\n  {\n    key: 's',\n    modifier: true,\n    shift: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleStrike().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Strikethrough toggled');\n      return true;\n    },\n    description: '취소선 토글'\n  },\n  {\n    key: 'k',\n    modifier: true,\n    action: (editor: Editor) => {\n      // 🔥 링크 생성 (추후 구현)\n      Logger.debug('EDITOR_SHORTCUTS', 'Link shortcut triggered');\n      return true;\n    },\n    description: '링크 생성'\n  }\n];\n\n// 🔥 헤딩 단축키\nexport const HEADING_SHORTCUTS: EditorShortcut[] = [\n  {\n    key: '1',\n    modifier: true,\n    alt: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleHeading({ level: 1 }).run();\n      Logger.debug('EDITOR_SHORTCUTS', 'H1 toggled');\n      return true;\n    },\n    description: '제목 1'\n  },\n  {\n    key: '2',\n    modifier: true,\n    alt: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleHeading({ level: 2 }).run();\n      Logger.debug('EDITOR_SHORTCUTS', 'H2 toggled');\n      return true;\n    },\n    description: '제목 2'\n  },\n  {\n    key: '3',\n    modifier: true,\n    alt: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleHeading({ level: 3 }).run();\n      Logger.debug('EDITOR_SHORTCUTS', 'H3 toggled');\n      return true;\n    },\n    description: '제목 3'\n  },\n  {\n    key: '0',\n    modifier: true,\n    alt: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().setParagraph().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Paragraph set');\n      return true;\n    },\n    description: '일반 텍스트'\n  }\n];\n\n// 🔥 리스트 단축키\nexport const LIST_SHORTCUTS: EditorShortcut[] = [\n  {\n    key: '8',\n    modifier: true,\n    shift: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleBulletList().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Bullet list toggled');\n      return true;\n    },\n    description: '불릿 리스트'\n  },\n  {\n    key: '7',\n    modifier: true,\n    shift: true,\n    action: (editor: Editor) => {\n      editor.chain().focus().toggleOrderedList().run();\n      Logger.debug('EDITOR_SHORTCUTS', 'Ordered list toggled');\n      return true;\n    },\n    description: '번호 리스트'\n  }\n];\n\n// 🔥 저장 단축키\nexport const SAVE_SHORTCUTS: EditorShortcut[] = [\n  {\n    key: 's',\n    modifier: true,\n    action: (editor: Editor) => {\n      // 🔥 저장 이벤트 발생 (커스텀 이벤트)\n      const saveEvent = new CustomEvent('editor:save');\n      window.dispatchEvent(saveEvent);\n      Logger.info('EDITOR_SHORTCUTS', 'Save triggered');\n      return true;\n    },\n    description: '저장'\n  }\n];\n\n// 🔥 모든 단축키 통합\nexport const ALL_SHORTCUTS: EditorShortcut[] = [\n  ...TEXT_FORMATTING_SHORTCUTS,\n  ...HEADING_SHORTCUTS,\n  ...LIST_SHORTCUTS,\n  ...SAVE_SHORTCUTS\n];\n\n// 🔥 키보드 이벤트 핸들러\nexport function handleEditorKeyDown(editor: Editor | null, event: KeyboardEvent): boolean {\n  if (!editor) return false;\n\n  const { key, ctrlKey, metaKey, shiftKey, altKey } = event;\n  const isModifier = isMac ? metaKey : ctrlKey;\n\n  // 🔥 Space 키는 마크다운 처리를 위해 완전 제외\n  if (key === ' ') {\n    return false;\n  }\n\n  // 🔥 마크다운 타이핑 방해 방지: modifier 키가 없는 단일 문자는 처리하지 않음\n  if (!isModifier && !shiftKey && !altKey && key.length === 1) {\n    return false;\n  }\n\n  // 🔥 단축키 매칭 및 실행\n  for (const shortcut of ALL_SHORTCUTS) {\n    if (\n      shortcut.key.toLowerCase() === key.toLowerCase() &&\n      Boolean(shortcut.modifier) === isModifier &&\n      Boolean(shortcut.shift) === shiftKey &&\n      Boolean(shortcut.alt) === altKey\n    ) {\n      event.preventDefault();\n      event.stopPropagation();\n      \n      try {\n        const handled = shortcut.action(editor);\n        if (handled) {\n          Logger.debug('EDITOR_SHORTCUTS', `Shortcut executed: ${shortcut.description}`, {\n            key: shortcut.key,\n            modifier: isModifier,\n            shift: shiftKey,\n            alt: altKey\n          });\n          return true;\n        }\n      } catch (error) {\n        Logger.error('EDITOR_SHORTCUTS', `Shortcut execution failed: ${shortcut.description}`, error);\n      }\n    }\n  }\n\n  return false;\n}\n\n// 🔥 단축키 도움말 생성\nexport function getShortcutHelp(): string {\n  const isMacPlatform = isMac;\n  const mod = isMacPlatform ? '⌘' : 'Ctrl';\n  const alt = isMacPlatform ? '⌥' : 'Alt';\n  \n  return `\n📝 **텍스트 포맷팅**\n• ${mod}+B: 볼드\n• ${mod}+I: 이탤릭  \n• ${mod}+U: 언더라인\n• ${mod}+Shift+S: 취소선\n• ${mod}+K: 링크\n\n📄 **헤딩**\n• ${mod}+${alt}+1: 제목 1\n• ${mod}+${alt}+2: 제목 2\n• ${mod}+${alt}+3: 제목 3\n• ${mod}+${alt}+0: 일반 텍스트\n\n📋 **리스트**\n• ${mod}+Shift+8: 불릿 리스트\n• ${mod}+Shift+7: 번호 리스트\n\n💾 **저장**\n• ${mod}+S: 저장\n`.trim();\n}\n\n// 🔥 에디터에 단축키 시스템 바인딩 (전역 리스너 제거)\nexport function bindShortcutsToEditor(editor: Editor | null): () => void {\n  if (!editor) return () => {};\n\n  // 🔥 전역 리스너 등록하지 않음 - TipTap 내부 handleKeyDown만 사용\n  Logger.info('EDITOR_SHORTCUTS', 'Shortcuts system initialized', {\n    shortcutCount: ALL_SHORTCUTS.length,\n    platform: isMac ? 'macOS' : 'Windows/Linux'\n  });\n\n  // 🔥 정리 함수 반환 (실제로는 아무것도 안 함)\n  return () => {\n    Logger.debug('EDITOR_SHORTCUTS', 'Shortcuts system cleaned up');\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 471, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/ShortcutHelp.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { HelpCircle, X as XIcon, EyeOff } from 'lucide-react';\nimport { getShortcutHelp } from './EditorShortcuts';\n\n// 🔥 단축키 도움말 스타일\nconst HELP_STYLES = {\n  trigger: 'fixed bottom-4 right-4 z-50 w-12 h-12 bg-blue-600 hover:bg-blue-700 text-white rounded-full flex items-center justify-center shadow-lg transition-colors cursor-pointer',\n  hidden: 'hidden',\n  modal: 'fixed inset-0 z-[100] flex items-center justify-center bg-black bg-opacity-50',\n  panel: 'bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-lg w-full mx-4 max-h-[80vh] overflow-hidden',\n  header: 'flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-700',\n  title: 'text-xl font-bold text-slate-900 dark:text-slate-100',\n  closeButton: 'w-8 h-8 flex items-center justify-center rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors',\n  content: 'p-6 overflow-y-auto',\n  helpText: 'prose prose-slate dark:prose-invert max-w-none text-sm',\n  footer: 'p-4 border-t border-slate-200 dark:border-slate-700 flex justify-between',\n  hideButton: 'flex items-center text-sm text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-slate-100',\n} as const;\n\ninterface ShortcutHelpProps {\n  className?: string;\n  isWriterStatsOpen?: boolean;\n}\n\n// 정적 메서드: 숨겨진 가이드를 다시 표시\nexport function resetShortcutHelpVisibility(): void {\n  localStorage.setItem('shortcutHelp.isVisible', 'true');\n}\n\nexport function ShortcutHelp({ className = '', isWriterStatsOpen = false }: ShortcutHelpProps): React.ReactElement {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isVisible, setIsVisible] = useState<boolean>(true);\n\n  // localStorage에서 가이드 표시 여부 상태 불러오기\n  useEffect(() => {\n    const savedVisibility = localStorage.getItem('shortcutHelp.isVisible');\n    if (savedVisibility !== null) {\n      setIsVisible(savedVisibility === 'true');\n    }\n  }, []);\n\n  const handleToggle = (): void => {\n    setIsOpen(prev => !prev);\n  };\n\n  const handleClose = (): void => {\n    setIsOpen(false);\n  };\n\n  const handleHideGuide = (): void => {\n    if (confirm('단축키 가이드를 항상 숨기시겠습니까? 설정 페이지에서 다시 표시할 수 있습니다.')) {\n      setIsVisible(false);\n      setIsOpen(false);\n      localStorage.setItem('shortcutHelp.isVisible', 'false');\n    }\n  };\n\n  const handleBackdropClick = (event: React.MouseEvent): void => {\n    if (event.target === event.currentTarget) {\n      handleClose();\n    }\n  };\n\n  // 🔥 Escape 키로 닫기 및 F1 키로 열기\n  useEffect(() => {\n    const handleEscape = (event: KeyboardEvent): void => {\n      if (event.key === 'Escape' && isOpen) {\n        handleClose();\n      }\n    };\n\n    const handleHelpShortcut = (): void => {\n      setIsOpen(prev => !prev);\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    window.addEventListener('shortcut:help', handleHelpShortcut);\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      window.removeEventListener('shortcut:help', handleHelpShortcut);\n    };\n  }, [isOpen]);\n\n  // WriterStatsPanel이 열려있을 때 숨기기\n  useEffect(() => {\n    if (isWriterStatsOpen) {\n      setIsOpen(false);\n    }\n  }, [isWriterStatsOpen]);\n\n  // 가이드 숨김 상태면 아무것도 표시하지 않음\n  if (!isVisible) {\n    return <></>;\n  }\n\n  return (\n    <>\n      {/* 🔥 도움말 트리거 버튼 */}\n      <button\n        className={`${HELP_STYLES.trigger} ${className}`}\n        onClick={handleToggle}\n        title=\"단축키 도움말 (F1)\"\n        aria-label=\"단축키 도움말\"\n      >\n        <HelpCircle size={24} />\n      </button>\n\n      {/* 🔥 도움말 모달 */}\n      {isOpen && (\n        <div className={HELP_STYLES.modal} onClick={handleBackdropClick}>\n          <div className={HELP_STYLES.panel}>\n            {/* 🔥 헤더 */}\n            <div className={HELP_STYLES.header}>\n              <h2 className={HELP_STYLES.title}>키보드 단축키</h2>\n              <button\n                className={HELP_STYLES.closeButton}\n                onClick={handleClose}\n                aria-label=\"닫기\"\n              >\n                <XIcon size={20} />\n              </button>\n            </div>\n\n            {/* 🔥 도움말 내용 */}\n            <div className={HELP_STYLES.content}>\n              <div className={HELP_STYLES.helpText}>\n                {/* Render markdown-like shortcuts safely without using innerHTML */}\n                {getShortcutHelp().split('\\n').map((line, idx) => {\n                  if (line.startsWith('### ')) return <h3 key={idx} className=\"text-md font-bold mt-2 mb-1\">{line.replace('### ', '')}</h3>;\n                  if (line.startsWith('## ')) return <h2 key={idx} className=\"text-lg font-bold mt-3 mb-2\">{line.replace('## ', '')}</h2>;\n                  if (line.startsWith('# ')) return <h1 key={idx} className=\"text-xl font-bold mt-4 mb-2\">{line.replace('# ', '')}</h1>;\n                  // bold **text**\n                  const parts = [];\n                  let remaining = line;\n                  const boldRe = /\\*\\*(.*?)\\*\\*/;\n                  while (true) {\n                    const m = remaining.match(boldRe);\n                    if (!m) break;\n                    const before = remaining.slice(0, m.index);\n                    if (before) parts.push(before);\n                    parts.push(<strong key={`${idx}-b-${parts.length}`}>{m[1]}</strong>);\n                    remaining = remaining.slice((m.index || 0) + m[0].length);\n                  }\n                  if (remaining) parts.push(remaining);\n                  return <p key={idx} className=\"leading-relaxed\" style={{ marginTop: 4 }}>{parts}</p>;\n                })}\n              </div>\n            </div>\n\n            {/* 🔥 푸터 추가 - 가이드 숨기기 버튼 */}\n            <div className={HELP_STYLES.footer}>\n              <div></div> {/* 왼쪽 빈 공간 */}\n              <button\n                className={HELP_STYLES.hideButton}\n                onClick={handleHideGuide}\n                title=\"이 가이드를 항상 숨기기\"\n                aria-label=\"가이드 숨기기\"\n              >\n                <EyeOff size={16} className=\"mr-2\" />\n                가이드 숨기기\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 746, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/components/WriterSidebar.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, memo } from 'react';\nimport {\n  Edit3,\n  FileText,\n  Users,\n  BookOpen,\n  TrendingUp,\n  Circle,\n  CheckCircle,\n  Plus,\n  MoreHorizontal\n} from 'lucide-react';\nimport { ProjectCharacter, ProjectStructure } from '../../../../shared/types';\nimport { WriterStats } from '../editor/WriterStats';\nimport { Logger } from '../../../../shared/logger';\n\ninterface WriterSidebarProps {\n  currentView: string;\n  onViewChange: (view: string) => void;\n  structure: ProjectStructure[];\n  characters: ProjectCharacter[];\n  stats: WriterStats;\n  collapsed: boolean;\n  // 🔥 추가 핸들러\n  onAddStructure?: () => void;\n  onAddCharacter?: () => void;\n  onAddNote?: () => void;\n}\n\n// 🔥 기가차드 간소화된 사이드바 스타일\nconst SIDEBAR_STYLES = {\n  // 기본 컨테이너 (스크롤바 문제 해결)\n  container: 'flex flex-col bg-gray-50 dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 transition-all duration-300 h-full',\n  collapsed: 'w-12',\n  expanded: 'w-64',\n\n  // 🔥 얇은 스크롤바 적용 영역\n  scrollArea: 'flex-1 overflow-y-auto overflow-x-hidden custom-scrollbar',\n\n  // 🔥 메뉴 섹션 간소화\n  menuSection: 'p-3 space-y-1',\n  menuItem: 'flex items-center gap-3 px-3 py-2 text-sm font-medium transition-colors duration-200 cursor-pointer rounded-md',\n  menuItemActive: 'bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300',\n  menuItemInactive: 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700',\n\n  // 🔥 섹션 헤더 간소화\n  sectionHeader: 'text-xs font-semibold text-gray-500 dark:text-gray-400 mb-2 px-3',\n\n  // 🔥 구조 아이템 간소화\n  structureList: 'space-y-1 px-3',\n  structureItem: 'flex items-center gap-2 py-1.5 text-sm text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 cursor-pointer transition-colors',\n\n  // 🔥 통계 영역 간소화\n  statsSection: 'p-3 border-t border-gray-200 dark:border-gray-700',\n  statItem: 'flex justify-between items-center py-1 text-sm',\n  statLabel: 'text-gray-600 dark:text-gray-400',\n  statValue: 'font-medium text-gray-900 dark:text-gray-100',\n} as const;\n\n// 🔥 메뉴 아이템 정의 (핵심 기능만)\nconst MENU_ITEMS = [\n  { id: 'write', label: '글쓰기', icon: Edit3 },\n  { id: 'structure', label: '구조', icon: FileText },\n  { id: 'characters', label: '인물', icon: Users },\n  { id: 'notes', label: '메모', icon: BookOpen },\n];\n\nexport const WriterSidebar = memo(function WriterSidebar({\n  currentView,\n  onViewChange,\n  structure,\n  characters,\n  stats,\n  collapsed,\n  onAddStructure,\n  onAddCharacter,\n  onAddNote\n}: WriterSidebarProps): React.ReactElement {\n  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['structure']));\n\n  const toggleSection = (sectionId: string): void => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(sectionId)) {\n      newExpanded.delete(sectionId);\n    } else {\n      newExpanded.add(sectionId);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  // 🔥 축소 모드에서는 아이콘만 표시\n  if (collapsed) {\n    return (\n      <div className={`${SIDEBAR_STYLES.container} ${SIDEBAR_STYLES.collapsed}`}>\n        <div className={SIDEBAR_STYLES.menuSection}>\n          {MENU_ITEMS.map((item) => (\n            <button\n              key={item.id}\n              onClick={() => onViewChange(item.id)}\n              className={`w-8 h-8 flex items-center justify-center rounded-md transition-colors ${currentView === item.id\n                ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-300'\n                : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n              title={item.label}\n            >\n              <item.icon size={16} />\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${SIDEBAR_STYLES.container} ${SIDEBAR_STYLES.expanded}`}>\n      {/* 🔥 메인 메뉴 */}\n      <div className={SIDEBAR_STYLES.menuSection}>\n        {MENU_ITEMS.map((item) => (\n          <button\n            key={item.id}\n            onClick={() => onViewChange(item.id)}\n            className={`${SIDEBAR_STYLES.menuItem} ${currentView === item.id ? SIDEBAR_STYLES.menuItemActive : SIDEBAR_STYLES.menuItemInactive\n              }`}\n          >\n            <item.icon size={16} />\n            <span>{item.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* 🔥 스크롤 가능한 컨텐츠 영역 - 뷰별 내용 표시 */}\n      <div className={SIDEBAR_STYLES.scrollArea}>\n        {/* 🔥 현재 뷰에 따른 컨텐츠 표시 */}\n        {currentView === 'write' && (\n          <>\n            {/* 🔥 프로젝트 구조 */}\n            <div className=\"p-3\">\n              <h3 className={SIDEBAR_STYLES.sectionHeader}>프로젝트 구조</h3>\n              <div className={SIDEBAR_STYLES.structureList}>\n                {structure.map((item, index) => (\n                  <div key={item.id} className={SIDEBAR_STYLES.structureItem}>\n                    <Circle size={12} className=\"text-blue-500\" />\n                    <span className=\"flex-1\">{`${index + 1}챕터: ${item.title}`}</span>\n                    <span className=\"text-xs text-gray-400\">{item.status}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* 🔥 간단한 글쓰기 통계 */}\n            <div className={SIDEBAR_STYLES.statsSection}>\n              <h3 className={SIDEBAR_STYLES.sectionHeader}>글쓰기 통계</h3>\n              <div className=\"space-y-2\">\n                <div className={SIDEBAR_STYLES.statItem}>\n                  <span className={SIDEBAR_STYLES.statLabel}>단어</span>\n                  <span className={SIDEBAR_STYLES.statValue}>{stats.wordCount}</span>\n                </div>\n                <div className={SIDEBAR_STYLES.statItem}>\n                  <span className={SIDEBAR_STYLES.statLabel}>문자</span>\n                  <span className={SIDEBAR_STYLES.statValue}>{stats.charCount}</span>\n                </div>\n                <div className={SIDEBAR_STYLES.statItem}>\n                  <span className={SIDEBAR_STYLES.statLabel}>진행률</span>\n                  <span className={SIDEBAR_STYLES.statValue}>{stats.progress}%</span>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* 🔥 구조 뷰 */}\n        {currentView === 'structure' && (\n          <div className=\"p-3\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className={SIDEBAR_STYLES.sectionHeader}>구조 관리</h3>\n              <button\n                className=\"text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 p-1 rounded hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors\"\n                onClick={onAddStructure}\n                title=\"새 구조 추가\"\n              >\n                <Plus size={16} />\n              </button>\n            </div>\n            <div className={SIDEBAR_STYLES.structureList}>\n              {structure.map((item, index) => (\n                <div key={item.id} className={`${SIDEBAR_STYLES.structureItem} justify-between`}>\n                  <div className=\"flex items-center gap-2\">\n                    <Circle size={12} className=\"text-blue-500\" />\n                    <span className=\"flex-1\">{`${index + 1}챕터: ${item.title}`}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <span className=\"text-xs text-gray-400\">{item.status}</span>\n                    <button\n                      className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        Logger.info('WRITER_SIDEBAR', '구조 관리 메뉴 클릭', { title: item.title });\n                        // TODO: 구조 아이템 메뉴 표시\n                      }}\n                      title=\"옵션\"\n                    >\n                      <MoreHorizontal size={12} />\n                    </button>\n                  </div>\n                </div>\n              ))}\n              {structure.length === 0 && (\n                <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                  <FileText size={32} className=\"mx-auto mb-2 opacity-50\" />\n                  <p className=\"text-sm\">구조를 추가해보세요</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* 🔥 인물 뷰 */}\n        {currentView === 'characters' && (\n          <div className=\"p-3\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className={SIDEBAR_STYLES.sectionHeader}>인물 관리</h3>\n              <button\n                className=\"text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 p-1 rounded hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  Logger.info('WRITER_SIDEBAR', '인물 추가 버튼 클릭');\n                  onAddCharacter?.();\n                }}\n                title=\"새 인물 추가\"\n              >\n                <Plus size={16} />\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              {characters.map((character) => (\n                <div key={character.id} className={`${SIDEBAR_STYLES.structureItem} justify-between`}>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-purple-400 to-pink-400 flex items-center justify-center text-white text-xs font-medium\">\n                      {character.name.charAt(0)}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">{character.name}</div>\n                      {character.role && (\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">{character.role}</div>\n                      )}\n                    </div>\n                  </div>\n                  <button\n                    className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      Logger.info('WRITER_SIDEBAR', '인물 메뉴 클릭', { name: character.name });\n                      // TODO: 인물 메뉴 표시\n                    }}\n                    title=\"옵션\"\n                  >\n                    <MoreHorizontal size={12} />\n                  </button>\n                </div>\n              ))}\n              {characters.length === 0 && (\n                <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                  <Users size={32} className=\"mx-auto mb-2 opacity-50\" />\n                  <p className=\"text-sm\">인물을 추가해보세요</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* 🔥 메모 뷰 */}\n        {currentView === 'notes' && (\n          <div className=\"p-3\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className={SIDEBAR_STYLES.sectionHeader}>메모 관리</h3>\n              <button\n                className=\"text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 p-1 rounded hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  Logger.info('WRITER_SIDEBAR', '메모 추가 버튼 클릭');\n                  onAddNote?.();\n                }}\n                title=\"새 메모 추가\"\n              >\n                <Plus size={16} />\n              </button>\n            </div>\n            <div className=\"space-y-2\">\n              {/* 🔥 임시 메모 데이터 (나중에 실제 데이터로 교체) */}\n              <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                <BookOpen size={32} className=\"mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm\">메모를 추가해보세요</p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1458, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/WriterStats.ts"],"sourcesContent":["// 🔥 작가 통계 계산 유틸리티\n\nexport interface WriterStats {\n  wordCount: number;\n  charCount: number;\n  paragraphCount: number;\n  readingTime: number;\n  wordGoal: number;\n  progress: number;\n  sessionTime: number;\n  wpm: number;\n  headingCount?: number;\n  listItemCount?: number;\n}\n\n// 🔥 작가 통계 계산\nexport const calculateWriterStats = (\n  content: string,\n  wordGoal: number,\n  sessionStartTime: number\n): WriterStats => {\n  if (!content) {\n    return {\n      wordCount: 0,\n      charCount: 0,\n      paragraphCount: 0,\n      readingTime: 0,\n      wordGoal,\n      progress: 0,\n      sessionTime: 0,\n      wpm: 0,\n      headingCount: 0,\n      listItemCount: 0\n    };\n  }\n  \n  const lines = content.split('\\n');\n  const wordCount = content.split(/\\s+/).filter(word => word.length > 0).length;\n  const charCount = content.length;\n  const paragraphCount = content.split(/\\n\\s*\\n/).filter(p => p.trim().length > 0).length;\n  const readingTime = Math.ceil(wordCount / 200); // 분 단위 (200 WPM 기준)\n  const progress = Math.min(100, Math.round((wordCount / wordGoal) * 100));\n  \n  // 세션 시간 및 WPM 계산\n  const sessionMinutes = Math.max(1, (Date.now() - sessionStartTime) / 1000 / 60);\n  const wpm = Math.round(wordCount / sessionMinutes);\n  const sessionTime = Math.floor(sessionMinutes);\n  \n  // 마크다운 요소 카운트\n  const headingCount = lines.filter(line => line.match(/^#{1,6}\\s/)).length;\n  const listItemCount = lines.filter(line => line.match(/^[\\s]*[-*+]\\s/)).length;\n  \n  return {\n    wordCount,\n    charCount,\n    paragraphCount,\n    readingTime,\n    wordGoal,\n    progress,\n    sessionTime,\n    wpm,\n    headingCount,\n    listItemCount\n  };\n};\n\n// 🔥 시간 포맷팅 헬퍼\nexport const formatTime = (minutes: number): string => {\n  if (minutes < 60) return `${minutes}분`;\n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  return `${hours}시간 ${mins ? `${mins}분` : ''}`;\n};\n\n// 🔥 마지막 저장 시간 포맷팅\nexport const formatLastSaved = (lastSaved: Date | null): string => {\n  if (!lastSaved) return '저장되지 않음';\n  \n  const now = new Date();\n  const diffMs = now.getTime() - lastSaved.getTime();\n  const diffMins = Math.floor(diffMs / (1000 * 60));\n  \n  if (diffMins < 1) return '방금 전';\n  if (diffMins < 60) return `${diffMins}분 전`;\n  \n  const diffHours = Math.floor(diffMins / 60);\n  if (diffHours < 24) return `${diffHours}시간 전`;\n  \n  const diffDays = Math.floor(diffHours / 24);\n  return `${diffDays}일 전`;\n};\n\n// 🔥 글쓰기 목표 추천\nexport const getRecommendedWordGoal = (averageWordsPerDay: number): number[] => {\n  const base = Math.max(500, averageWordsPerDay);\n  return [\n    Math.round(base * 0.8),\n    base,\n    Math.round(base * 1.2),\n    Math.round(base * 1.5),\n    Math.round(base * 2.0)\n  ];\n};\n    "],"names":[],"mappings":"AAAA,mBAAmB;;;;;;;AAgBZ,MAAM,uBAAuB,CAClC,SACA,UACA;IAEA,IAAI,CAAC,SAAS;QACZ,OAAO;YACL,WAAW;YACX,WAAW;YACX,gBAAgB;YAChB,aAAa;YACb;YACA,UAAU;YACV,aAAa;YACb,KAAK;YACL,cAAc;YACd,eAAe;QACjB;IACF;IAEA,MAAM,QAAQ,QAAQ,KAAK,CAAC;IAC5B,MAAM,YAAY,QAAQ,KAAK,CAAC,OAAO,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,GAAG,GAAG,MAAM;IAC7E,MAAM,YAAY,QAAQ,MAAM;IAChC,MAAM,iBAAiB,QAAQ,KAAK,CAAC,WAAW,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,GAAG,MAAM,GAAG,GAAG,MAAM;IACvF,MAAM,cAAc,KAAK,IAAI,CAAC,YAAY,MAAM,oBAAoB;IACpE,MAAM,WAAW,KAAK,GAAG,CAAC,KAAK,KAAK,KAAK,CAAC,AAAC,YAAY,WAAY;IAEnE,iBAAiB;IACjB,MAAM,iBAAiB,KAAK,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,gBAAgB,IAAI,OAAO;IAC5E,MAAM,MAAM,KAAK,KAAK,CAAC,YAAY;IACnC,MAAM,cAAc,KAAK,KAAK,CAAC;IAE/B,cAAc;IACd,MAAM,eAAe,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,KAAK,CAAC,cAAc,MAAM;IACzE,MAAM,gBAAgB,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,KAAK,CAAC,kBAAkB,MAAM;IAE9E,OAAO;QACL;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACF;AACF;AAGO,MAAM,aAAa,CAAC;IACzB,IAAI,UAAU,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC;IACtC,MAAM,QAAQ,KAAK,KAAK,CAAC,UAAU;IACnC,MAAM,OAAO,UAAU;IACvB,OAAO,GAAG,MAAM,GAAG,EAAE,OAAO,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI;AAC/C;AAGO,MAAM,kBAAkB,CAAC;IAC9B,IAAI,CAAC,WAAW,OAAO;IAEvB,MAAM,MAAM,IAAI;IAChB,MAAM,SAAS,IAAI,OAAO,KAAK,UAAU,OAAO;IAChD,MAAM,WAAW,KAAK,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE;IAE/C,IAAI,WAAW,GAAG,OAAO;IACzB,IAAI,WAAW,IAAI,OAAO,GAAG,SAAS,GAAG,CAAC;IAE1C,MAAM,YAAY,KAAK,KAAK,CAAC,WAAW;IACxC,IAAI,YAAY,IAAI,OAAO,GAAG,UAAU,IAAI,CAAC;IAE7C,MAAM,WAAW,KAAK,KAAK,CAAC,YAAY;IACxC,OAAO,GAAG,SAAS,GAAG,CAAC;AACzB;AAGO,MAAM,yBAAyB,CAAC;IACrC,MAAM,OAAO,KAAK,GAAG,CAAC,KAAK;IAC3B,OAAO;QACL,KAAK,KAAK,CAAC,OAAO;QAClB;QACA,KAAK,KAAK,CAAC,OAAO;QAClB,KAAK,KAAK,CAAC,OAAO;QAClB,KAAK,KAAK,CAAC,OAAO;KACnB;AACH","debugId":null}},
    {"offset": {"line": 1540, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/WriterStatsPanel.tsx"],"sourcesContent":["'use client';\n\n// AI 및 WPM 도입 - 기가차드 완벽 구현\n\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { Button } from '../../ui/Button';\nimport {\n  ChevronRight,\n  Minus,\n  Plus,\n  Sparkles,\n  Users,\n  Map,\n  MessageSquare as Speech,\n  Loader2,\n  TrendingUp,\n  Clock,\n  Target,\n  BookOpen,\n  Send,\n  BarChart2,\n  Brain,\n  AlignLeft\n} from 'lucide-react';\nimport { formatTime, calculateWriterStats, type WriterStats } from './WriterStats';\nimport { Logger } from '../../../../shared/logger';\n\n// Helper: send payload to AI endpoint(s) using env config and prefer HTTPS\nasync function aiPost(payload: Record<string, any>): Promise<any> {\n  const PRIMARY_API = (process.env.NEXT_PUBLIC_AI_API_URL || 'https://loop-openai.onrender.com').replace(/\\/$/, '');\n  const FALLBACK_API = (process.env.NEXT_PUBLIC_AI_FALLBACK_URL || (process.env.NODE_ENV === 'development' ? 'http://0.0.0.0:8080' : '')).replace(/\\/$/, '');\n\n  const doPost = async (base: string) => {\n    if (!base) throw new Error('No API URL configured');\n    // Allow only secure endpoints (https) in production. Allow http only for localhost/127.0.0.1 during development.\n    try {\n      const parsed = new URL(base);\n      const isSecure = parsed.protocol === 'https:';\n      const isLocalhost = parsed.hostname === 'localhost' || parsed.hostname === '127.0.0.1';\n      if (!isSecure && !(isLocalhost && process.env.NODE_ENV === 'development')) {\n        throw new Error('Insecure API endpoint not allowed');\n      }\n    } catch (e) {\n      throw new Error('Invalid API URL');\n    }\n    const resp = await fetch(`${base}/api/chat`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },\n      body: JSON.stringify(payload)\n    });\n    if (!resp.ok) throw new Error(`API 응답 에러: ${resp.status} - ${resp.statusText}`);\n    return await resp.json();\n  };\n\n  try {\n    return await doPost(PRIMARY_API);\n  } catch (primaryErr) {\n    if (FALLBACK_API) {\n      try {\n        return await doPost(FALLBACK_API);\n      } catch (fallbackErr) {\n        const err = new Error('Both AI endpoints failed');\n        (err as any).primaryErr = primaryErr;\n        (err as any).fallbackErr = fallbackErr;\n        throw err;\n      }\n    }\n    throw primaryErr;\n  }\n}\n\ninterface WriterStatsPanelProps {\n  showRightSidebar: boolean;\n  toggleRightSidebar: () => void;\n  writerStats: WriterStats;\n  setWordGoal: (goal: number) => void;\n  currentText?: string; // 🔥 현재 편집 중인 텍스트\n  projectId?: string; // 🔥 현재 프로젝트 ID\n}\n\n// 채팅 메시지 타입\ninterface ChatMessage {\n  role: 'user' | 'ai';\n  content: string;\n}\n\nconst STATS_STYLES = {\n  rightSidebar: 'w-80 bg-white dark:bg-slate-900 border-l border-slate-200 dark:border-slate-800 flex flex-col transition-all duration-300 ease-in-out',\n  rightSidebarCollapsed: 'w-0 overflow-hidden transition-all duration-300 ease-in-out',\n  rightSidebarHeader: 'flex items-center justify-between p-4 border-b border-slate-200 dark:border-slate-800',\n  rightSidebarTitle: 'text-lg font-semibold text-slate-900 dark:text-slate-100',\n  iconButton: 'flex items-center justify-center w-9 h-9 rounded-lg transition-colors hover:bg-slate-100 dark:hover:bg-slate-800 text-slate-600 dark:text-slate-400',\n  statCard: 'bg-slate-50 dark:bg-slate-800 rounded-lg p-3 mb-3',\n  statTitle: 'text-xs font-medium text-slate-600 dark:text-slate-400 mb-1',\n  statValue: 'text-lg font-bold text-slate-900 dark:text-slate-100',\n  statSubtext: 'text-xs text-slate-500 dark:text-slate-400',\n\n  // 🔥 탭 스타일 추가\n  tabs: 'flex border-b border-slate-200 dark:border-slate-800',\n  tab: 'px-4 py-2 text-sm text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-slate-100 cursor-pointer',\n  tabActive: 'px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400 cursor-pointer',\n  tabContent: 'p-4 flex-1 overflow-y-auto',\n\n  // 🔥 AI 채팅 스타일 - UI 잘림 문제 해결\n  chatContainer: 'flex flex-col h-full overflow-hidden',\n  chatMessages: 'flex-1 overflow-y-auto px-2 py-3 space-y-3 max-h-[calc(100%-60px)]',\n  chatMessage: 'p-3 rounded-lg text-sm break-words whitespace-pre-wrap max-w-[90%]', // 개선: 긴 텍스트 개행 및 줄바꿈 보존, 너비 제한\n  userMessage: 'bg-blue-100 dark:bg-blue-900/40 ml-8 mr-2 text-slate-800 dark:text-slate-200',\n  aiMessage: 'bg-slate-100 dark:bg-slate-800 ml-2 mr-8 text-slate-800 dark:text-slate-200 overflow-auto',\n  chatInputContainer: 'flex p-2 border-t border-slate-200 dark:border-slate-800 mt-auto',\n  chatInput: 'flex-1 rounded-l-md px-3 py-2 border border-slate-300 dark:border-slate-700 bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100 focus:outline-none focus:ring-1 focus:ring-blue-600 dark:focus:ring-blue-500',\n  chatSendButton: 'flex items-center justify-center px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-r-md transition-colors disabled:bg-blue-400 disabled:cursor-not-allowed',\n  loadingDots: 'flex space-x-1 items-center justify-center py-2',\n  loadingDot: 'w-2 h-2 bg-slate-400 rounded-full animate-pulse',\n} as const;\n\nexport function WriterStatsPanel({\n  showRightSidebar,\n  toggleRightSidebar,\n  writerStats,\n  setWordGoal,\n  currentText = '',\n  projectId\n}: WriterStatsPanelProps): React.ReactElement {\n\n  // 🔥 탭 관리\n  const [activeTab, setActiveTab] = useState<'stats' | 'ai'>('stats');\n\n  // 🔥 AI 기능 상태 관리\n  const [aiLoading, setAiLoading] = useState<string | null>(null);\n  const [aiResults, setAiResults] = useState<Record<string, string>>({});\n\n  // 🔥 AI 채팅 상태 관리\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [userInput, setUserInput] = useState<string>('');\n  const [isAiTyping, setIsAiTyping] = useState<boolean>(false);\n  const chatEndRef = useRef<HTMLDivElement>(null);\n\n  // 🔥 실제 세션 관리\n  const [sessionStartTime] = useState<number>(() => Date.now());\n  const [realTimeStats, setRealTimeStats] = useState<WriterStats | null>(null);\n  const [lastWordCount, setLastWordCount] = useState<number>(0);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // 🔥 OpenAI 채팅 통합 - Electron API를 통한 IPC 통신으로 변경\n  const sendMessageToOpenAI = useCallback(async (content: string): Promise<void> => {\n    try {\n      // 사용자 메시지 추가\n      const userMessage: ChatMessage = { role: 'user', content };\n      setMessages(prev => [...prev, userMessage]);\n\n      // AI 응답 로딩 상태 시작\n      setIsAiTyping(true);\n\n      Logger.info('AI_CHAT', 'AI request started', { preview: content.substring(0, 30) + '...' });\n\n      // Electron API를 통한 AI 요청\n      if (typeof window !== 'undefined' && window.electronAPI?.ai?.sendMessage) {\n        const result = await window.electronAPI.ai.sendMessage(content);\n\n        Logger.info('AI_CHAT', 'AI response status', { success: result.success });\n\n        if (!result.success) {\n          throw new Error(result.error || 'AI 응답 실패');\n        }\n\n        const responseData = result.data;\n        Logger.info('AI_CHAT', 'AI response received', { preview: responseData?.response ? `${responseData.response.substring(0, 30)}...` : 'No response' });\n\n        // AI 응답 추가\n        const aiMessage: ChatMessage = {\n          role: 'ai',\n          content: responseData?.response || '죄송합니다, 응답을 생성하지 못했습니다.'\n        };\n        setMessages(prev => [...prev, aiMessage]);\n\n      } else {\n        // Fallback: 직접 fetch (개발 환경 또는 Electron API 미사용시)\n        Logger.warn('AI_CHAT', 'Electron API not available, using fetch fallback');\n\n        try {\n          const data = await aiPost({ message: content });\n          const aiMessage: ChatMessage = {\n            role: 'ai',\n            content: data.response || '죄송합니다, 응답을 생성하지 못했습니다.'\n          };\n          setMessages(prev => [...prev, aiMessage]);\n        } catch (err) {\n          Logger.error('AI_CHAT', 'AI fallback fetch error', err);\n          throw err;\n        }\n      }\n    } catch (error) {\n      const err = error as Error;\n      Logger.error('AI_CHAT', 'AI response error', err);\n\n      // 오류 메시지 추가\n      const errorMessage: ChatMessage = {\n        role: 'ai',\n        content: \"죄송합니다. 응답을 생성하는 중 오류가 발생했습니다. 다시 시도해주세요.\"\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsAiTyping(false);\n      // 입력 필드 비우기\n      setUserInput('');\n      // 채팅창 스크롤 맨 아래로\n      setTimeout(() => {\n        chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n      }, 100);\n    }\n  }, [messages, projectId]);\n\n  // 채팅 메시지 제출 처리\n  const handleChatSubmit = useCallback((e?: React.FormEvent): void => {\n    e?.preventDefault();\n    if (userInput.trim() && !isAiTyping) {\n      sendMessageToOpenAI(userInput.trim());\n    }\n  }, [userInput, isAiTyping, sendMessageToOpenAI]);\n\n  // 🔥 실시간 통계 계산\n  useEffect(() => {\n    if (currentText) {\n      const stats = calculateWriterStats(currentText, writerStats.wordGoal, sessionStartTime);\n      setRealTimeStats(stats);\n\n      // WPM 계산을 위한 단어 수 변경 추적\n      if (stats.wordCount !== lastWordCount) {\n        setLastWordCount(stats.wordCount);\n      }\n    }\n  }, [currentText, writerStats.wordGoal, sessionStartTime, lastWordCount]);\n\n  // 🔥 1초마다 세션 시간 업데이트\n  useEffect(() => {\n    intervalRef.current = setInterval(() => {\n      if (currentText) {\n        const stats = calculateWriterStats(currentText, writerStats.wordGoal, sessionStartTime);\n        setRealTimeStats(stats);\n      }\n    }, 1000);\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [currentText, writerStats.wordGoal, sessionStartTime]);\n\n  // 🔥 실제 사용할 통계 데이터 (실시간 계산된 것 우선)\n  const displayStats = realTimeStats || writerStats;\n\n  // 🔥 AI 채팅창 스크롤 자동 조정\n  useEffect(() => {\n    if (chatEndRef.current) {\n      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  // 🔥 AI 채팅 전송 - Electron API를 통한 실제 연동\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n\n    // 사용자 메시지 추가\n    const newMessage = { role: 'user' as const, content: userInput };\n    setMessages(prev => [...prev, newMessage]);\n    setUserInput('');\n    setIsAiTyping(true);\n\n    try {\n      Logger.info('AI_CHAT', 'AI chat request started', { preview: userInput.substring(0, 30) + '...' });\n\n      // Electron API를 통한 AI 요청\n      if (typeof window !== 'undefined' && window.electronAPI?.ai?.sendMessage) {\n        const result = await window.electronAPI.ai.sendMessage(userInput.trim());\n\n        if (!result.success) {\n          throw new Error(result.error || 'AI 응답 실패');\n        }\n\n        const responseData = result.data;\n        Logger.info('AI_CHAT', 'AI chat response success', { preview: responseData?.response ? `${responseData.response.substring(0, 30)}...` : 'No response' });\n\n        // AI 응답 메시지 추가\n        const aiMessage = {\n          role: 'ai' as const,\n          content: responseData?.response || '죄송합니다, 응답을 생성하지 못했습니다.'\n        };\n        setMessages(prev => [...prev, aiMessage]);\n\n      } else {\n        // Fallback: 직접 fetch (개발 환경 또는 Electron API 미사용시)\n        Logger.warn('AI_CHAT', 'Electron API not available, using fetch fallback');\n\n        try {\n          const data = await aiPost({ message: userInput });\n          const aiMessage = {\n            role: 'ai' as const,\n            content: data.response || '죄송합니다, 응답을 생성하지 못했습니다.'\n          };\n          setMessages(prev => [...prev, aiMessage]);\n        } catch (err) {\n          Logger.error('AI_CHAT', 'AI chat fetch failed', err);\n          throw err;\n        }\n      }\n\n    } catch (error) {\n      const err = error as Error;\n      Logger.error('AI_CHAT', 'AI chat error', err);\n      setMessages(prev => [...prev, {\n        role: 'ai',\n        content: '죄송합니다, 응답을 생성하는 중 오류가 발생했습니다. 다시 시도해 주세요.'\n      }]);\n    } finally {\n      setIsAiTyping(false);\n      // 채팅창 스크롤 맨 아래로\n      setTimeout(() => {\n        if (chatEndRef.current) {\n          chatEndRef.current.scrollIntoView({ behavior: 'smooth' });\n        }\n      }, 100);\n    }\n  };\n\n  // 🔥 AI 기능 핸들러들\n  const handleAIImproveText = useCallback(async () => {\n    if (!currentText || currentText.trim().length === 0) {\n      Logger.warn('WRITER_STATS', 'No text to improve');\n      return;\n    }\n\n    setAiLoading('improve');\n    try {\n      Logger.info('WRITER_STATS', 'Requesting text improvement', { textLength: currentText.length });\n\n      const requestBody = JSON.stringify({\n        message: `다음 텍스트의 문장을 더 생생하고 흥미롭게 개선해주세요. 2-3개 예시를 들어 어떻게 개선할 수 있는지 보여주세요:\\n\\n${currentText.substring(0, 500)}...`\n      });\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: requestBody\n      };\n\n      try {\n        const data = await aiPost({ message: `다음 텍스트의 문장을 더 생생하고 흥미롭게 개선해주세요. 2-3개 예시를 들어 어떻게 개선할 수 있는지 보여주세요:\\n\\n${currentText.substring(0, 500)}...` });\n        setAiResults(prev => ({\n          ...prev,\n          improve: data.response || '문장 개선에 대한 제안을 생성하지 못했습니다. 다시 시도해주세요.'\n        }));\n      } catch (err) {\n        Logger.error('WRITER_STATS', 'Text improvement API failed', err);\n        setAiResults(prev => ({\n          ...prev,\n          improve: '죄송합니다, 문장 개선 중 오류가 발생했습니다. 다시 시도해주세요.'\n        }));\n      }\n\n    } catch (error) {\n      const err = error as Error;\n      Logger.error('WRITER_STATS', 'Text improvement error', err);\n      setAiResults(prev => ({\n        ...prev,\n        improve: '죄송합니다, 문장 개선 중 오류가 발생했습니다. 다시 시도해주세요.'\n      }));\n    } finally {\n      setAiLoading(null);\n    }\n  }, [currentText, projectId]);\n\n  const handleAICharacterAnalysis = useCallback(async () => {\n    if (!projectId) {\n      Logger.warn('WRITER_STATS', 'No project ID for character analysis');\n      return;\n    }\n\n    setAiLoading('character');\n    try {\n      Logger.info('WRITER_STATS', 'Requesting character analysis', { projectId });\n\n      // 텍스트 준비\n      const analysisText = currentText ? currentText : \"프로젝트에 대한 캐릭터 분석을 진행합니다.\";\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          message: `다음 이야기에 등장하는 캐릭터들을 분석해주세요. 각 캐릭터의 강점, 약점, 동기, 발전 방향 등을 제시해주세요:\\n\\n${analysisText.substring(0, 1000)}...`\n        })\n      };\n\n      try {\n        const data = await aiPost({ message: `다음 이야기에 등장하는 캐릭터들을 분석해주세요. 각 캐릭터의 강점, 약점, 동기, 발전 방향 등을 제시해주세요:\\n\\n${analysisText.substring(0, 1000)}...` });\n        setAiResults(prev => ({\n          ...prev,\n          character: data.response || '캐릭터 분석을 생성하지 못했습니다. 다시 시도해주세요.'\n        }));\n      } catch (err) {\n        Logger.error('WRITER_STATS', 'Character analysis API failed', err);\n        setAiResults(prev => ({\n          ...prev,\n          character: '죄송합니다, 캐릭터 분석 중 오류가 발생했습니다. 다시 시도해주세요.'\n        }));\n      }\n    } catch (error) {\n      const err = error as Error;\n      Logger.error('WRITER_STATS', 'Character analysis error', err);\n      setAiResults(prev => ({\n        ...prev,\n        character: '죄송합니다, 캐릭터 분석 중 오류가 발생했습니다. 다시 시도해주세요.'\n      }));\n    } finally {\n      setAiLoading(null);\n    }\n  }, [projectId, currentText]);\n\n  const handleAIPlotCheck = useCallback(async () => {\n    if (!currentText || currentText.trim().length === 0) {\n      Logger.warn('WRITER_STATS', 'No text for plot analysis');\n      return;\n    }\n\n    setAiLoading('plot');\n    try {\n      Logger.info('WRITER_STATS', 'Requesting plot analysis', { textLength: currentText.length });\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          message: `다음 이야기의 플롯 구조를 3막 구조에 맞춰 분석하고, 흐름과 페이스를 평가한 다음, 개선점을 제시해주세요:\\n\\n${currentText.substring(0, 1000)}...`\n        })\n      };\n\n      try {\n        const data = await aiPost({ message: `다음 이야기의 플롯 구조를 3막 구조에 맞춰 분석하고, 흐름과 페이스를 평가한 다음, 개선점을 제시해주세요:\\n\\n${currentText.substring(0, 1000)}...` });\n        setAiResults(prev => ({\n          ...prev,\n          plot: data.response || '플롯 분석을 생성하지 못했습니다. 다시 시도해주세요.'\n        }));\n      } catch (err) {\n        Logger.error('WRITER_STATS', 'Plot analysis API failed', err);\n        setAiResults(prev => ({\n          ...prev,\n          plot: '죄송합니다, 플롯 분석 중 오류가 발생했습니다. 다시 시도해주세요.'\n        }));\n      }\n    } catch (error) {\n      const err = error as Error;\n      Logger.error('WRITER_STATS', 'Plot analysis error', err);\n      setAiResults(prev => ({\n        ...prev,\n        plot: '죄송합니다, 플롯 분석 중 오류가 발생했습니다. 다시 시도해주세요.'\n      }));\n    } finally {\n      setAiLoading(null);\n    }\n  }, [currentText]);\n\n  const handleAIDialogueImprovement = useCallback(async () => {\n    if (!currentText || currentText.trim().length === 0) {\n      Logger.warn('WRITER_STATS', 'No text for dialogue improvement');\n      return;\n    }\n\n    setAiLoading('dialogue');\n    try {\n      Logger.info('WRITER_STATS', 'Requesting dialogue improvement', { textLength: currentText.length });\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          message: `다음 이야기에서 대화를 분석하고, 더 자연스럽고 캐릭터를 잘 표현하는 대화 예시를 제안해주세요:\\n\\n${currentText.substring(0, 800)}...`\n        })\n      };\n\n      try {\n        const data = await aiPost({ message: `다음 이야기에서 대화를 분석하고, 더 자연스럽고 캐릭터를 잘 표현하는 대화 예시를 제안해주세요:\\n\\n${currentText.substring(0, 800)}...` });\n        setAiResults(prev => ({\n          ...prev,\n          dialogue: data.response || '대화 개선 제안을 생성하지 못했습니다. 다시 시도해주세요.'\n        }));\n      } catch (err) {\n        Logger.error('WRITER_STATS', 'Dialogue improvement API failed', err);\n        setAiResults(prev => ({\n          ...prev,\n          dialogue: '죄송합니다, 대화 분석 중 오류가 발생했습니다. 다시 시도해주세요.'\n        }));\n      }\n    } catch (error) {\n      const err = error as Error;\n      Logger.error('WRITER_STATS', 'Dialogue improvement error', err);\n      setAiResults(prev => ({\n        ...prev,\n        dialogue: '죄송합니다, 대화 분석 중 오류가 발생했습니다. 다시 시도해주세요.'\n      }));\n    } finally {\n      setAiLoading(null);\n    }\n  }, [currentText]);\n\n  return (\n    <div className={showRightSidebar ? STATS_STYLES.rightSidebar : STATS_STYLES.rightSidebarCollapsed}>\n      <div className={STATS_STYLES.rightSidebarHeader}>\n        <h2 className={STATS_STYLES.rightSidebarTitle}>\n          {activeTab === 'stats' ? '작가 통계' : 'AI 창작 파트너'}\n        </h2>\n        <button className={STATS_STYLES.iconButton} onClick={toggleRightSidebar}>\n          <ChevronRight className=\"w-4 h-4\" />\n        </button>\n      </div>\n\n      {/* 탭 네비게이션 */}\n      <div className={STATS_STYLES.tabs}>\n        <div\n          className={activeTab === 'stats' ? STATS_STYLES.tabActive : STATS_STYLES.tab}\n          onClick={() => setActiveTab('stats')}\n        >\n          통계\n        </div>\n        <div\n          className={activeTab === 'ai' ? STATS_STYLES.tabActive : STATS_STYLES.tab}\n          onClick={() => setActiveTab('ai')}\n        >\n          AI\n        </div>\n      </div>\n\n      {/* 통계 탭 */}\n      {activeTab === 'stats' && (\n        <div className=\"p-3 overflow-y-auto\">\n          {/* 단어 수 진행률 */}\n          <div className={STATS_STYLES.statCard}>\n            <div className=\"flex justify-between items-center mb-1\">\n              <span className={STATS_STYLES.statTitle}>단어 목표</span>\n              <div className=\"flex items-center\">\n                <button\n                  className={STATS_STYLES.iconButton}\n                  onClick={() => setWordGoal(Math.max(500, displayStats.wordGoal - 500))}\n                >\n                  <Minus className=\"w-3 h-3\" />\n                </button>\n                <span className=\"text-xs mx-1\">{displayStats.wordGoal.toLocaleString()}</span>\n                <button\n                  className={STATS_STYLES.iconButton}\n                  onClick={() => setWordGoal(displayStats.wordGoal + 500)}\n                >\n                  <Plus className=\"w-3 h-3\" />\n                </button>\n              </div>\n            </div>\n\n            <div className=\"w-full bg-slate-100 dark:bg-slate-700 rounded-full h-2 mb-2\">\n              <div\n                className=\"bg-blue-600 dark:bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${Math.min(100, displayStats.progress)}%` }}\n              />\n            </div>\n\n            <div className=\"flex justify-between text-xs text-slate-500 dark:text-slate-400\">\n              <span>{displayStats.wordCount.toLocaleString()} 단어</span>\n              <span>{displayStats.progress}%</span>\n            </div>\n          </div>\n\n          {/* 작성 통계 */}\n          <div className=\"grid grid-cols-2 gap-3 mb-3\">\n            <div className={STATS_STYLES.statCard}>\n              <span className={STATS_STYLES.statTitle}>단어 수</span>\n              <div className={STATS_STYLES.statValue}>{displayStats.wordCount.toLocaleString()}</div>\n              <div className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">\n                {displayStats.wordCount > lastWordCount ? '↗' : displayStats.wordCount < lastWordCount ? '↘' : '→'}\n                실시간\n              </div>\n            </div>\n\n            <div className={STATS_STYLES.statCard}>\n              <span className={STATS_STYLES.statTitle}>문자 수</span>\n              <div className={STATS_STYLES.statValue}>{displayStats.charCount.toLocaleString()}</div>\n              <div className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">공백 포함</div>\n            </div>\n\n            <div className={STATS_STYLES.statCard}>\n              <span className={STATS_STYLES.statTitle}>단락 수</span>\n              <div className={STATS_STYLES.statValue}>{displayStats.paragraphCount}</div>\n              <div className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">구조 분석</div>\n            </div>\n\n            <div className={STATS_STYLES.statCard}>\n              <span className={STATS_STYLES.statTitle}>읽기 시간</span>\n              <div className={STATS_STYLES.statValue}>{displayStats.readingTime}분</div>\n              <div className=\"text-xs text-slate-500 dark:text-slate-400 mt-1\">200 WPM 기준</div>\n            </div>\n          </div>\n\n          {/* 세션 통계 */}\n          <div className={STATS_STYLES.statCard}>\n            <span className={STATS_STYLES.statTitle}>현재 세션</span>\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <div className={STATS_STYLES.statValue}>{formatTime(displayStats.sessionTime)}</div>\n                <div className={STATS_STYLES.statSubtext}>글쓰기 시간</div>\n              </div>\n              <div className=\"text-right\">\n                <div className={STATS_STYLES.statValue}>\n                  {displayStats.wpm > 0 ? displayStats.wpm : 0}\n                </div>\n                <div className={STATS_STYLES.statSubtext}>WPM</div>\n              </div>\n            </div>\n            {/* 🔥 WPM 성능 표시기 */}\n            <div className=\"mt-2\">\n              <div className=\"flex justify-between text-xs text-slate-500 dark:text-slate-400 mb-1\">\n                <span>타이핑 속도</span>\n                <span>\n                  {displayStats.wpm < 30 ? '천천히' :\n                    displayStats.wpm < 60 ? '보통' :\n                      displayStats.wpm < 90 ? '빠름' : '매우 빠름'}\n                </span>\n              </div>\n              <div className=\"w-full bg-slate-100 dark:bg-slate-700 rounded-full h-1\">\n                <div\n                  className={`h-1 rounded-full transition-all duration-300 ${displayStats.wpm < 30 ? 'bg-red-400' :\n                    displayStats.wpm < 60 ? 'bg-yellow-400' :\n                      displayStats.wpm < 90 ? 'bg-green-400' : 'bg-blue-400'\n                    }`}\n                  style={{ width: `${Math.min(100, (displayStats.wpm / 120) * 100)}%` }}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* 🌟 창작 파트너 */}\n          <div className=\"mt-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center\">\n                <div className=\"w-2 h-2 bg-gradient-to-r from-blue-400 to-purple-400 rounded-full mr-2 animate-pulse\"></div>\n                <h3 className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">창작 파트너</h3>\n              </div>\n              <div className=\"text-xs text-slate-500 dark:text-slate-400\">✨ 함께 써봐요</div>\n            </div>\n\n            {/* 환영 메시지 */}\n            {Object.keys(aiResults).length === 0 && (\n              <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 border border-blue-200 dark:border-blue-800 p-4 rounded-lg mb-4\">\n                <div className=\"flex items-start\">\n                  <div className=\"text-2xl mr-3\">🌟</div>\n                  <div>\n                    <div className=\"text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                      오늘도 멋진 이야기를 써보시네요!\n                    </div>\n                    <div className=\"text-xs text-slate-600 dark:text-slate-400 leading-relaxed\">\n                      무엇을 도와드릴까요? 새로운 아이디어가 필요하거나, 막힌 부분을 뚫고 싶으시면 언제든 말씀해주세요.\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"w-full justify-start hover:bg-blue-50 dark:hover:bg-blue-900/20 border-blue-200 dark:border-blue-800\"\n                onClick={handleAIImproveText}\n                disabled={aiLoading === 'improve' || !currentText}\n              >\n                {aiLoading === 'improve' ? (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin text-blue-500\" />\n                ) : (\n                  <Sparkles className=\"w-4 h-4 mr-2 text-blue-500\" />\n                )}\n                ✨ 문장을 더 매력적으로 만들어봐요\n              </Button>\n\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"w-full justify-start hover:bg-purple-50 dark:hover:bg-purple-900/20 border-purple-200 dark:border-purple-800\"\n                onClick={handleAICharacterAnalysis}\n                disabled={aiLoading === 'character' || !projectId}\n              >\n                {aiLoading === 'character' ? (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin text-purple-500\" />\n                ) : (\n                  <Users className=\"w-4 h-4 mr-2 text-purple-500\" />\n                )}\n                👥 캐릭터들이 잘 살아있는지 볼까요?\n              </Button>\n\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"w-full justify-start hover:bg-green-50 dark:hover:bg-green-900/20 border-green-200 dark:border-green-800\"\n                onClick={handleAIPlotCheck}\n                disabled={aiLoading === 'plot' || !currentText}\n              >\n                {aiLoading === 'plot' ? (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin text-green-500\" />\n                ) : (\n                  <Map className=\"w-4 h-4 mr-2 text-green-500\" />\n                )}\n                🗺️ 이야기 흐름을 함께 점검해볼까요?\n              </Button>\n\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"w-full justify-start hover:bg-orange-50 dark:hover:bg-orange-900/20 border-orange-200 dark:border-orange-800\"\n                onClick={handleAIDialogueImprovement}\n                disabled={aiLoading === 'dialogue' || !currentText}\n              >\n                {aiLoading === 'dialogue' ? (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin text-orange-500\" />\n                ) : (\n                  <Speech className=\"w-4 h-4 mr-2 text-orange-500\" />\n                )}\n                💬 대화가 자연스럽게 들리나요?\n              </Button>\n            </div>\n\n            {/* 🌟 창작 파트너 분석 결과 */}\n            {Object.keys(aiResults).length > 0 && (\n              <div className=\"mt-4\">\n                <div className=\"flex justify-between items-center mb-3\">\n                  <div className=\"flex items-center\">\n                    <div className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">창작 조언</div>\n                    <div className=\"w-1 h-1 bg-slate-400 rounded-full mx-2\"></div>\n                    <div className=\"text-xs text-slate-500\">함께 만든 결과</div>\n                  </div>\n                  <button\n                    onClick={() => setAiResults({})}\n                    className=\"text-xs text-slate-400 hover:text-slate-600 dark:hover:text-slate-300 transition-colors\"\n                  >\n                    모두 지우기\n                  </button>\n                </div>\n                <div className=\"space-y-3 max-h-48 overflow-y-auto\">\n                  {Object.entries(aiResults).map(([key, result]) => (\n                    <div key={key} className={`border p-4 rounded-lg transition-all duration-200 ${key === 'improve' ? 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800' :\n                      key === 'character' ? 'bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-800' :\n                        key === 'plot' ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800' :\n                          key === 'dialogue' ? 'bg-orange-50 dark:bg-orange-900/20 border-orange-200 dark:border-orange-800' :\n                            'bg-slate-50 dark:bg-slate-800 border-slate-200 dark:border-slate-700'\n                      }`}>\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"flex items-center\">\n                          {key === 'improve' && <Sparkles className=\"w-4 h-4 mr-2 text-blue-500\" />}\n                          {key === 'character' && <Users className=\"w-4 h-4 mr-2 text-purple-500\" />}\n                          {key === 'plot' && <Map className=\"w-4 h-4 mr-2 text-green-500\" />}\n                          {key === 'dialogue' && <Speech className=\"w-4 h-4 mr-2 text-orange-500\" />}\n                          <span className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n                            {key === 'improve' ? '✨ 문장 개선 조언' :\n                              key === 'character' ? '👥 캐릭터 분석' :\n                                key === 'plot' ? '🗺️ 플롯 점검' :\n                                  key === 'dialogue' ? '💬 대화 개선' : key}\n                          </span>\n                        </div>\n                        <button\n                          onClick={() => setAiResults(prev => {\n                            const newResults = { ...prev };\n                            delete newResults[key];\n                            return newResults;\n                          })}\n                          className=\"text-xs text-slate-400 hover:text-slate-600 dark:hover:text-slate-300 transition-colors\"\n                        >\n                          ✕\n                        </button>\n                      </div>\n                      <div className=\"text-xs text-slate-600 dark:text-slate-400 leading-relaxed whitespace-pre-wrap break-words max-h-80 overflow-y-auto\">\n                        {result}\n                      </div>\n                      <div className=\"mt-2 pt-2 border-t border-slate-200 dark:border-slate-600\">\n                        <div className=\"text-xs text-slate-500 dark:text-slate-400\">\n                          💡 <span className=\"italic\">이 조언이 도움이 되셨나요? 더 구체적인 도움이 필요하시면 언제든 말씀해주세요!</span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* AI 챗봇 탭 */}\n      {activeTab === 'ai' && (\n        <div className={`${STATS_STYLES.chatContainer} h-full`}>\n          <div className={STATS_STYLES.chatMessages}>\n            {messages.length === 0 ? (\n              <div className=\"text-center py-6 px-3 text-slate-500 dark:text-slate-400 bg-slate-50 dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700 shadow-sm mx-2\">\n                <Sparkles className=\"mx-auto w-8 h-8 mb-2 text-blue-500 opacity-90\" />\n                <p className=\"text-sm font-medium\">AI 창작 파트너에게 질문하세요</p>\n                <p className=\"text-xs mt-2 leading-relaxed\">\n                  작품 구조, 캐릭터, 대화, 문체 등에 대한 도움을 받을 수 있습니다.<br />\n                  예시: &ldquo;판타지 소설의 마법 체계를 만들어줘&rdquo;<br />또는 &ldquo;이 캐릭터를 더 흥미롭게 만드는 방법은?&rdquo;\n                </p>\n              </div>\n            ) : (\n              <>\n                {messages.map((message, idx) => (\n                  <div\n                    key={idx}\n                    className={`${STATS_STYLES.chatMessage} ${message.role === 'user' ? STATS_STYLES.userMessage : STATS_STYLES.aiMessage\n                      }`}\n                  >\n                    {message.role === 'ai' && (\n                      <>\n                        {/* 마크다운 해석 방지: 마크다운 특수 문자를 이스케이프 처리 */}\n                        {message.content\n                          .replace(/^# (.*)/gm, '**$1**') // # 헤더를 볼드로\n                          .replace(/^## (.*)/gm, '**$1**') // ## 헤더를 볼드로 \n                          .replace(/^### (.*)/gm, '**$1**') // ### 헤더를 볼드로\n                        }\n                      </>\n                    )}\n                    {message.role === 'user' && message.content}\n                  </div>\n                ))}\n                {isAiTyping && (\n                  <div className={`${STATS_STYLES.chatMessage} ${STATS_STYLES.aiMessage}`}>\n                    <div className={STATS_STYLES.loadingDots}>\n                      <span className={`${STATS_STYLES.loadingDot} animate-pulse`}></span>\n                      <span className={`${STATS_STYLES.loadingDot} animate-pulse delay-150`}></span>\n                      <span className={`${STATS_STYLES.loadingDot} animate-pulse delay-300`}></span>\n                    </div>\n                  </div>\n                )}\n                <div ref={chatEndRef} />\n              </>\n            )}\n          </div>\n\n          <div className={STATS_STYLES.chatInputContainer}>\n            <input\n              type=\"text\"\n              value={userInput}\n              onChange={(e) => setUserInput(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && !e.shiftKey && handleChatSubmit()}\n              placeholder=\"메시지 보내기...\"\n              className={STATS_STYLES.chatInput}\n              disabled={isAiTyping}\n            />\n            <button\n              className={STATS_STYLES.chatSendButton}\n              onClick={() => handleChatSubmit()}\n              disabled={isAiTyping || !userInput.trim()}\n            >\n              <Send className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3065, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/components/ProjectHeader.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  ChevronLeft,\n  Save,\n  Share2,\n  Download,\n  Trash2,\n  Sidebar,\n  Eye,\n  EyeOff,\n  MessageCircle,\n  Sun,\n  Moon,\n  Copy,\n  FileDown,\n  Maximize2,\n  Focus,\n  Sparkles,  // 🔥 AI 아이콘 추가\n  ExternalLink,  // 🔥 Google Docs 외부 링크\n  RefreshCw,     // 🔥 Google Docs 동기화\n  Cloud          // 🔥 Google Docs 클라우드 표시\n} from 'lucide-react';\nimport { Logger } from '../../../../shared/logger';\n\n// 🔥 프리컴파일된 스타일 (기가차드 원칙)\nconst PROJECT_HEADER_STYLES = {\n  header: 'flex items-center justify-between px-4 py-3 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 transition-colors duration-200',\n  headerLeft: 'flex items-center gap-3',\n  headerCenter: 'flex-1 max-w-md mx-auto',\n  headerRight: 'flex items-center gap-2 relative',\n\n  backButton: 'flex items-center gap-2 px-3 py-1.5 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors',\n  titleInput: 'border-none bg-transparent focus:outline-none focus:ring-0 text-lg font-medium w-full placeholder:text-gray-400 dark:placeholder:text-gray-500 text-gray-900 dark:text-gray-100',\n  iconButton: 'flex items-center justify-center w-9 h-9 rounded-lg transition-colors hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-600 dark:text-gray-400 relative group',\n  iconButtonActive: 'flex items-center justify-center w-9 h-9 rounded-lg bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 relative group',\n\n  // 🔥 툴팁 스타일 (완전히 보이도록 z-index 극대화)\n  tooltip: 'absolute top-full mt-3 left-1/2 transform -translate-x-1/2 px-3 py-2 bg-gray-900 dark:bg-gray-700 text-white text-xs rounded-md whitespace-nowrap opacity-0 group-hover:opacity-100 transition-all duration-200 pointer-events-none z-[9999] shadow-lg border border-gray-600',\n  tooltipWithShortcut: 'absolute top-full mt-3 left-1/2 transform -translate-x-1/2 px-3 py-2 bg-gray-900 dark:bg-gray-700 text-white text-xs rounded-md whitespace-nowrap opacity-0 group-hover:opacity-100 transition-all duration-200 pointer-events-none z-[9999] shadow-lg border border-gray-600',\n  shortcut: 'block text-gray-400 text-xs mt-1',\n\n  // 슬라이드바 스타일\n  slidebar: 'fixed top-0 right-0 h-full w-80 bg-white dark:bg-gray-900 border-l border-gray-200 dark:border-gray-700 shadow-xl transform transition-transform duration-300 ease-in-out z-40',\n  slidebarOpen: 'translate-x-0',\n  slidebarClosed: 'translate-x-full',\n  slidebarHeader: 'flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700',\n  slidebarTitle: 'text-lg font-semibold text-gray-900 dark:text-gray-100',\n  slidebarContent: 'p-4 overflow-y-auto h-full',\n  slidebarOverlay: 'fixed inset-0 bg-black/50 z-30',\n} as const;\n\n// 🔥 HeaderAction 타입 정의\ninterface HeaderAction {\n  icon: React.ComponentType<{ size?: number }>;\n  label: string;\n  shortcut?: string;\n  onClick: () => void;\n  isActive?: boolean;\n}\n\n// 슬라이드바 타입 (테마 제거)\ntype SlidebarType = null;\n\ninterface ProjectHeaderProps {\n  title: string;\n  onTitleChange: (title: string) => void;\n  onBack: () => void;\n\n  // 🔥 사이드바 컨트롤\n  sidebarCollapsed: boolean;\n  onToggleSidebar: () => void;\n\n  // 🔥 AI 창작 파트너 사이드바 컨트롤\n  showRightSidebar?: boolean;\n  onToggleAISidebar?: () => void;\n\n  // 🔥 포커스 모드 컨트롤\n  isFocusMode: boolean;\n  onToggleFocusMode: () => void;\n\n  // 🔥 프로젝트 액션들\n  onSave: () => void;\n  onShare: () => void;\n  onDownload: () => void;\n  onDelete: () => void;\n\n  // 🔥 Google Docs 연동 관련\n  isGoogleDocsProject?: boolean;\n  googleDocMeta?: {\n    googleDocId?: string;\n    googleDocUrl?: string;\n    originalDescription?: string;\n    isGoogleDocsProject?: boolean;\n  } | null;\n  isSyncingWithGoogle?: boolean;\n  onSyncWithGoogle?: () => void;\n  onOpenGoogleDocs?: () => void;\n}\n\nexport function ProjectHeader({\n  title,\n  onTitleChange,\n  onBack,\n  sidebarCollapsed,\n  onToggleSidebar,\n  showRightSidebar = false,\n  onToggleAISidebar,\n  isFocusMode,\n  onToggleFocusMode,\n  onSave,\n  onShare,\n  onDownload,\n  onDelete,\n  // 🔥 Google Docs 관련 props\n  isGoogleDocsProject = false,\n  googleDocMeta = null,\n  isSyncingWithGoogle = false,\n  onSyncWithGoogle,\n  onOpenGoogleDocs\n}: ProjectHeaderProps): React.ReactElement {\n\n  const [activeSlideBar, setActiveSlideBar] = useState<SlidebarType>(null);\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(\n    document.documentElement.classList.contains('dark')\n  );\n\n  // 🔥 슬라이드바 토글 함수\n  const toggleSlideBar = (type: SlidebarType): void => {\n    setActiveSlideBar(activeSlideBar === type ? null : type);\n  };\n\n  // 🔥 테마 원클릭 토글\n  const toggleTheme = (): void => {\n    const newDarkMode = !isDarkMode;\n    setIsDarkMode(newDarkMode);\n\n    if (newDarkMode) {\n      document.documentElement.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    }\n\n    Logger.info('PROJECT_HEADER', `Theme changed to ${newDarkMode ? 'dark' : 'light'}`);\n  };\n\n  // 🔥 에디터 내용 복사 (QA 가이드: 에디터 내용 복사 구현)\n  const copyContent = async (): Promise<void> => {\n    try {\n      // 에디터에서 텍스트 내용 가져오기 위한 이벤트 발생\n      const copyEvent = new CustomEvent('project:copyContent', {\n        detail: {\n          callback: async (content: string) => {\n            try {\n              await navigator.clipboard.writeText(content);\n              Logger.info('PROJECT_HEADER', 'Editor content copied to clipboard', {\n                length: content.length\n              });\n            } catch (error) {\n              Logger.error('PROJECT_HEADER', 'Failed to copy content', error);\n            }\n          }\n        }\n      });\n      window.dispatchEvent(copyEvent);\n\n      Logger.info('PROJECT_HEADER', 'Copy content event dispatched');\n    } catch (error) {\n      Logger.error('PROJECT_HEADER', 'Failed to copy content', error);\n    }\n  };\n\n  // 🔥 집중모드 토글 (에디터만 표시) - 통합된 단일 함수\n  const handleFocusMode = (): void => {\n    onToggleFocusMode(); // Props로 전달된 함수 사용\n    Logger.info('PROJECT_HEADER', 'Focus mode toggled');\n  };\n\n  // 🔥 헤더 액션 정의 (CRUD + 복사, 공유 개선)\n  const headerActions: HeaderAction[] = [\n    { icon: Save, label: '저장', shortcut: 'Cmd+S', onClick: onSave },\n    { icon: Copy, label: '복사', shortcut: 'Cmd+C', onClick: copyContent },\n    { icon: Share2, label: '공유', shortcut: 'Cmd+Shift+S', onClick: onShare },\n    { icon: FileDown, label: '내보내기', shortcut: 'Cmd+E', onClick: onDownload },\n    // 🔥 Google Docs 관련 액션들 (Google Docs 프로젝트인 경우에만)\n    ...(isGoogleDocsProject ? [\n      {\n        icon: isSyncingWithGoogle ? RefreshCw : Cloud,\n        label: isSyncingWithGoogle ? '동기화 중...' : 'Google Docs와 동기화',\n        onClick: onSyncWithGoogle || (() => { }),\n        isActive: isSyncingWithGoogle\n      },\n      {\n        icon: ExternalLink,\n        label: 'Google Docs에서 열기',\n        onClick: onOpenGoogleDocs || (() => { })\n      }\n    ] : []),\n    { icon: Trash2, label: '삭제', shortcut: 'Cmd+Del', onClick: onDelete },\n  ];\n\n  // 🔥 툴바 확장 액션들 (테마 원클릭, 집중모드, 복사)\n  const toolbarActions: HeaderAction[] = [\n    { icon: Copy, label: '콘텐츠 복사', shortcut: 'Cmd+C', onClick: copyContent },\n    { icon: Maximize2, label: '집중모드', shortcut: 'ESC로 해제', onClick: handleFocusMode },\n    {\n      icon: isDarkMode ? Sun : Moon,\n      label: isDarkMode ? '라이트 모드로 변경' : '다크 모드로 변경',\n      onClick: toggleTheme\n    },\n  ];\n\n  // 🔥 ESC 키 이벤트 리스너 (슬라이드바 우선 닫기)\n  useEffect(() => {\n    const handleGlobalEscape = (event: CustomEvent): void => {\n      if (activeSlideBar) {\n        setActiveSlideBar(null);\n        event.preventDefault(); // 이벤트 처리됨을 표시\n        Logger.info('PROJECT_HEADER', 'Sidebar closed by ESC key');\n      }\n    };\n\n    window.addEventListener('global:escape', handleGlobalEscape as EventListener);\n    return () => window.removeEventListener('global:escape', handleGlobalEscape as EventListener);\n  }, [activeSlideBar]);\n\n  return (\n    <>\n      <div className={PROJECT_HEADER_STYLES.header}>\n        {/* 🔥 왼쪽: 뒤로가기 + 네비게이션 */}\n        <div className={PROJECT_HEADER_STYLES.headerLeft}>\n          <button\n            className={PROJECT_HEADER_STYLES.backButton}\n            onClick={onBack}\n          >\n            <ChevronLeft size={16} />\n            <span>프로젝트 목록</span>\n          </button>\n        </div>\n\n        {/* 🔥 중앙: 프로젝트 제목 */}\n        <div className={PROJECT_HEADER_STYLES.headerCenter}>\n          <div className=\"flex items-center gap-2 w-full\">\n            {/* 🔥 Google Docs 표시 배지 */}\n            {isGoogleDocsProject && (\n              <div className=\"flex items-center gap-1 px-2 py-1 bg-yellow-100 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-400 rounded-md text-xs font-medium\">\n                <Cloud size={12} />\n                <span>Google Docs</span>\n              </div>\n            )}\n            <input\n              type=\"text\"\n              value={title}\n              onChange={(e) => onTitleChange(e.target.value)}\n              placeholder=\"프로젝트 제목을 입력하세요\"\n              className={PROJECT_HEADER_STYLES.titleInput}\n            />\n          </div>\n        </div>\n\n        {/* 🔥 오른쪽: 액션 버튼들 */}\n        <div className={PROJECT_HEADER_STYLES.headerRight}>\n          {/* 프로젝트 액션들 */}\n          {headerActions.map((action, index) => (\n            <button\n              key={`action-${index}`}\n              className={`${PROJECT_HEADER_STYLES.iconButton} group relative`}\n              onClick={action.onClick}\n            >\n              <action.icon size={16} />\n              {/* 🔥 Context7 패턴: 올바른 툴팁 구현 */}\n              <div className=\"absolute -bottom-16 left-1/2 transform -translate-x-1/2 px-3 py-2 bg-gray-900 dark:bg-gray-700 text-white text-xs rounded whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-50\">\n                <div>{action.label}</div>\n                {action.shortcut && <div className=\"text-gray-400 text-xs mt-1\">{action.shortcut}</div>}\n              </div>\n            </button>\n          ))}\n\n          {/* 구분선 */}\n          <div className=\"w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1\" />\n\n          {/* 툴바 확장 액션들 */}\n          {toolbarActions.map((action, index) => (\n            <button\n              key={`toolbar-${index}`}\n              className={`${action.isActive ? PROJECT_HEADER_STYLES.iconButtonActive : PROJECT_HEADER_STYLES.iconButton} group relative`}\n              onClick={action.onClick}\n            >\n              <action.icon size={16} />\n              {/* 🔥 Context7 패턴: 올바른 툴팁 구현 */}\n              <div className=\"absolute -top-10 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-gray-900 dark:bg-gray-700 text-white text-xs rounded whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-50\">\n                {action.label}\n              </div>\n            </button>\n          ))}\n\n          {/* 구분선 */}\n          <div className=\"w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1\" />\n\n          {/* 🔥 AI 창작 파트너 토글 */}\n          {onToggleAISidebar && (\n            <button\n              className={`${showRightSidebar ? PROJECT_HEADER_STYLES.iconButtonActive : PROJECT_HEADER_STYLES.iconButton} group relative`}\n              onClick={onToggleAISidebar}\n            >\n              <Sparkles size={16} />\n              {/* 🔥 Context7 패턴: 올바른 툴팁 구현 */}\n              <div className=\"absolute -top-12 left-1/2 transform -translate-x-1/2 px-3 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white text-xs rounded whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-50 shadow-lg\">\n                <div>✨ 창작 파트너</div>\n                <div className=\"text-blue-200 text-xs mt-1\">함께 써봐요</div>\n              </div>\n            </button>\n          )}\n\n          {/* UI 컨트롤들 */}\n          <button\n            className={`${sidebarCollapsed ? PROJECT_HEADER_STYLES.iconButton : PROJECT_HEADER_STYLES.iconButtonActive} group relative`}\n            onClick={onToggleSidebar}\n          >\n            <Sidebar size={16} />\n            {/* 🔥 Context7 패턴: 올바른 툴팁 구현 */}\n            <div className=\"absolute -top-10 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-gray-900 dark:bg-gray-700 text-white text-xs rounded whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-50\">\n              사이드바 토글\n            </div>\n          </button>\n        </div>\n      </div>\n\n      {/* 🔥 슬라이드바 오버레이 */}\n      {activeSlideBar && (\n        <div\n          className={PROJECT_HEADER_STYLES.slidebarOverlay}\n          onClick={() => setActiveSlideBar(null)}\n        />\n      )}\n    </>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3508, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/components/EditorTabBar.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useRef, useCallback, memo } from 'react';\nimport { X, Plus } from 'lucide-react';\nimport { EditorTab } from '../../../../shared/editor';\nimport { Logger } from '../../../../shared/logger';\n\ninterface EditorTabBarProps {\n    tabs: EditorTab[];\n    activeTabId: string;\n    onTabClick: (tabId: string) => void;\n    onTabClose: (tabId: string) => void;\n    onNewTab: () => void;\n    onTabReorder?: (fromIndex: number, toIndex: number) => void;\n}\n\ninterface ContextMenuState {\n    isOpen: boolean;\n    x: number;\n    y: number;\n    tabId: string | null;\n}\n\nconst TAB_STYLES = {\n    container: 'flex items-center bg-gray-100 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 relative',\n    tabsWrapper: 'flex-1 flex overflow-x-auto scrollbar-hide',\n    tab: 'flex items-center gap-2 px-4 py-2 text-sm border-r border-gray-200 dark:border-gray-700 cursor-pointer select-none transition-all duration-150 min-w-[120px] max-w-[200px] group relative',\n    activeTab: 'bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100',\n    inactiveTab: 'bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-750',\n    dragOver: 'bg-blue-100 dark:bg-blue-900 border-blue-300 dark:border-blue-600',\n    tabIcon: 'text-xs',\n    tabTitle: 'flex-1 truncate font-medium',\n    closeButton: 'opacity-0 group-hover:opacity-100 hover:bg-gray-200 dark:hover:bg-gray-600 rounded p-1 transition-all duration-150',\n    closeButtonVisible: 'opacity-100',\n    newTabButton: 'px-3 py-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-150',\n    contextMenu: 'absolute bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg py-1 z-50 min-w-[180px]',\n    contextMenuItem: 'px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer flex items-center gap-2',\n    contextMenuSeparator: 'border-t border-gray-200 dark:border-gray-600 my-1',\n} as const;\n\nexport const EditorTabBar = memo(function EditorTabBar({\n    tabs,\n    activeTabId,\n    onTabClick,\n    onTabClose,\n    onNewTab,\n    onTabReorder,\n}: EditorTabBarProps): React.ReactElement {\n    const [draggedTabId, setDraggedTabId] = useState<string | null>(null);\n    const [dragOverTabId, setDragOverTabId] = useState<string | null>(null);\n    const [contextMenu, setContextMenu] = useState<ContextMenuState>({\n        isOpen: false,\n        x: 0,\n        y: 0,\n        tabId: null,\n    });\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    // 🔥 드래그 앤 드롭 핸들러들\n    const handleDragStart = useCallback((e: React.DragEvent, tabId: string) => {\n        setDraggedTabId(tabId);\n        e.dataTransfer.effectAllowed = 'move';\n        e.dataTransfer.setData('text/plain', tabId);\n\n        // 드래그 중 스타일링을 위한 투명도 설정\n        const target = e.currentTarget as HTMLElement;\n        target.style.opacity = '0.5';\n\n        Logger.debug('TAB_BAR', 'Drag started', { tabId });\n    }, []);\n\n    const handleDragEnd = useCallback((e: React.DragEvent) => {\n        const target = e.currentTarget as HTMLElement;\n        target.style.opacity = '1';\n        setDraggedTabId(null);\n        setDragOverTabId(null);\n\n        Logger.debug('TAB_BAR', 'Drag ended');\n    }, []);\n\n    const handleDragOver = useCallback((e: React.DragEvent, tabId: string) => {\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'move';\n\n        if (draggedTabId && draggedTabId !== tabId) {\n            setDragOverTabId(tabId);\n        }\n    }, [draggedTabId]);\n\n    const handleDragLeave = useCallback(() => {\n        setDragOverTabId(null);\n    }, []);\n\n    const handleDrop = useCallback((e: React.DragEvent, targetTabId: string) => {\n        e.preventDefault();\n\n        if (!draggedTabId || draggedTabId === targetTabId) return;\n\n        const fromIndex = tabs.findIndex(tab => tab.id === draggedTabId);\n        const toIndex = tabs.findIndex(tab => tab.id === targetTabId);\n\n        if (fromIndex !== -1 && toIndex !== -1 && onTabReorder) {\n            onTabReorder(fromIndex, toIndex);\n            Logger.info('TAB_BAR', 'Tab reordered', {\n                from: fromIndex,\n                to: toIndex,\n                draggedTabId,\n                targetTabId\n            });\n        }\n\n        setDraggedTabId(null);\n        setDragOverTabId(null);\n    }, [draggedTabId, tabs, onTabReorder]);\n\n    // 🔥 컨텍스트 메뉴 핸들러들\n    const handleContextMenu = useCallback((e: React.MouseEvent, tabId: string) => {\n        e.preventDefault();\n\n        const rect = containerRef.current?.getBoundingClientRect();\n        if (!rect) return;\n\n        setContextMenu({\n            isOpen: true,\n            x: e.clientX - rect.left,\n            y: e.clientY - rect.top,\n            tabId,\n        });\n\n        Logger.debug('TAB_BAR', 'Context menu opened', { tabId });\n    }, []);\n\n    const closeContextMenu = useCallback(() => {\n        setContextMenu({ isOpen: false, x: 0, y: 0, tabId: null });\n    }, []);\n\n    const handleCloseOtherTabs = useCallback(() => {\n        if (!contextMenu.tabId) return;\n\n        tabs.forEach(tab => {\n            if (tab.id !== contextMenu.tabId && tab.id !== 'main') {\n                onTabClose(tab.id);\n            }\n        });\n\n        closeContextMenu();\n        Logger.info('TAB_BAR', 'Closed other tabs', { keepTabId: contextMenu.tabId });\n    }, [contextMenu.tabId, tabs, onTabClose, closeContextMenu]);\n\n    const handleCloseTabsToRight = useCallback(() => {\n        if (!contextMenu.tabId) return;\n\n        const currentIndex = tabs.findIndex(tab => tab.id === contextMenu.tabId);\n        if (currentIndex === -1) return;\n\n        tabs.slice(currentIndex + 1).forEach(tab => {\n            if (tab.id !== 'main') {\n                onTabClose(tab.id);\n            }\n        });\n\n        closeContextMenu();\n        Logger.info('TAB_BAR', 'Closed tabs to right', { fromTabId: contextMenu.tabId });\n    }, [contextMenu.tabId, tabs, onTabClose, closeContextMenu]);\n\n    // 🔥 탭 닫기 핸들러\n    const handleTabCloseClick = useCallback((e: React.MouseEvent, tabId: string) => {\n        e.preventDefault();\n        e.stopPropagation();\n        onTabClose(tabId);\n    }, [onTabClose]);\n\n    // 🔥 탭 타입에 따른 아이콘 반환\n    const getTabIcon = useCallback((type: EditorTab['type']) => {\n        const iconMap: Record<EditorTab['type'], string> = {\n            main: '📝',\n            chapter: '📖'\n        };\n        return iconMap[type] || '📄';\n    }, []);\n\n    // 🔥 전역 클릭 시 컨텍스트 메뉴 닫기\n    React.useEffect(() => {\n        const handleGlobalClick = () => closeContextMenu();\n        if (contextMenu.isOpen) {\n            document.addEventListener('click', handleGlobalClick);\n            return () => document.removeEventListener('click', handleGlobalClick);\n        }\n    }, [contextMenu.isOpen, closeContextMenu]);\n\n    return (\n        <div ref={containerRef} className={TAB_STYLES.container}>\n            <div className={TAB_STYLES.tabsWrapper}>\n                {tabs.map((tab) => {\n                    const isActive = tab.id === activeTabId;\n                    const isDragOver = dragOverTabId === tab.id;\n                    const canClose = tab.id !== 'main'; // 메인 탭은 닫을 수 없음\n\n                    return (\n                        <div\n                            key={tab.id}\n                            draggable\n                            className={`\n                ${TAB_STYLES.tab}\n                ${isActive ? TAB_STYLES.activeTab : TAB_STYLES.inactiveTab}\n                ${isDragOver ? TAB_STYLES.dragOver : ''}\n              `}\n                            onClick={() => onTabClick(tab.id)}\n                            onContextMenu={(e) => handleContextMenu(e, tab.id)}\n                            onDragStart={(e) => handleDragStart(e, tab.id)}\n                            onDragEnd={handleDragEnd}\n                            onDragOver={(e) => handleDragOver(e, tab.id)}\n                            onDragLeave={handleDragLeave}\n                            onDrop={(e) => handleDrop(e, tab.id)}\n                            title={tab.title}\n                        >\n                            <span className={TAB_STYLES.tabIcon}>\n                                {getTabIcon(tab.type)}\n                            </span>\n\n                            <span className={TAB_STYLES.tabTitle}>\n                                {tab.title}\n                            </span>\n\n                            {tab.isDirty && (\n                                <span className=\"text-orange-500 text-xs\">●</span>\n                            )}\n\n                            {canClose && (\n                                <button\n                                    className={`\n                    ${TAB_STYLES.closeButton}\n                    ${isActive ? TAB_STYLES.closeButtonVisible : ''}\n                  `}\n                                    onClick={(e) => handleTabCloseClick(e, tab.id)}\n                                    title=\"탭 닫기\"\n                                >\n                                    <X size={12} />\n                                </button>\n                            )}\n                        </div>\n                    );\n                })}\n            </div>\n\n            <button\n                className={TAB_STYLES.newTabButton}\n                onClick={onNewTab}\n                title=\"새 챕터 추가\"\n            >\n                <Plus size={16} />\n            </button>\n\n            {/* 🔥 컨텍스트 메뉴 */}\n            {contextMenu.isOpen && (\n                <div\n                    className={TAB_STYLES.contextMenu}\n                    style={{\n                        left: contextMenu.x,\n                        top: contextMenu.y,\n                    }}\n                >\n                    <div\n                        className={TAB_STYLES.contextMenuItem}\n                        onClick={handleCloseOtherTabs}\n                    >\n                        다른 탭 모두 닫기\n                    </div>\n\n                    <div\n                        className={TAB_STYLES.contextMenuItem}\n                        onClick={handleCloseTabsToRight}\n                    >\n                        오른쪽 탭 모두 닫기\n                    </div>\n\n                    {contextMenu.tabId !== 'main' && (\n                        <>\n                            <div className={TAB_STYLES.contextMenuSeparator} />\n                            <div\n                                className={TAB_STYLES.contextMenuItem}\n                                onClick={() => {\n                                    if (contextMenu.tabId) {\n                                        onTabClose(contextMenu.tabId);\n                                    }\n                                    closeContextMenu();\n                                }}\n                            >\n                                이 탭 닫기\n                            </div>\n                        </>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3851, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/components/NewChapterModal.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { X } from 'lucide-react';\n\ninterface NewChapterModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    onConfirm: (title: string) => void;\n    defaultTitle?: string;\n}\n\nconst MODAL_STYLES = {\n    overlay: 'fixed inset-0 bg-black/50 flex items-center justify-center z-50',\n    modal: 'bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md mx-4',\n    header: 'flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700',\n    title: 'text-lg font-semibold text-gray-900 dark:text-gray-100',\n    closeButton: 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors',\n    content: 'p-6',\n    label: 'block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2',\n    input: 'w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-gray-100',\n    footer: 'flex justify-end gap-3 p-6 border-t border-gray-200 dark:border-gray-700',\n    cancelButton: 'px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md transition-colors',\n    confirmButton: 'px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed',\n} as const;\n\nexport function NewChapterModal({ isOpen, onClose, onConfirm, defaultTitle = '' }: NewChapterModalProps): React.ReactElement | null {\n    const [title, setTitle] = useState(defaultTitle);\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        if (isOpen) {\n            setTitle(defaultTitle);\n            // 모달이 열릴 때 입력 필드에 포커스\n            setTimeout(() => {\n                inputRef.current?.focus();\n                inputRef.current?.select();\n            }, 100);\n        }\n    }, [isOpen, defaultTitle]);\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        if (title.trim()) {\n            onConfirm(title.trim());\n            onClose();\n        }\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent) => {\n        if (e.key === 'Escape') {\n            onClose();\n        }\n    };\n\n    if (!isOpen) return null;\n\n    return (\n        <div className={MODAL_STYLES.overlay} onClick={onClose}>\n            <div\n                className={MODAL_STYLES.modal}\n                onClick={(e) => e.stopPropagation()}\n                onKeyDown={handleKeyDown}\n            >\n                <div className={MODAL_STYLES.header}>\n                    <h2 className={MODAL_STYLES.title}>새 챕터 만들기</h2>\n                    <button\n                        onClick={onClose}\n                        className={MODAL_STYLES.closeButton}\n                        type=\"button\"\n                    >\n                        <X size={20} />\n                    </button>\n                </div>\n\n                <form onSubmit={handleSubmit}>\n                    <div className={MODAL_STYLES.content}>\n                        <label htmlFor=\"chapter-title\" className={MODAL_STYLES.label}>\n                            챕터 제목\n                        </label>\n                        <input\n                            ref={inputRef}\n                            id=\"chapter-title\"\n                            type=\"text\"\n                            value={title}\n                            onChange={(e) => setTitle(e.target.value)}\n                            className={MODAL_STYLES.input}\n                            placeholder=\"새로운 챕터\"\n                            required\n                        />\n                    </div>\n\n                    <div className={MODAL_STYLES.footer}>\n                        <button\n                            type=\"button\"\n                            onClick={onClose}\n                            className={MODAL_STYLES.cancelButton}\n                        >\n                            취소\n                        </button>\n                        <button\n                            type=\"submit\"\n                            disabled={!title.trim()}\n                            className={MODAL_STYLES.confirmButton}\n                        >\n                            생성\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAYA,MAAM,eAAe;IACjB,SAAS;IACT,OAAO;IACP,QAAQ;IACR,OAAO;IACP,aAAa;IACb,SAAS;IACT,OAAO;IACP,OAAO;IACP,QAAQ;IACR,cAAc;IACd,eAAe;AACnB;AAEO,SAAS,gBAAgB,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,EAAwB;IACnG,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAoB;IAE1C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,IAAI,QAAQ;YACR,SAAS;YACT,sBAAsB;YACtB,WAAW;gBACP,SAAS,OAAO,EAAE;gBAClB,SAAS,OAAO,EAAE;YACtB,GAAG;QACP;IACJ,GAAG;QAAC;QAAQ;KAAa;IAEzB,MAAM,eAAe,CAAC;QAClB,EAAE,cAAc;QAChB,IAAI,MAAM,IAAI,IAAI;YACd,UAAU,MAAM,IAAI;YACpB;QACJ;IACJ;IAEA,MAAM,gBAAgB,CAAC;QACnB,IAAI,EAAE,GAAG,KAAK,UAAU;YACpB;QACJ;IACJ;IAEA,IAAI,CAAC,QAAQ,OAAO;IAEpB,qBACI,8OAAC;QAAI,WAAW,aAAa,OAAO;QAAE,SAAS;kBAC3C,cAAA,8OAAC;YACG,WAAW,aAAa,KAAK;YAC7B,SAAS,CAAC,IAAM,EAAE,eAAe;YACjC,WAAW;;8BAEX,8OAAC;oBAAI,WAAW,aAAa,MAAM;;sCAC/B,8OAAC;4BAAG,WAAW,aAAa,KAAK;sCAAE;;;;;;sCACnC,8OAAC;4BACG,SAAS;4BACT,WAAW,aAAa,WAAW;4BACnC,MAAK;sCAEL,cAAA,8OAAC,4LAAA,CAAA,IAAC;gCAAC,MAAM;;;;;;;;;;;;;;;;;8BAIjB,8OAAC;oBAAK,UAAU;;sCACZ,8OAAC;4BAAI,WAAW,aAAa,OAAO;;8CAChC,8OAAC;oCAAM,SAAQ;oCAAgB,WAAW,aAAa,KAAK;8CAAE;;;;;;8CAG9D,8OAAC;oCACG,KAAK;oCACL,IAAG;oCACH,MAAK;oCACL,OAAO;oCACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;oCACxC,WAAW,aAAa,KAAK;oCAC7B,aAAY;oCACZ,QAAQ;;;;;;;;;;;;sCAIhB,8OAAC;4BAAI,WAAW,aAAa,MAAM;;8CAC/B,8OAAC;oCACG,MAAK;oCACL,SAAS;oCACT,WAAW,aAAa,YAAY;8CACvC;;;;;;8CAGD,8OAAC;oCACG,MAAK;oCACL,UAAU,CAAC,MAAM,IAAI;oCACrB,WAAW,aAAa,aAAa;8CACxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQzB","debugId":null}},
    {"offset": {"line": 4032, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/components/ConfirmDeleteDialog.tsx"],"sourcesContent":["'use client';\n\n// 삭제 다이어로그 \n\nimport React, { useState } from 'react';\nimport { X as XIcon, AlertTriangle } from 'lucide-react';\n\n// 🔥 프리컴파일된 스타일 (11원칙 준수)\nconst CONFIRM_DIALOG_STYLES = {\n  overlay: 'fixed inset-0 z-[100] flex items-center justify-center bg-black bg-opacity-50',\n  dialog: 'bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-md w-full mx-4 overflow-hidden',\n  header: 'flex items-center gap-3 p-6 border-b border-slate-200 dark:border-slate-700',\n  icon: 'w-8 h-8 text-red-500 flex-shrink-0',\n  headerText: 'flex-1',\n  title: 'text-lg font-bold text-slate-900 dark:text-slate-100',\n  message: 'text-sm text-slate-600 dark:text-slate-400 mt-1',\n  closeButton: 'w-8 h-8 flex items-center justify-center rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors',\n  content: 'p-6',\n  description: 'text-slate-700 dark:text-slate-300 leading-relaxed mb-4',\n  projectName: 'font-semibold text-slate-900 dark:text-slate-100',\n  warning: 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-3 text-sm text-red-800 dark:text-red-200',\n  footer: 'flex items-center justify-end gap-3 p-6 border-t border-slate-200 dark:border-slate-700',\n  cancelButton: 'px-4 py-2 text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-lg transition-colors',\n  deleteButton: 'px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors font-medium',\n} as const;\n\ninterface ConfirmDeleteDialogProps {\n  isOpen: boolean;\n  projectTitle: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n}\n\nexport function ConfirmDeleteDialog({ isOpen, projectTitle, onConfirm, onCancel }: ConfirmDeleteDialogProps): React.ReactElement | null {\n  if (!isOpen) return null;\n\n  const handleOverlayClick = (event: React.MouseEvent): void => {\n    if (event.target === event.currentTarget) {\n      onCancel();\n    }\n  };\n\n  const handleEscapeKey = (event: React.KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      onCancel();\n    }\n  };\n\n  return (\n    <div \n      className={CONFIRM_DIALOG_STYLES.overlay} \n      onClick={handleOverlayClick}\n      onKeyDown={handleEscapeKey}\n      tabIndex={-1}\n    >\n      <div className={CONFIRM_DIALOG_STYLES.dialog}>\n        {/* 🔥 헤더 */}\n        <div className={CONFIRM_DIALOG_STYLES.header}>\n          <AlertTriangle className={CONFIRM_DIALOG_STYLES.icon} />\n          <div className={CONFIRM_DIALOG_STYLES.headerText}>\n            <h3 className={CONFIRM_DIALOG_STYLES.title}>프로젝트 삭제</h3>\n            <p className={CONFIRM_DIALOG_STYLES.message}>이 작업은 되돌릴 수 없습니다</p>\n          </div>\n          <button\n            className={CONFIRM_DIALOG_STYLES.closeButton}\n            onClick={onCancel}\n            aria-label=\"닫기\"\n          >\n            <XIcon size={20} />\n          </button>\n        </div>\n\n        {/* 🔥 내용 */}\n        <div className={CONFIRM_DIALOG_STYLES.content}>\n          <p className={CONFIRM_DIALOG_STYLES.description}>\n            <span className={CONFIRM_DIALOG_STYLES.projectName}>&ldquo;{projectTitle}&rdquo;</span> 프로젝트를 \n            완전히 삭제하시겠습니까?\n          </p>\n          \n          <div className={CONFIRM_DIALOG_STYLES.warning}>\n            ⚠️ <strong>주의:</strong> 삭제된 프로젝트와 모든 데이터(캐릭터, 구조, 메모 등)는 복구할 수 없습니다.\n          </div>\n        </div>\n\n        {/* 🔥 푸터 */}\n        <div className={CONFIRM_DIALOG_STYLES.footer}>\n          <button\n            className={CONFIRM_DIALOG_STYLES.cancelButton}\n            onClick={onCancel}\n          >\n            취소\n          </button>\n          <button\n            className={CONFIRM_DIALOG_STYLES.deleteButton}\n            onClick={onConfirm}\n            autoFocus\n          >\n            삭제하기\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAKA;AAAA;AALA;;;AAOA,0BAA0B;AAC1B,MAAM,wBAAwB;IAC5B,SAAS;IACT,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,YAAY;IACZ,OAAO;IACP,SAAS;IACT,aAAa;IACb,SAAS;IACT,aAAa;IACb,aAAa;IACb,SAAS;IACT,QAAQ;IACR,cAAc;IACd,cAAc;AAChB;AASO,SAAS,oBAAoB,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,QAAQ,EAA4B;IACzG,IAAI,CAAC,QAAQ,OAAO;IAEpB,MAAM,qBAAqB,CAAC;QAC1B,IAAI,MAAM,MAAM,KAAK,MAAM,aAAa,EAAE;YACxC;QACF;IACF;IAEA,MAAM,kBAAkB,CAAC;QACvB,IAAI,MAAM,GAAG,KAAK,UAAU;YAC1B;QACF;IACF;IAEA,qBACE,8OAAC;QACC,WAAW,sBAAsB,OAAO;QACxC,SAAS;QACT,WAAW;QACX,UAAU,CAAC;kBAEX,cAAA,8OAAC;YAAI,WAAW,sBAAsB,MAAM;;8BAE1C,8OAAC;oBAAI,WAAW,sBAAsB,MAAM;;sCAC1C,8OAAC,wNAAA,CAAA,gBAAa;4BAAC,WAAW,sBAAsB,IAAI;;;;;;sCACpD,8OAAC;4BAAI,WAAW,sBAAsB,UAAU;;8CAC9C,8OAAC;oCAAG,WAAW,sBAAsB,KAAK;8CAAE;;;;;;8CAC5C,8OAAC;oCAAE,WAAW,sBAAsB,OAAO;8CAAE;;;;;;;;;;;;sCAE/C,8OAAC;4BACC,WAAW,sBAAsB,WAAW;4BAC5C,SAAS;4BACT,cAAW;sCAEX,cAAA,8OAAC,4LAAA,CAAA,IAAK;gCAAC,MAAM;;;;;;;;;;;;;;;;;8BAKjB,8OAAC;oBAAI,WAAW,sBAAsB,OAAO;;sCAC3C,8OAAC;4BAAE,WAAW,sBAAsB,WAAW;;8CAC7C,8OAAC;oCAAK,WAAW,sBAAsB,WAAW;;wCAAE;wCAAQ;wCAAa;;;;;;;gCAAc;;;;;;;sCAIzF,8OAAC;4BAAI,WAAW,sBAAsB,OAAO;;gCAAE;8CAC1C,8OAAC;8CAAO;;;;;;gCAAY;;;;;;;;;;;;;8BAK3B,8OAAC;oBAAI,WAAW,sBAAsB,MAAM;;sCAC1C,8OAAC;4BACC,WAAW,sBAAsB,YAAY;4BAC7C,SAAS;sCACV;;;;;;sCAGD,8OAAC;4BACC,WAAW,sBAAsB,YAAY;4BAC7C,SAAS;4BACT,SAAS;sCACV;;;;;;;;;;;;;;;;;;;;;;;AAOX","debugId":null}},
    {"offset": {"line": 4231, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/components/ShareDialog.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useCallback } from 'react';\nimport { X as XIcon, Share2, Copy, Check, Download, Mail } from 'lucide-react';\nimport { Logger } from '../../../../shared/logger';\n\n// 🔥 프리컴파일된 스타일 (11원칙 준수)\nconst SHARE_DIALOG_STYLES = {\n  overlay: 'fixed inset-0 z-[100] flex items-center justify-center bg-black bg-opacity-50',\n  dialog: 'bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-lg w-full mx-4 overflow-hidden',\n  header: 'flex items-center gap-3 p-6 border-b border-slate-200 dark:border-slate-700',\n  icon: 'w-8 h-8 text-blue-500 flex-shrink-0',\n  headerText: 'flex-1',\n  title: 'text-lg font-bold text-slate-900 dark:text-slate-100',\n  subtitle: 'text-sm text-slate-600 dark:text-slate-400 mt-1',\n  closeButton: 'w-8 h-8 flex items-center justify-center rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors',\n  content: 'p-6 space-y-4',\n  section: 'space-y-3',\n  sectionTitle: 'text-sm font-medium text-slate-900 dark:text-slate-100',\n  optionGrid: 'grid grid-cols-2 gap-3',\n  option: 'flex items-center gap-3 p-4 border border-slate-200 dark:border-slate-700 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-700/50 transition-colors cursor-pointer',\n  optionIcon: 'w-5 h-5 text-slate-600 dark:text-slate-400',\n  optionText: 'text-sm text-slate-700 dark:text-slate-300',\n  urlSection: 'space-y-2',\n  urlLabel: 'text-sm font-medium text-slate-900 dark:text-slate-100',\n  urlContainer: 'flex items-center gap-2',\n  urlInput: 'flex-1 px-3 py-2 bg-slate-50 dark:bg-slate-700 border border-slate-200 dark:border-slate-600 rounded-lg text-sm text-slate-900 dark:text-slate-100 font-mono',\n  copyButton: 'px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors text-sm font-medium flex items-center gap-2',\n  copiedButton: 'px-3 py-2 bg-green-600 text-white rounded-lg text-sm font-medium flex items-center gap-2',\n  footer: 'p-6 border-t border-slate-200 dark:border-slate-700 text-xs text-slate-500 dark:text-slate-400',\n} as const;\n\ninterface ShareDialogProps {\n  isOpen: boolean;\n  projectTitle: string;\n  projectId: string;\n  onClose: () => void;\n}\n\nexport function ShareDialog({ isOpen, projectTitle, projectId, onClose }: ShareDialogProps): React.ReactElement | null {\n  const [copiedUrl, setCopiedUrl] = useState<boolean>(false);\n\n  // 🔥 임시 공유 URL (실제로는 서버에서 생성)\n  const shareUrl = `https://loop-writer.app/shared/${projectId}`;\n\n  const handleOverlayClick = (event: React.MouseEvent): void => {\n    if (event.target === event.currentTarget) {\n      onClose();\n    }\n  };\n\n  const handleEscapeKey = (event: React.KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleCopyUrl = useCallback(async (): Promise<void> => {\n    try {\n      await navigator.clipboard.writeText(shareUrl);\n      setCopiedUrl(true);\n      Logger.info('SHARE_DIALOG', 'URL copied to clipboard');\n      \n      // 3초 후 상태 리셋\n      setTimeout(() => setCopiedUrl(false), 3000);\n    } catch (error) {\n      Logger.error('SHARE_DIALOG', 'Failed to copy URL', error);\n    }\n  }, [shareUrl]);\n\n  const handleExportText = useCallback((): void => {\n    // 🔥 텍스트 파일로 내보내기 (실제 구현 필요)\n    Logger.info('SHARE_DIALOG', 'Export as text requested');\n    // TODO: 실제 내보내기 구현\n  }, []);\n\n  const handleExportPdf = useCallback((): void => {\n    // 🔥 PDF로 내보내기 (실제 구현 필요)\n    Logger.info('SHARE_DIALOG', 'Export as PDF requested');\n    // TODO: 실제 PDF 내보내기 구현\n  }, []);\n\n  const handleSendEmail = useCallback((): void => {\n    // 🔥 이메일로 공유하기\n    const subject = encodeURIComponent(`Loop 프로젝트: ${projectTitle}`);\n    const body = encodeURIComponent(`안녕하세요,\\n\\n\"${projectTitle}\" 프로젝트를 공유합니다.\\n\\n${shareUrl}\\n\\nLoop Writer에서 확인해보세요!`);\n    const mailtoUrl = `mailto:?subject=${subject}&body=${body}`;\n    \n    window.open(mailtoUrl, '_blank');\n    Logger.info('SHARE_DIALOG', 'Email sharing opened');\n  }, [projectTitle, shareUrl]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div \n      className={SHARE_DIALOG_STYLES.overlay} \n      onClick={handleOverlayClick}\n      onKeyDown={handleEscapeKey}\n      tabIndex={-1}\n    >\n      <div className={SHARE_DIALOG_STYLES.dialog}>\n        {/* 🔥 헤더 */}\n        <div className={SHARE_DIALOG_STYLES.header}>\n          <Share2 className={SHARE_DIALOG_STYLES.icon} />\n          <div className={SHARE_DIALOG_STYLES.headerText}>\n            <h3 className={SHARE_DIALOG_STYLES.title}>프로젝트 공유</h3>\n            <p className={SHARE_DIALOG_STYLES.subtitle}>&ldquo;{projectTitle}&rdquo; 작품 공유하기</p>\n          </div>\n          <button\n            className={SHARE_DIALOG_STYLES.closeButton}\n            onClick={onClose}\n            aria-label=\"닫기\"\n          >\n            <XIcon size={20} />\n          </button>\n        </div>\n\n        {/* 🔥 내용 */}\n        <div className={SHARE_DIALOG_STYLES.content}>\n          {/* 🔥 링크 공유 */}\n          <div className={SHARE_DIALOG_STYLES.section}>\n            <h4 className={SHARE_DIALOG_STYLES.sectionTitle}>링크로 공유</h4>\n            <div className={SHARE_DIALOG_STYLES.urlContainer}>\n              <input\n                type=\"text\"\n                value={shareUrl}\n                readOnly\n                className={SHARE_DIALOG_STYLES.urlInput}\n              />\n              <button\n                className={copiedUrl ? SHARE_DIALOG_STYLES.copiedButton : SHARE_DIALOG_STYLES.copyButton}\n                onClick={handleCopyUrl}\n                disabled={copiedUrl}\n              >\n                {copiedUrl ? (\n                  <>\n                    <Check size={16} />\n                    복사됨\n                  </>\n                ) : (\n                  <>\n                    <Copy size={16} />\n                    복사\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n\n          {/* 🔥 공유 옵션 */}\n          <div className={SHARE_DIALOG_STYLES.section}>\n            <h4 className={SHARE_DIALOG_STYLES.sectionTitle}>공유 방법</h4>\n            <div className={SHARE_DIALOG_STYLES.optionGrid}>\n              <button\n                className={SHARE_DIALOG_STYLES.option}\n                onClick={handleSendEmail}\n              >\n                <Mail className={SHARE_DIALOG_STYLES.optionIcon} />\n                <span className={SHARE_DIALOG_STYLES.optionText}>이메일</span>\n              </button>\n              \n              <button\n                className={SHARE_DIALOG_STYLES.option}\n                onClick={handleExportText}\n              >\n                <Download className={SHARE_DIALOG_STYLES.optionIcon} />\n                <span className={SHARE_DIALOG_STYLES.optionText}>텍스트 파일</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* 🔥 푸터 */}\n        <div className={SHARE_DIALOG_STYLES.footer}>\n          💡 공유된 프로젝트는 읽기 전용으로 제공됩니다. 원본 편집은 작성자만 가능합니다.\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4570, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/SlashCommands.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { Extension } from '@tiptap/core';\nimport { ReactRenderer } from '@tiptap/react';\nimport Suggestion from '@tiptap/suggestion';\nimport tippy from 'tippy.js';\nimport type { Range, Editor } from '@tiptap/core';\nimport type { Instance } from 'tippy.js';\nimport {\n  Hash,\n  List,\n  CheckSquare,\n  Quote,\n  Code,\n  Minus,\n  Type,\n  Heading1,\n  Heading2,\n  Heading3,\n  Lightbulb,\n  AlertTriangle,\n  X,\n  ChevronDown,\n  Highlighter\n} from 'lucide-react';\n\n// 🔥 ref 타입 정의\ninterface CommandMenuRef {\n  onKeyDown: ({ event }: { event: KeyboardEvent }) => boolean;\n}\n\n// 🔥 슬래시 명령어 정의\ntype EditorChain = {\n  focus: () => EditorChain;\n  deleteRange: (range: Range) => EditorChain;\n  setHeading: (opts: { level: 1 | 2 | 3 }) => EditorChain;\n  setParagraph: () => EditorChain;\n  toggleBulletList: () => EditorChain;\n  toggleOrderedList: () => EditorChain;\n  toggleList: (listType: string, itemType: string) => EditorChain;\n  insertContent: (content: unknown) => EditorChain;\n  setMark: (mark: string, attrs?: Record<string, unknown>) => EditorChain;\n  toggleBlockquote: () => EditorChain;\n  toggleCodeBlock: () => EditorChain;\n  setHorizontalRule: () => EditorChain;\n  run: () => boolean;\n};\n\ntype EditorLike = {\n  chain: () => EditorChain;\n};\n\ninterface SlashCommand {\n  title: string;\n  description: string;\n  icon: React.ComponentType<{ size?: number }>;\n  command: ({ editor, range }: { editor: EditorLike; range: Range }) => void;\n}\n\n// 🔥 명령어 목록 정의 (Notion 스타일)\nconst SLASH_COMMANDS: SlashCommand[] = [\n  {\n    title: '제목 1',\n    description: '큰 섹션 헤딩',\n    icon: Heading1,\n    command: ({ editor, range }) => {\n      editor.chain().focus().deleteRange(range).setHeading({ level: 1 }).run();\n    },\n  },\n  {\n    title: '제목 2',\n    description: '중간 섹션 헤딩',\n    icon: Heading2,\n    command: ({ editor, range }) => {\n      editor.chain().focus().deleteRange(range).setHeading({ level: 2 }).run();\n    },\n  },\n  {\n    title: '제목 3',\n    description: '작은 섹션 헤딩',\n    icon: Heading3,\n    command: ({ editor, range }) => {\n      editor.chain().focus().deleteRange(range).setHeading({ level: 3 }).run();\n    },\n  },\n  {\n    title: '본문',\n    description: '일반 텍스트로 시작',\n    icon: Type,\n    command: ({ editor, range }) => {\n      editor.chain().focus().deleteRange(range).setParagraph().run();\n    },\n  },\n  {\n    title: '불릿 리스트',\n    description: '간단한 불릿 목록',\n    icon: List,\n    command: ({ editor, range }) => {\n      editor.chain().focus().deleteRange(range).toggleBulletList().run();\n    },\n  },\n  {\n    title: '번호 리스트',\n    description: '번호가 매겨진 목록',\n    icon: Hash,\n    command: ({ editor, range }) => {\n      editor.chain().focus().deleteRange(range).toggleOrderedList().run();\n    },\n  },\n  {\n    title: '체크리스트',\n    description: '할 일 목록',\n    icon: CheckSquare,\n    command: ({ editor, range }) => {\n      editor.chain().focus().deleteRange(range).toggleList('taskList', 'taskItem').run();\n    },\n  },\n  {\n    title: '콜아웃 - 정보',\n    description: '💡 정보 강조',\n    icon: Lightbulb,\n    command: ({ editor, range }) => {\n      editor.chain()\n        .focus()\n        .deleteRange(range)\n        .insertContent({\n          type: 'callout',\n          attrs: { type: 'info', icon: '💡' },\n          content: [{ type: 'paragraph', content: [{ type: 'text', text: '정보를 입력하세요...' }] }],\n        })\n        .run();\n    },\n  },\n  {\n    title: '콜아웃 - 경고',\n    description: '⚠️ 경고 메시지',\n    icon: AlertTriangle,\n    command: ({ editor, range }) => {\n      editor.chain()\n        .focus()\n        .deleteRange(range)\n        .insertContent({\n          type: 'callout',\n          attrs: { type: 'warning', icon: '⚠️' },\n          content: [{ type: 'paragraph', content: [{ type: 'text', text: '경고 내용을 입력하세요...' }] }],\n        })\n        .run();\n    },\n  },\n  {\n    title: '콜아웃 - 에러',\n    description: '❌ 에러 메시지',\n    icon: X,\n    command: ({ editor, range }) => {\n      editor.chain()\n        .focus()\n        .deleteRange(range)\n        .insertContent({\n          type: 'callout',\n          attrs: { type: 'error', icon: '❌' },\n          content: [{ type: 'paragraph', content: [{ type: 'text', text: '에러 내용을 입력하세요...' }] }],\n        })\n        .run();\n    },\n  },\n  {\n    title: '토글',\n    description: '▼ 접을 수 있는 섹션',\n    icon: ChevronDown,\n    command: ({ editor, range }) => {\n      editor.chain()\n        .focus()\n        .deleteRange(range)\n        .insertContent({\n          type: 'toggle',\n          attrs: { open: false, summary: '토글 제목' },\n          content: [{ type: 'paragraph', content: [{ type: 'text', text: '토글 내용을 입력하세요...' }] }],\n        })\n        .run();\n    },\n  },\n  {\n    title: '하이라이트',\n    description: '🖍️ 텍스트 강조',\n    icon: Highlighter,\n    command: ({ editor, range }) => {\n      editor.chain()\n        .focus()\n        .deleteRange(range)\n        .insertContent('하이라이트할 텍스트')\n        .setMark('highlight', { color: 'yellow' })\n        .run();\n    },\n  },\n  {\n    title: '인용구',\n    description: '인용 텍스트',\n    icon: Quote,\n    command: ({ editor, range }) => {\n      editor.chain().focus().deleteRange(range).toggleBlockquote().run();\n    },\n  },\n  {\n    title: '코드 블록',\n    description: '코드 스니펫',\n    icon: Code,\n    command: ({ editor, range }) => {\n      editor.chain().focus().deleteRange(range).toggleCodeBlock().run();\n    },\n  },\n  {\n    title: '구분선',\n    description: '섹션 구분선',\n    icon: Minus,\n    command: ({ editor, range }) => {\n      editor.chain().focus().deleteRange(range).setHorizontalRule().run();\n    },\n  },\n];\n\n// 🔥 명령어 메뉴 컴포넌트\ninterface CommandMenuProps {\n  items: SlashCommand[];\n  command: (item: SlashCommand) => void;\n}\n\nconst CommandMenu = forwardRef<CommandMenuRef, CommandMenuProps>(({ items, command }, ref) => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n\n  useImperativeHandle(ref, () => ({\n    onKeyDown: ({ event }: { event: KeyboardEvent }) => {\n      if (event.key === 'ArrowUp') {\n        setSelectedIndex((selectedIndex + items.length - 1) % items.length);\n        return true;\n      }\n\n      if (event.key === 'ArrowDown') {\n        setSelectedIndex((selectedIndex + 1) % items.length);\n        return true;\n      }\n\n      if (event.key === 'Enter') {\n        selectItem(selectedIndex);\n        return true;\n      }\n\n      return false;\n    },\n  }));\n\n  useEffect(() => setSelectedIndex(0), [items]);\n\n  const selectItem = (index: number): void => {\n    const item = items[index];\n    if (item) {\n      command(item);\n    }\n  };\n\n  return (\n    <div className=\"z-50 w-72 p-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg max-h-80 overflow-auto\">\n      {items.length ? (\n        items.map((item, index) => (\n          <button\n            key={index}\n            className={`flex items-center gap-3 w-full px-3 py-2 text-left text-sm rounded-md transition-colors ${index === selectedIndex\n                ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-900 dark:text-blue-100'\n                : 'text-gray-900 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-700'\n              }`}\n            onClick={() => selectItem(index)}\n          >\n            <div className=\"w-4 h-4 flex items-center justify-center text-gray-500 dark:text-gray-400\">\n              <item.icon size={16} />\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"font-medium\">{item.title}</div>\n              <div className=\"text-xs text-gray-500 dark:text-gray-400\">{item.description}</div>\n            </div>\n          </button>\n        ))\n      ) : (\n        <div className=\"px-3 py-2 text-sm text-gray-500 dark:text-gray-400\">검색 결과가 없습니다</div>\n      )}\n    </div>\n  );\n});\n\nCommandMenu.displayName = 'CommandMenu';\n\n// 🔥 슬래시 명령어 확장\nexport const SlashCommand = Extension.create({\n  name: 'slashCommand',\n\n  addOptions() {\n    return {\n      suggestion: {\n        char: '/',\n        command: ({ editor, range, props }: { editor: Editor; range: Range; props: { command: (params: { editor: Editor; range: Range }) => void } }) => {\n          props.command({ editor, range });\n        },\n      },\n    };\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      Suggestion({\n        editor: this.editor,\n        ...this.options.suggestion,\n      }),\n    ];\n  },\n});\n\n// 🔥 슬래시 명령어 제안 설정\nexport const slashSuggestion = {\n  items: ({ query }: { query: string }) => {\n    return SLASH_COMMANDS.filter(item =>\n      item.title.toLowerCase().includes(query.toLowerCase()) ||\n      item.description.toLowerCase().includes(query.toLowerCase())\n    );\n  },\n\n  render: () => {\n    let component: ReactRenderer;\n    let popup: Instance[] = [];\n\n    return {\n      onStart: (props: { editor: Editor; clientRect?: () => DOMRect }) => {\n        component = new ReactRenderer(CommandMenu, {\n          props,\n          editor: props.editor,\n        });\n\n        if (!props.clientRect) {\n          return;\n        }\n\n        popup = tippy('body', {\n          getReferenceClientRect: props.clientRect,\n          appendTo: () => document.body,\n          content: component.element,\n          showOnCreate: true,\n          interactive: true,\n          trigger: 'manual',\n          placement: 'bottom-start',\n        });\n      },\n\n      onUpdate(props: { editor: Editor; clientRect?: () => DOMRect }) {\n        component.updateProps(props);\n\n        if (!props.clientRect) {\n          return;\n        }\n\n        const instance = Array.isArray(popup) ? popup[0] : undefined;\n        if (instance) {\n          instance.setProps({\n            getReferenceClientRect: props.clientRect,\n          });\n        }\n      },\n\n      onKeyDown(props: { event: KeyboardEvent }) {\n        if (props.event.key === 'Escape') {\n          const instance = Array.isArray(popup) ? popup[0] : undefined;\n          if (instance) instance.hide();\n          return true;\n        }\n\n        return (component.ref as CommandMenuRef)?.onKeyDown({ event: props.event });\n      },\n\n      onExit() {\n        const instance = Array.isArray(popup) ? popup[0] : undefined;\n        if (instance) instance.destroy();\n        component.destroy();\n      },\n    };\n  },\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4981, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/AdvancedNotionFeatures.ts"],"sourcesContent":["// 🔥 TipTap 에디터에 추가할 노션 기능들 (기본 기능만)\n// src/renderer/components/projects/editor/AdvancedNotionFeatures.ts\n\nimport { Node, Mark, mergeAttributes } from '@tiptap/core';\nimport type { Range } from '@tiptap/core';\nimport type { Node as ProseMirrorNode } from '@tiptap/pm/model';\n\ntype EditorChain = {\n  focus: () => EditorChain;\n  deleteRange: (range: Range) => EditorChain;\n  toggleList: (listType: string, itemType: string) => EditorChain;\n  toggleHeading: (opts: { level: 1 | 2 | 3 }) => EditorChain;\n  toggleOrderedList: () => EditorChain;\n  toggleBulletList: () => EditorChain;\n  toggleBlockquote: () => EditorChain;\n  toggleCodeBlock: () => EditorChain;\n  toggleHighlight: () => EditorChain;\n  setHighlight: (attrs: { color: string }) => EditorChain;\n  setCallout: (attrs: { type: string; icon: string }) => EditorChain;\n  setToggle: (attrs: { summary: string; open: boolean }) => EditorChain;\n  insertContent: (content: unknown) => EditorChain;\n  selectTextblockEnd: () => EditorChain;\n  run: () => boolean;\n};\n\ntype EditorLike = {\n  chain: () => EditorChain;\n};\n\n// 🔥 1. TaskList 확장 (기본 기능만)\nexport const TaskList = Node.create({\n  name: 'taskList',\n  group: 'block list',\n  content: 'taskItem+',\n  parseHTML() {\n    return [{ tag: 'ul[data-type=\"taskList\"]' }];\n  },\n  renderHTML({ HTMLAttributes }: { HTMLAttributes: Record<string, unknown> }) {\n    return ['ul', mergeAttributes(HTMLAttributes, { 'data-type': 'taskList', class: 'task-list' }), 0];\n  },\n});\n\n// 🔥 2. TaskItem 확장 (기본 기능만)\nexport const TaskItem = Node.create({\n  name: 'taskItem',\n  content: 'paragraph block*',\n  defining: true,\n  \n  addAttributes() {\n    return {\n      checked: {\n        default: false,\n        parseHTML: (element: HTMLElement) => element.getAttribute('data-checked') === 'true',\n        renderHTML: (attributes: { checked: boolean }) => ({ 'data-checked': attributes.checked }),\n      },\n    };\n  },\n  \n  parseHTML() {\n    return [{ tag: 'li[data-type=\"taskItem\"]' }];\n  },\n  \n  renderHTML({ node, HTMLAttributes }: { node: ProseMirrorNode; HTMLAttributes: Record<string, unknown> }) {\n    return [\n      'li',\n      mergeAttributes(HTMLAttributes, { \n        'data-type': 'taskItem',\n        'data-checked': (node.attrs as { checked?: boolean }).checked,\n        class: 'task-item' \n      }),\n      [\n        'label',\n        { class: 'task-checkbox-wrapper' },\n        [\n          'input',\n          {\n            type: 'checkbox',\n            checked: node.attrs.checked ? 'checked' : null,\n            class: 'task-checkbox',\n          },\n        ],\n        ['span', { class: 'task-content' }, 0],\n      ],\n    ];\n  },\n});\n\n// 🔥 3. 콜아웃 확장 (타입 안전)\nexport const Callout = Node.create({\n  name: 'callout',\n  group: 'block',\n  content: 'block+',\n  addAttributes() {\n    return {\n      type: {\n        default: 'info',\n        renderHTML: (attributes: { type: string }) => ({\n          'data-type': attributes.type,\n        }),\n      },\n      icon: {\n        default: '💡',\n        renderHTML: (attributes: { icon: string }) => ({\n          'data-icon': attributes.icon,\n        }),\n      },\n    };\n  },\n  parseHTML() {\n    return [{ tag: 'div[data-callout]' }];\n  },\n  renderHTML({ HTMLAttributes }: { HTMLAttributes: Record<string, unknown> }) {\n    return ['div', { 'data-callout': true, ...HTMLAttributes }, 0];\n  },\n});\n\n// 🔥 4. 토글 확장 (타입 안전)\nexport const Toggle = Node.create({\n  name: 'toggle',\n  group: 'block',\n  content: 'block+',\n  addAttributes() {\n    return {\n      open: {\n        default: false,\n        renderHTML: (attributes: { open: boolean }) => ({\n          'data-open': attributes.open,\n        }),\n      },\n      summary: {\n        default: '토글 제목',\n        renderHTML: (attributes: { summary: string }) => ({\n          'data-summary': attributes.summary,\n        }),\n      },\n    };\n  },\n  parseHTML() {\n    return [{ tag: 'details[data-toggle]' }];\n  },\n  renderHTML({ HTMLAttributes }: { HTMLAttributes: Record<string, unknown> }) {\n    return ['details', { 'data-toggle': true, ...HTMLAttributes }, \n      ['summary', {}, HTMLAttributes['data-summary'] || '토글 제목'],\n      ['div', { class: 'toggle-content' }, 0]\n    ];\n  },\n});\n\n// 🔥 5. 하이라이트 확장 (타입 안전)\nexport const Highlight = Mark.create({\n  name: 'highlight',\n  addAttributes() {\n    return {\n      color: {\n        default: 'yellow',\n        parseHTML: (element: HTMLElement) => element.getAttribute('data-color'),\n        renderHTML: (attributes: { color: string }) => {\n          if (!attributes.color) {\n            return {};\n          }\n          return {\n            'data-color': attributes.color,\n          };\n        },\n      },\n    };\n  },\n  parseHTML() {\n    return [{ tag: 'mark[data-highlight]' }];\n  },\n  renderHTML({ HTMLAttributes }: { HTMLAttributes: Record<string, unknown> }) {\n    return ['mark', { 'data-highlight': true, ...HTMLAttributes }, 0];\n  },\n});\n\n// 5. 확장된 슬래시 커맨드\nexport const extendedSlashCommands = [\n  {\n    title: '체크박스',\n    description: '☑️ 할 일 목록',\n    icon: '☑️',\n    searchTerms: ['checkbox', 'todo', 'task', '체크', '할일'],\n    command: ({ editor, range }: { editor: EditorLike; range: Range }) => {\n      editor.chain()\n        .focus()\n        .deleteRange(range)\n        .toggleList('taskList', 'taskItem')\n        .run();\n    },\n  },\n  {\n    title: '콜아웃 - 정보',\n    description: '💡 정보 강조',\n    icon: '💡',\n    searchTerms: ['callout', 'info', '콜아웃', '정보'],\n    command: ({ editor, range }: { editor: EditorLike; range: Range }) => {\n      editor.chain()\n        .focus()\n        .deleteRange(range)\n        .setCallout({ type: 'info', icon: '💡' })\n        .run();\n    },\n  },\n  {\n    title: '콜아웃 - 경고',\n    description: '⚠️ 경고 메시지',\n    icon: '⚠️',\n    searchTerms: ['warning', 'caution', '경고', '주의'],\n    command: ({ editor, range }: { editor: EditorLike; range: Range }) => {\n      editor.chain()\n        .focus()\n        .deleteRange(range)\n        .setCallout({ type: 'warning', icon: '⚠️' })\n        .run();\n    },\n  },\n  {\n    title: '콜아웃 - 에러',\n    description: '❌ 에러 메시지',\n    icon: '❌',\n    searchTerms: ['error', 'danger', '에러', '오류'],\n    command: ({ editor, range }: { editor: EditorLike; range: Range }) => {\n      editor.chain()\n        .focus()\n        .deleteRange(range)\n        .setCallout({ type: 'error', icon: '❌' })\n        .run();\n    },\n  },\n  {\n    title: '토글',\n    description: '▼ 접을 수 있는 섹션',\n    icon: '▼',\n    searchTerms: ['toggle', 'collapse', '토글', '접기'],\n    command: ({ editor, range }: { editor: EditorLike; range: Range }) => {\n      editor.chain()\n        .focus()\n        .deleteRange(range)\n        .setToggle({ summary: '토글 제목', open: false })\n        .run();\n    },\n  },\n  {\n    title: '하이라이트',\n    description: '🖍️ 텍스트 강조',\n    icon: '🖍️',\n    searchTerms: ['highlight', 'mark', '하이라이트', '강조'],\n    command: ({ editor, range }: { editor: EditorLike; range: Range }) => {\n      editor.chain()\n        .focus()\n        .deleteRange(range)\n        .insertContent('하이라이트 텍스트')\n        .selectTextblockEnd()\n        .setHighlight({ color: 'yellow' })\n        .run();\n    },\n  },\n  {\n    title: '수식',\n    description: '🔢 LaTeX 수식',\n    icon: '🔢',\n    searchTerms: ['math', 'latex', 'formula', '수식', '공식'],\n    command: ({ editor, range }: { editor: EditorLike; range: Range }) => {\n      editor.chain()\n        .focus()\n        .deleteRange(range)\n        .insertContent('$E = mc^2$')\n        .run();\n    },\n  },\n];\n\n// 6. 키보드 단축키 확장\nexport const extendedKeyboardShortcuts = [\n  {\n    key: 'Mod-Shift-1',\n    description: '제목 1',\n    command: ({ editor }: { editor: EditorLike }) => editor.chain().focus().toggleHeading({ level: 1 }).run(),\n  },\n  {\n    key: 'Mod-Shift-2',\n    description: '제목 2',\n    command: ({ editor }: { editor: EditorLike }) => editor.chain().focus().toggleHeading({ level: 2 }).run(),\n  },\n  {\n    key: 'Mod-Shift-3',\n    description: '제목 3',\n    command: ({ editor }: { editor: EditorLike }) => editor.chain().focus().toggleHeading({ level: 3 }).run(),\n  },\n  {\n    key: 'Mod-Shift-7',\n    description: '번호 리스트',\n    command: ({ editor }: { editor: EditorLike }) => editor.chain().focus().toggleOrderedList().run(),\n  },\n  {\n    key: 'Mod-Shift-8',\n    description: '불릿 리스트',\n    command: ({ editor }: { editor: EditorLike }) => editor.chain().focus().toggleBulletList().run(),\n  },\n  {\n    key: 'Mod-Shift-9',\n    description: '체크박스',\n    command: ({ editor }: { editor: EditorLike }) => editor.chain().focus().toggleList('taskList', 'taskItem').run(),\n  },\n  {\n    key: 'Mod-Shift-.',\n    description: '인용구',\n    command: ({ editor }: { editor: EditorLike }) => editor.chain().focus().toggleBlockquote().run(),\n  },\n  {\n    key: 'Mod-Alt-C',\n    description: '코드 블록',\n    command: ({ editor }: { editor: EditorLike }) => editor.chain().focus().toggleCodeBlock().run(),\n  },\n  {\n    key: 'Mod-Shift-H',\n    description: '하이라이트',\n    command: ({ editor }: { editor: EditorLike }) => editor.chain().focus().toggleHighlight().run(),\n  },\n];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5368, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/editor/MarkdownEditor.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { useEditor, EditorContent, BubbleMenu } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Placeholder from '@tiptap/extension-placeholder';\nimport Focus from '@tiptap/extension-focus';\nimport Typography from '@tiptap/extension-typography';\nimport CharacterCount from '@tiptap/extension-character-count';\nimport Underline from '@tiptap/extension-underline';\nimport Image from '@tiptap/extension-image';\nimport { SlashCommand, slashSuggestion } from './SlashCommands';\nimport { Bold, Italic, Underline as UnderlineIcon, Strikethrough, Code, Link, Quote, Palette, MoreHorizontal, ImageIcon, Copy, Clipboard } from 'lucide-react';\nimport { Logger } from '../../../../shared/logger';\nimport { handleEditorKeyDown, bindShortcutsToEditor, ALL_SHORTCUTS } from './EditorShortcuts';\nimport { TaskList, TaskItem, Callout, Toggle, Highlight } from './AdvancedNotionFeatures';\nimport './MarkdownEditor.css';\n\n// 🔥 작가 친화적 TipTap 에디터 스타일\nconst EDITOR_STYLES = {\n  container: 'w-full h-full flex flex-col',\n  editor: 'flex-1 p-6 prose max-w-none focus:outline-none text-gray-900 dark:text-gray-100',\n  focused: 'prose-lg', // 포커스 모드에서 더 큰 글자\n  placeholder: 'text-slate-400 pointer-events-none',\n  bubble: 'flex flex-nowrap gap-1 p-2 bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-lg shadow-lg z-50 overflow-visible whitespace-nowrap',\n  bubbleButton: 'px-2 py-1 text-sm bg-slate-100 hover:bg-slate-200 dark:bg-slate-700 dark:hover:bg-slate-600 rounded transition-colors flex items-center justify-center min-w-[30px]'\n} as const;\n\ninterface MarkdownEditorProps {\n  content: string;\n  onChange: (content: string) => void;\n  isFocusMode: boolean;\n}\n\nexport function MarkdownEditor({ content, onChange, isFocusMode }: MarkdownEditorProps): React.ReactElement {\n  const [isReady, setIsReady] = useState(false);\n  const [isDragOver, setIsDragOver] = useState(false); // 🔥 드래그 오버 상태 추가\n\n  // 🔥 드래그 앤 드롭 피드백을 위한 이벤트 리스너\n  useEffect(() => {\n    const handleDragOver = (e: DragEvent) => {\n      e.preventDefault();\n      setIsDragOver(true);\n    };\n\n    const handleDragLeave = (e: DragEvent) => {\n      e.preventDefault();\n      // 에디터 영역을 완전히 벗어날 때만 상태 변경\n      if (!e.relatedTarget || !(e.relatedTarget as Element).closest('.ProseMirror')) {\n        setIsDragOver(false);\n      }\n    };\n\n    const handleDrop = (e: DragEvent) => {\n      e.preventDefault();\n      setIsDragOver(false);\n    };\n\n    // 전역 이벤트 리스너 등록\n    document.addEventListener('dragover', handleDragOver);\n    document.addEventListener('dragleave', handleDragLeave);\n    document.addEventListener('drop', handleDrop);\n\n    return () => {\n      document.removeEventListener('dragover', handleDragOver);\n      document.removeEventListener('dragleave', handleDragLeave);\n      document.removeEventListener('drop', handleDrop);\n    };\n  }, []);\n\n  // 🔥 복사 기능을 위한 키보드 이벤트 리스너\n  useEffect(() => {\n    const handleCopy = (e: KeyboardEvent) => {\n      const isCtrlC = (e.ctrlKey || e.metaKey) && e.key === 'c';\n      const isCtrlA = (e.ctrlKey || e.metaKey) && e.key === 'a';\n\n      if (isCtrlC || isCtrlA) {\n        // 기본 복사 동작 허용 (TipTap이 자동으로 처리)\n        Logger.debug('MARKDOWN_EDITOR', 'Copy operation allowed', { type: isCtrlC ? 'Ctrl+C' : 'Ctrl+A' });\n      }\n    };\n\n    document.addEventListener('keydown', handleCopy);\n    return () => document.removeEventListener('keydown', handleCopy);\n  }, []);\n\n  // 🔥 TipTap 에디터 초기화 (Notion 스타일 + 작가 친화적 설정)\n  const editor = useEditor({\n    extensions: [\n      StarterKit.configure({\n        // 🔥 작가 친화적 설정\n        heading: {\n          levels: [1, 2, 3, 4] // H1~H4만 사용\n        },\n        bulletList: {\n          HTMLAttributes: {\n            class: 'list-disc list-outside ml-6'\n          }\n        },\n        orderedList: {\n          HTMLAttributes: {\n            class: 'list-decimal list-outside ml-6'\n          }\n        }\n      }),\n\n      // 🔥 언더라인 확장\n      Underline,\n\n      // 🔥 이미지 확장 (드래그앤드롭, 클립보드 붙여넣기 지원)\n      Image.configure({\n        HTMLAttributes: {\n          class: 'rounded-lg shadow-md max-w-full h-auto my-4',\n        },\n        inline: false,\n        allowBase64: true,\n      }),\n\n      // 🔥 Placeholder 확장 (작가 친화적)\n      Placeholder.configure({\n        placeholder: ({ node }) => {\n          if (node.type.name === 'heading') {\n            const level = node.attrs.level;\n            switch (level) {\n              case 1: return '제목을 입력하세요...';\n              case 2: return '챕터 제목...';\n              case 3: return '섹션 제목...';\n              default: return '소제목...';\n            }\n          }\n          if (node.type.name === 'callout') {\n            return '콜아웃 내용을 입력하세요...';\n          }\n          if (node.type.name === 'toggle') {\n            return '토글 내용을 입력하세요...';\n          }\n          return '/ 를 입력하여 명령어를 사용하거나 이야기를 시작해보세요...';\n        },\n        showOnlyWhenEditable: true,\n        showOnlyCurrent: false,\n      }),\n\n      // 🔥 Focus 확장 (포커스 모드)\n      Focus.configure({\n        className: 'has-focus',\n        mode: 'all',\n      }),\n\n      // 🔥 Typography 확장 (작가 친화적 타이포그래피)\n      Typography.configure({\n        openDoubleQuote: '\"',\n        closeDoubleQuote: '\"',\n        openSingleQuote: \"'\",\n        closeSingleQuote: \"'\",\n        ellipsis: '...',\n        emDash: '--',\n      }),\n\n      // 🔥 노션 스타일 확장들\n      TaskList,\n      TaskItem,\n      Callout,\n      Toggle,\n      Highlight,\n\n      // 🔥 슬래시 명령어 확장\n      SlashCommand.configure({\n        suggestion: slashSuggestion,\n      }),\n\n      // 🔥 문자 수 카운트\n      CharacterCount,\n    ],\n\n    content,\n\n    // 🔥 에디터 설정\n    editorProps: {\n      attributes: {\n        class: `${EDITOR_STYLES.editor} ${isFocusMode ? EDITOR_STYLES.focused : ''}`,\n        'data-placeholder': '이야기를 시작해보세요...',\n      },\n\n      // 🔥 TipTap 공식 마크다운 처리 방식 (완전히 동기적 실행)\n      handleKeyDown: (view, event) => {\n        if (event.key === ' ') {\n          const { state } = view;\n          const { selection } = state;\n          const { $from } = selection;\n          const textBefore = $from.parent.textContent.slice(0, $from.parentOffset);\n\n          // TipTap의 에디터 인스턴스에 직접 접근\n          const editorInstance = (view as any).editor;\n          if (!editorInstance) return false;\n\n          // # 처리 (제목 1)\n          if (textBefore === '#') {\n            event.preventDefault();\n            event.stopPropagation();\n\n            // 텍스트 삭제 후 헤딩 적용을 체인으로 연결\n            editorInstance\n              .chain()\n              .focus()\n              .deleteRange({ from: $from.pos - 1, to: $from.pos })\n              .setHeading({ level: 1 })\n              .run();\n\n            Logger.debug('TIPTAP_EDITOR', '✅ Markdown: H1 applied');\n            return true;\n          }\n\n          // ## 처리 (제목 2)\n          if (textBefore === '##') {\n            event.preventDefault();\n            event.stopPropagation();\n\n            editorInstance\n              .chain()\n              .focus()\n              .deleteRange({ from: $from.pos - 2, to: $from.pos })\n              .setHeading({ level: 2 })\n              .run();\n\n            Logger.debug('TIPTAP_EDITOR', '✅ Markdown: H2 applied');\n            return true;\n          }\n\n          // ### 처리 (제목 3)\n          if (textBefore === '###') {\n            event.preventDefault();\n            event.stopPropagation();\n\n            editorInstance\n              .chain()\n              .focus()\n              .deleteRange({ from: $from.pos - 3, to: $from.pos })\n              .setHeading({ level: 3 })\n              .run();\n\n            Logger.debug('TIPTAP_EDITOR', '✅ Markdown: H3 applied');\n            return true;\n          }\n\n          // - 처리 (불릿 리스트)\n          if (textBefore === '-') {\n            event.preventDefault();\n            event.stopPropagation();\n\n            editorInstance\n              .chain()\n              .focus()\n              .deleteRange({ from: $from.pos - 1, to: $from.pos })\n              .toggleBulletList()\n              .run();\n\n            Logger.debug('TIPTAP_EDITOR', '✅ Markdown: Bullet list applied');\n            return true;\n          }\n\n          // 1. 처리 (번호 리스트)\n          if (/^\\d+\\.$/.test(textBefore)) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            editorInstance\n              .chain()\n              .focus()\n              .deleteRange({ from: $from.pos - textBefore.length, to: $from.pos })\n              .toggleOrderedList()\n              .run();\n\n            Logger.debug('TIPTAP_EDITOR', '✅ Markdown: Ordered list applied');\n            return true;\n          }\n        }\n\n        return false;\n      },\n\n      // 🔥 클립보드 처리 (이미지 붙여넣기 지원)\n      handlePaste: (view, event) => {\n        const editorInstance = (view as any).editor;\n        if (!editorInstance) return false;\n\n        const clipboardData = event.clipboardData;\n        if (!clipboardData) return false;\n\n        // 이미지 파일 처리\n        const items = Array.from(clipboardData.items);\n        for (const item of items) {\n          if (item.type.indexOf('image') === 0) {\n            event.preventDefault();\n            const file = item.getAsFile();\n            if (file) {\n              const reader = new FileReader();\n              reader.onload = (e) => {\n                const src = e.target?.result as string;\n                if (src) {\n                  editorInstance.chain().focus().setImage({ src }).run();\n                  Logger.info('TIPTAP_EDITOR', 'Image pasted from clipboard');\n                }\n              };\n              reader.readAsDataURL(file);\n              return true;\n            }\n          }\n        }\n\n        // 텍스트 처리 (기본 동작 허용)\n        return false;\n      },\n\n      // 🔥 드래그 앤 드롭 처리\n      handleDrop: (view, event) => {\n        const editorInstance = (view as any).editor;\n        if (!editorInstance) return false;\n\n        // 드래그 오버 클래스 제거\n        const editorElement = view.dom as HTMLElement;\n        editorElement.classList.remove('drag-over');\n\n        const files = Array.from(event.dataTransfer?.files || []);\n        const imageFiles = files.filter(file => file.type.startsWith('image/'));\n\n        if (imageFiles.length > 0) {\n          event.preventDefault();\n\n          imageFiles.forEach(file => {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n              const src = e.target?.result as string;\n              if (src) {\n                editorInstance.chain().focus().setImage({ src }).run();\n                Logger.info('TIPTAP_EDITOR', 'Image dropped into editor');\n              }\n            };\n            reader.readAsDataURL(file);\n          });\n\n          return true;\n        }\n\n        return false;\n      },\n    },\n\n    // 🔥 콘텐츠 변경 핸들러\n    onUpdate: ({ editor }) => {\n      const newContent = editor.getHTML();\n      onChange(newContent);\n      Logger.debug('TIPTAP_EDITOR', 'Content updated', {\n        wordCount: editor.storage.characterCount?.words() || 0\n      });\n    },\n\n    // 🔥 에디터 준비 완료\n    onCreate: ({ editor }) => {\n      setIsReady(true);\n      Logger.info('TIPTAP_EDITOR', 'Editor created successfully');\n    },\n\n    // 🔥 에디터 포커스\n    onFocus: ({ editor }) => {\n      Logger.debug('TIPTAP_EDITOR', 'Editor focused');\n    },\n\n    // 🔥 에디터 블러\n    onBlur: ({ editor }) => {\n      Logger.debug('TIPTAP_EDITOR', 'Editor blurred');\n    },\n  });\n\n  // 🔥 외부 content 변경 시 에디터 업데이트\n  useEffect(() => {\n    if (editor && content !== editor.getHTML()) {\n      editor.commands.setContent(content, false);\n    }\n  }, [content, editor]);\n\n  // 🔥 포커스 모드 변경 시 클래스 업데이트\n  useEffect(() => {\n    if (editor) {\n      const editorElement = editor.view.dom as HTMLElement;\n      editorElement.className = `${EDITOR_STYLES.editor} ${isFocusMode ? EDITOR_STYLES.focused : ''}`;\n    }\n  }, [isFocusMode, editor]);\n\n  // 🔥 단축키 바인딩 및 저장 이벤트 리스너\n  useEffect(() => {\n    if (!editor) return;\n\n    // 🔥 단축키 바인딩\n    const unbindShortcuts = bindShortcutsToEditor(editor);\n\n    // 🔥 클립보드 단축키 추가\n    const handleKeyDown = (event: KeyboardEvent) => {\n      const { key, ctrlKey, metaKey } = event;\n      const modKey = ctrlKey || metaKey; // Windows: Ctrl, Mac: Cmd\n\n      // Ctrl/Cmd + C: 복사\n      if (modKey && key === 'c' && !event.shiftKey) {\n        const selectedText = editor.state.doc.textBetween(\n          editor.state.selection.from,\n          editor.state.selection.to\n        );\n        if (selectedText) {\n          navigator.clipboard.writeText(selectedText).then(() => {\n            Logger.info('TIPTAP_EDITOR', 'Text copied via keyboard shortcut');\n          }).catch((err) => {\n            Logger.error('TIPTAP_EDITOR', 'Failed to copy text via shortcut', err);\n          });\n        }\n      }\n\n      // Ctrl/Cmd + V: 붙여넣기\n      if (modKey && key === 'v' && !event.shiftKey) {\n        navigator.clipboard.readText().then((text) => {\n          if (text) {\n            editor.chain().focus().insertContent(text).run();\n            Logger.info('TIPTAP_EDITOR', 'Text pasted via keyboard shortcut');\n          }\n        }).catch((err) => {\n          Logger.error('TIPTAP_EDITOR', 'Failed to paste text via shortcut', err);\n        });\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // 🔥 저장 이벤트 리스너 (Ctrl+S)\n    const handleSave = () => {\n      const saveEvent = new CustomEvent('project:save');\n      window.dispatchEvent(saveEvent);\n      Logger.info('TIPTAP_EDITOR', 'Save event triggered from editor');\n    };\n\n    window.addEventListener('editor:save', handleSave);\n\n    Logger.info('TIPTAP_EDITOR', 'Shortcuts and save event bound', {\n      shortcutCount: ALL_SHORTCUTS.length\n    });\n\n    // 🔥 정리 함수\n    return () => {\n      unbindShortcuts();\n      document.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('editor:save', handleSave);\n      Logger.debug('TIPTAP_EDITOR', 'Shortcuts and events unbound');\n    };\n  }, [editor]);\n\n  // 🔥 컴포넌트 언마운트 시 정리 - DOM 에러 방지\n  useEffect(() => {\n    const currentEditor = editor;\n\n    return () => {\n      if (currentEditor && !currentEditor.isDestroyed) {\n        try {\n          // 모든 DOM 조작 중단\n          if (currentEditor.view && currentEditor.view.dom) {\n            currentEditor.view.dom.style.display = 'none';\n          }\n\n          // 에디터 이벤트 리스너 정리\n          currentEditor.off('transaction');\n          currentEditor.off('update');\n          currentEditor.off('create');\n          currentEditor.off('focus');\n          currentEditor.off('blur');\n          currentEditor.off('selectionUpdate');\n\n          // 모든 pending 트랜잭션 취소\n          if (currentEditor.view && currentEditor.view.state) {\n            currentEditor.view.updateState(currentEditor.view.state);\n          }\n\n          // 에디터 소멸\n          setTimeout(() => {\n            if (!currentEditor.isDestroyed) {\n              currentEditor.destroy();\n            }\n          }, 0);\n\n          Logger.debug('TIPTAP_EDITOR', 'Editor destroyed safely');\n        } catch (error) {\n          Logger.error('TIPTAP_EDITOR', 'Error during editor cleanup', error);\n        }\n      }\n    };\n  }, [editor]);  // 🔥 ESC 키 핸들러 (집중모드 해제) 및 복사 이벤트 리스너\n  useEffect(() => {\n    const handleEscKey = (event: KeyboardEvent): void => {\n      if (event.key === 'Escape' && isFocusMode) {\n        // 집중모드 해제 이벤트 발생\n        const exitFocusEvent = new CustomEvent('editor:exitFocus');\n        window.dispatchEvent(exitFocusEvent);\n        Logger.info('TIPTAP_EDITOR', 'ESC pressed - exiting focus mode');\n      }\n    };\n\n    // 🔥 QA 가이드: 에디터 내용 복사 이벤트 리스너\n    const handleCopyContent = (event: CustomEvent): void => {\n      if (editor && event.detail && event.detail.callback) {\n        const textContent = editor.getText();\n        event.detail.callback(textContent);\n        Logger.info('TIPTAP_EDITOR', 'Content copied via header button', {\n          length: textContent.length\n        });\n      }\n    };\n\n    window.addEventListener('keydown', handleEscKey);\n    window.addEventListener('project:copyContent', handleCopyContent as EventListener);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscKey);\n      window.removeEventListener('project:copyContent', handleCopyContent as EventListener);\n    };\n  }, [isFocusMode, editor]);\n\n  // 🔥 에디터 드래그 앤 드롭 시각적 피드백\n  useEffect(() => {\n    if (!editor) return;\n\n    const editorElement = editor.view.dom as HTMLElement;\n\n    const handleDragEnter = (e: DragEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      editorElement.classList.add('drag-over');\n      setIsDragOver(true);\n    };\n\n    const handleDragOver = (e: DragEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n    };\n\n    const handleDragLeave = (e: DragEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      // 에디터 영역을 완전히 벗어날 때만 상태 변경\n      if (!editorElement.contains(e.relatedTarget as Node)) {\n        editorElement.classList.remove('drag-over');\n        setIsDragOver(false);\n      }\n    };\n\n    const handleDrop = (e: DragEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      editorElement.classList.remove('drag-over');\n      setIsDragOver(false);\n    };\n\n    // 에디터 전용 드래그 이벤트 리스너\n    editorElement.addEventListener('dragenter', handleDragEnter);\n    editorElement.addEventListener('dragover', handleDragOver);\n    editorElement.addEventListener('dragleave', handleDragLeave);\n    editorElement.addEventListener('drop', handleDrop);\n\n    return () => {\n      editorElement.removeEventListener('dragenter', handleDragEnter);\n      editorElement.removeEventListener('dragover', handleDragOver);\n      editorElement.removeEventListener('dragleave', handleDragLeave);\n      editorElement.removeEventListener('drop', handleDrop);\n    };\n  }, [editor]);\n\n  // 🔥 로딩 중 표시\n  if (!isReady) {\n    return (\n      <div className={EDITOR_STYLES.container}>\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"flex flex-col items-center gap-4\">\n            <div className=\"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n            <span className=\"text-slate-500 text-sm\">에디터 준비 중...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${EDITOR_STYLES.container} ${isDragOver ? 'drag-over' : ''}`}>\n      {/* 🔥 드래그 오버 상태 피드백 */}\n      {isDragOver && (\n        <div className=\"absolute inset-0 border-2 border-dashed border-blue-500 bg-blue-50/50 dark:bg-blue-900/20 rounded-lg flex items-center justify-center z-10 pointer-events-none\">\n          <div className=\"text-blue-600 dark:text-blue-400 text-lg font-medium\">\n            📁 파일을 여기에 놓으세요\n          </div>\n        </div>\n      )}\n\n      {/* 🔥 Enhanced Bubble Menu (선택 시 나타나는 고급 툴바) */}\n      {editor && (\n        <BubbleMenu\n          key=\"bubble-menu\" // 🔥 고유 key 추가\n          editor={editor}\n          className={EDITOR_STYLES.bubble}\n          shouldShow={({ editor, view, state, oldState, from, to }) => {\n            // 텍스트가 선택되었을 때만 표시\n            return from !== to;\n          }}\n        >\n          {/* 기본 포맷팅 버튼들 */}\n          <button\n            onClick={() => editor.chain().focus().toggleBold().run()}\n            className={`${EDITOR_STYLES.bubbleButton} ${editor.isActive('bold') ? 'bg-blue-200 dark:bg-blue-800' : ''\n              }`}\n            title=\"볼드 (Ctrl+B)\"\n          >\n            <Bold size={14} />\n          </button>\n\n          <button\n            onClick={() => editor.chain().focus().toggleItalic().run()}\n            className={`${EDITOR_STYLES.bubbleButton} ${editor.isActive('italic') ? 'bg-blue-200 dark:bg-blue-800' : ''\n              }`}\n            title=\"이탤릭 (Ctrl+I)\"\n          >\n            <Italic size={14} />\n          </button>\n\n          <button\n            onClick={() => editor.chain().focus().toggleUnderline().run()}\n            className={`${EDITOR_STYLES.bubbleButton} ${editor.isActive('underline') ? 'bg-blue-200 dark:bg-blue-800' : ''\n              }`}\n            title=\"언더라인 (Ctrl+U)\"\n          >\n            <UnderlineIcon size={14} />\n          </button>\n\n          <button\n            onClick={() => editor.chain().focus().toggleStrike().run()}\n            className={`${EDITOR_STYLES.bubbleButton} ${editor.isActive('strike') ? 'bg-blue-200 dark:bg-blue-800' : ''\n              }`}\n            title=\"취소선 (Ctrl+Shift+S)\"\n          >\n            <Strikethrough size={14} />\n          </button>\n\n          {/* 구분선 */}\n          <div className=\"w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1\" />\n\n          {/* 고급 포맷팅 */}\n          <button\n            onClick={() => editor.chain().focus().toggleCode().run()}\n            className={`${EDITOR_STYLES.bubbleButton} ${editor.isActive('code') ? 'bg-blue-200 dark:bg-blue-800' : ''\n              }`}\n            title=\"인라인 코드 (Ctrl+`)\"\n          >\n            <Code size={14} />\n          </button>\n\n          {/* 구분선 */}\n          <div className=\"w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1\" />\n\n          {/* 링크 버튼 */}\n          <button\n            onClick={() => {\n              // TODO: 링크 다이얼로그 모달로 교체 필요\n              Logger.info('MARKDOWN_EDITOR', 'Link feature - dialog implementation needed');\n            }}\n            className={`${EDITOR_STYLES.bubbleButton} ${editor.isActive('link') ? 'bg-blue-200 dark:bg-blue-800' : ''\n              }`}\n            title=\"링크 추가\"\n          >\n            <Link size={14} />\n          </button>\n\n          {/* 인용구 버튼 */}\n          <button\n            onClick={() => editor.chain().focus().toggleBlockquote().run()}\n            className={`${EDITOR_STYLES.bubbleButton} ${editor.isActive('blockquote') ? 'bg-blue-200 dark:bg-blue-800' : ''\n              }`}\n            title=\"인용구\"\n          >\n            <Quote size={14} />\n          </button>\n\n          {/* 구분선 */}\n          <div className=\"w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1\" />\n\n          {/* 이미지 추가 버튼 */}\n          <button\n            onClick={() => {\n              const input = document.createElement('input');\n              input.type = 'file';\n              input.accept = 'image/*';\n              input.onchange = (e) => {\n                const file = (e.target as HTMLInputElement).files?.[0];\n                if (file) {\n                  const reader = new FileReader();\n                  reader.onload = (event) => {\n                    const src = event.target?.result as string;\n                    if (src) {\n                      editor.chain().focus().setImage({ src }).run();\n                      Logger.info('TIPTAP_EDITOR', 'Image added via file picker');\n                    }\n                  };\n                  reader.readAsDataURL(file);\n                }\n              };\n              input.click();\n            }}\n            className={EDITOR_STYLES.bubbleButton}\n            title=\"이미지 추가\"\n          >\n            <ImageIcon size={14} />\n          </button>\n\n          {/* 복사 버튼 */}\n          <button\n            onClick={() => {\n              const selectedText = editor.state.doc.textBetween(\n                editor.state.selection.from,\n                editor.state.selection.to\n              );\n              if (selectedText) {\n                navigator.clipboard.writeText(selectedText).then(() => {\n                  Logger.info('TIPTAP_EDITOR', 'Text copied to clipboard');\n                }).catch((err) => {\n                  Logger.error('TIPTAP_EDITOR', 'Failed to copy text', err);\n                });\n              }\n            }}\n            className={EDITOR_STYLES.bubbleButton}\n            title=\"선택한 텍스트 복사\"\n          >\n            <Copy size={14} />\n          </button>\n\n          {/* 클립보드에서 붙여넣기 버튼 */}\n          <button\n            onClick={async () => {\n              try {\n                const text = await navigator.clipboard.readText();\n                if (text) {\n                  editor.chain().focus().insertContent(text).run();\n                  Logger.info('TIPTAP_EDITOR', 'Text pasted from clipboard');\n                }\n              } catch (err) {\n                Logger.error('TIPTAP_EDITOR', 'Failed to paste from clipboard', err);\n              }\n            }}\n            className={EDITOR_STYLES.bubbleButton}\n            title=\"클립보드에서 붙여넣기\"\n          >\n            <Clipboard size={14} />\n          </button>\n\n          {/* 구분선 */}\n          <div className=\"w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1\" />\n\n          {/* 추가 옵션 */}\n          <button\n            onClick={() => {\n              // 기본으로 H2 헤딩 적용 (prompt 대신)\n              editor.chain().focus().setHeading({ level: 2 }).run();\n            }}\n            className={EDITOR_STYLES.bubbleButton}\n            title=\"헤딩 설정\"\n          >\n            <MoreHorizontal size={14} />\n          </button>\n        </BubbleMenu>\n      )}\n\n      {/* 🔥 메인 에디터 */}\n      <EditorContent editor={editor} />\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6245, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/views/WriteView.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { MarkdownEditor } from '../editor/MarkdownEditor';\nimport { Focus } from 'lucide-react';\n\ninterface WriteViewProps {\n  content: string;\n  onChange: (content: string) => void;\n  isFocusMode: boolean;\n}\n\n// 🔥 기가차드 작가 친화적 스타일 - 단순화\nconst WRITE_STYLES = {\n  container: 'flex-1 flex flex-col h-full bg-gradient-to-br from-slate-50 to-white dark:from-gray-900 dark:to-gray-800 transition-colors duration-300',\n\n  // 🔥 메인 에디터 영역\n  editorContainer: 'flex-1 min-h-0 relative',\n  editorWrapper: 'h-full',\n\n  // 🔥 포커스 모드 오버레이\n  focusOverlay: 'absolute inset-0 bg-black/20 backdrop-blur-sm z-10 transition-opacity duration-300',\n  focusContent: 'relative z-20 h-full',\n\n  // 🔥 빈 상태 (새 문서)\n  emptyState: 'flex flex-col items-center justify-center h-full text-center max-w-md mx-auto px-6',\n  emptyIcon: 'w-16 h-16 text-slate-400 dark:text-gray-500 mb-4',\n  emptyTitle: 'text-xl font-semibold text-slate-900 dark:text-gray-100 mb-2',\n  emptyDescription: 'text-slate-600 dark:text-gray-400 mb-6 leading-relaxed',\n  startButton: 'px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors font-medium',\n} as const;\n\nexport function WriteView({ content, onChange, isFocusMode }: WriteViewProps): React.ReactElement {\n  // 🔥 빈 상태 처리\n  const isEmpty = !content.trim();\n\n  if (isEmpty) {\n    return (\n      <div className={WRITE_STYLES.container}>\n        <div className={WRITE_STYLES.emptyState}>\n          <Focus className={WRITE_STYLES.emptyIcon} />\n          <h2 className={WRITE_STYLES.emptyTitle}>새로운 이야기를 시작하세요</h2>\n          <p className={WRITE_STYLES.emptyDescription}>\n            이곳에서 당신의 창작 여정이 시작됩니다.\n            첫 번째 문장을 작성하고 상상력을 현실로 만들어보세요.\n          </p>\n          <button\n            className={WRITE_STYLES.startButton}\n            onClick={() => onChange('# 새로운 장\\n\\n')}\n          >\n            글쓰기 시작하기\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={WRITE_STYLES.container}>\n      {/* 🔥 메인 에디터 영역 - 중복 통계 바 제거 */}\n      <div className={WRITE_STYLES.editorContainer}>\n        {isFocusMode && <div className={WRITE_STYLES.focusOverlay} />}\n        <div className={WRITE_STYLES.focusContent}>\n          <div className={WRITE_STYLES.editorWrapper}>\n            <MarkdownEditor\n              content={content}\n              onChange={onChange}\n              isFocusMode={isFocusMode}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AAJA;;;;AAYA,2BAA2B;AAC3B,MAAM,eAAe;IACnB,WAAW;IAEX,eAAe;IACf,iBAAiB;IACjB,eAAe;IAEf,iBAAiB;IACjB,cAAc;IACd,cAAc;IAEd,iBAAiB;IACjB,YAAY;IACZ,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,aAAa;AACf;AAEO,SAAS,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAkB;IAC1E,aAAa;IACb,MAAM,UAAU,CAAC,QAAQ,IAAI;IAE7B,IAAI,SAAS;QACX,qBACE,8OAAC;YAAI,WAAW,aAAa,SAAS;sBACpC,cAAA,8OAAC;gBAAI,WAAW,aAAa,UAAU;;kCACrC,8OAAC,oMAAA,CAAA,QAAK;wBAAC,WAAW,aAAa,SAAS;;;;;;kCACxC,8OAAC;wBAAG,WAAW,aAAa,UAAU;kCAAE;;;;;;kCACxC,8OAAC;wBAAE,WAAW,aAAa,gBAAgB;kCAAE;;;;;;kCAI7C,8OAAC;wBACC,WAAW,aAAa,WAAW;wBACnC,SAAS,IAAM,SAAS;kCACzB;;;;;;;;;;;;;;;;;IAMT;IAEA,qBACE,8OAAC;QAAI,WAAW,aAAa,SAAS;kBAEpC,cAAA,8OAAC;YAAI,WAAW,aAAa,eAAe;;gBACzC,6BAAe,8OAAC;oBAAI,WAAW,aAAa,YAAY;;;;;;8BACzD,8OAAC;oBAAI,WAAW,aAAa,YAAY;8BACvC,cAAA,8OAAC;wBAAI,WAAW,aAAa,aAAa;kCACxC,cAAA,8OAAC,sKAAA,CAAA,iBAAc;4BACb,SAAS;4BACT,UAAU;4BACV,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;AAO3B","debugId":null}},
    {"offset": {"line": 6377, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/views/StructureView.tsx"],"sourcesContent":["'use client';\n\n// 🔥 기가차드 스토리 구조 뷰 - 작가 친화적 개선\n\nimport React, { useState, useCallback, useEffect, useMemo, memo } from 'react';\nimport { ProjectStructure } from '../../../../shared/types';\nimport { useStructureStore } from '../../../stores/useStructureStore';\nimport { Logger } from '../../../../shared/logger'; // 🔥 Logger import 추가\nimport {\n  FileText,\n  Hash,\n  Bookmark,\n  Plus,\n  Edit2,\n  Trash2,\n  ChevronDown,\n  ChevronRight,\n  GripVertical,\n  Target,\n  Clock,\n  BarChart3\n} from 'lucide-react';\n\ninterface StructureViewProps {\n  projectId: string; // 🔥 projectId 필수로 변경\n  onNavigateToChapterEdit?: (chapterId: string) => void;\n  onNavigateToSynopsisEdit?: (synopsisId: string) => void;\n  onNavigateToIdeaEdit?: (ideaId: string) => void;\n  onAddNewChapter?: () => void; // 🔥 NEW: 새 장 추가 핸들러\n}\n\n// 🔥 기가차드 작가 친화적 구조 스타일\nconst STRUCTURE_STYLES = {\n  container: 'flex-1 overflow-hidden bg-gradient-to-br from-slate-50 to-white dark:from-gray-900 dark:to-gray-800',\n\n  // 🔥 개선된 헤더\n  header: 'p-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-slate-200/50 dark:border-gray-700/50',\n  headerTop: 'flex items-center justify-between mb-4',\n  title: 'text-2xl font-bold text-gray-900 dark:text-gray-100',\n  subtitle: 'text-slate-600 dark:text-gray-400 leading-relaxed',\n\n  // 🔥 통계 요약\n  statsGrid: 'grid grid-cols-3 gap-4 mt-4',\n  statCard: 'p-3 bg-white dark:bg-gray-800 rounded-lg border border-slate-200 dark:border-gray-700',\n  statIcon: 'w-5 h-5 text-blue-600 dark:text-blue-400 mb-2',\n  statValue: 'text-lg font-semibold text-gray-900 dark:text-gray-100',\n  statLabel: 'text-xs text-slate-600 dark:text-gray-400',\n\n  // 🔥 메인 콘텐츠 - 스크롤 영역 개선\n  content: 'flex-1 flex flex-col min-h-0',\n  scrollArea: 'flex-1 overflow-y-auto',\n  contentPadding: 'p-6',\n\n  // 🔥 개선된 구조 아이템\n  structureList: 'space-y-3 pb-4',\n  structureItem: 'group relative flex items-center gap-4 p-4 bg-white dark:bg-gray-800 border border-slate-200 dark:border-gray-700 rounded-xl hover:shadow-md hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-200 cursor-pointer',\n  itemDragHandle: 'opacity-0 group-hover:opacity-100 w-5 h-5 text-slate-400 dark:text-gray-500 cursor-grab active:cursor-grabbing transition-opacity',\n  itemIcon: 'w-6 h-6 text-blue-600 dark:text-blue-400 flex-shrink-0',\n  itemContent: 'flex-1 min-w-0',\n  itemTitle: 'font-semibold text-gray-900 dark:text-gray-100 truncate',\n  itemMeta: 'flex items-center gap-4 mt-1',\n  itemType: 'text-xs px-2 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full font-medium',\n  itemStats: 'text-xs text-slate-500 dark:text-gray-400',\n  itemActions: 'flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity',\n  actionButton: 'p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-gray-700 text-slate-500 dark:text-gray-400 hover:text-slate-700 dark:hover:text-gray-300 transition-colors',\n\n  // 🔥 개선된 추가 메뉴 - 크기 더 축소\n  addMenuContainer: 'relative',\n  addButton: 'flex items-center justify-center gap-1.5 w-full p-2 border-2 border-dashed border-slate-300 dark:border-gray-600 rounded-md text-slate-600 dark:text-gray-400 hover:border-blue-400 hover:text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/10 transition-all duration-200 group',\n  addIcon: 'w-3.5 h-3.5 group-hover:scale-110 transition-transform',\n  addText: 'text-xs font-medium',\n  addMenu: 'absolute top-full left-0 right-0 mt-1 bg-white dark:bg-gray-800 border border-slate-200 dark:border-gray-700 rounded-md shadow-lg z-10 overflow-hidden',\n  addMenuItem: 'flex items-center gap-2 px-2.5 py-1.5 hover:bg-slate-50 dark:hover:bg-gray-700 cursor-pointer transition-colors',\n  addMenuIcon: 'w-3.5 h-3.5 text-slate-600 dark:text-gray-400',\n  addMenuText: 'text-xs font-medium text-gray-900 dark:text-gray-100',\n  addMenuDesc: 'text-xs text-slate-500 dark:text-gray-400',\n\n  // 🔥 편집 모드\n  editInput: 'w-full px-3 py-2 border-2 border-blue-400 rounded-lg text-sm font-semibold text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500',\n\n  // 🔥 빈 상태\n  emptyState: 'flex flex-col items-center justify-center h-64 text-center',\n  emptyIcon: 'w-16 h-16 text-slate-400 dark:text-gray-500 mb-4',\n  emptyTitle: 'text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2',\n  emptyDescription: 'text-slate-600 dark:text-gray-400 max-w-md mx-auto leading-relaxed',\n} as const;\n\n// 타입별 아이콘 매핑\nconst TYPE_ICONS = {\n  chapter: Hash,\n  synopsis: FileText,\n  idea: Bookmark,\n} as const;\n\n// 추가 메뉴 아이템\nconst ADD_MENU_ITEMS = [\n  { type: 'chapter', label: '새 장', icon: Hash, description: '스토리의 주요 단위' },\n  { type: 'synopsis', label: '시놉시스', icon: FileText, description: '이야기 개요' },\n  { type: 'idea', label: '아이디어', icon: Bookmark, description: '창작 아이디어' },\n] as const;\n\n// 🔥 빈 배열 상수 - 참조 안정성 보장\nconst EMPTY_STRUCTURES: ProjectStructure[] = [];\n\nconst StructureView = memo(function StructureView({\n  projectId,\n  onNavigateToChapterEdit,\n  onNavigateToSynopsisEdit,\n  onNavigateToIdeaEdit,\n  onAddNewChapter\n}: StructureViewProps): React.ReactElement {\n  // 🔥 Zustand 스토어 사용 - 참조 안정성을 위한 최적화\n  const structures = useStructureStore((state) => {\n    const projectStructures = state.structures[projectId];\n    return projectStructures || EMPTY_STRUCTURES;\n  });\n\n  const addStructureItem = useStructureStore((state) => state.addStructureItem);\n  const updateStructureItem = useStructureStore((state) => state.updateStructureItem);\n  const deleteStructureItem = useStructureStore((state) => state.deleteStructureItem);\n  const setCurrentEditor = useStructureStore((state) => state.setCurrentEditor);\n\n  const [showAddMenu, setShowAddMenu] = useState<boolean>(false);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editTitle, setEditTitle] = useState<string>('');\n\n  // 🔥 스토어 동기화 디버깅\n  useEffect(() => {\n    Logger.debug('STRUCTURE_VIEW', 'Structures updated', {\n      projectId,\n      structuresCount: structures.length,\n      structures: structures.map(s => ({ id: s.id, title: s.title, type: s.type }))\n    });\n  }, [structures, projectId]);\n\n  const handleAddItem = useCallback(async (type: 'chapter' | 'synopsis' | 'idea'): Promise<void> => {\n    // 🔥 NEW: chapter 타입일 때는 모달을 통해 처리\n    if (type === 'chapter' && onAddNewChapter) {\n      onAddNewChapter();\n      setShowAddMenu(false);\n      return;\n    }\n\n    // 기존 synopsis, idea 처리 로직\n    const defaultTitles = {\n      chapter: `새로운 챕터`, // 이 부분은 사용되지 않음 (모달 통해 처리)\n      synopsis: `새로운 시놉시스`,\n      idea: `새로운 아이디어`\n    };\n\n    // 🔥 chapter 타입의 경우 올바른 번호 계산\n    let itemTitle = defaultTitles[type];\n    if (type === 'chapter') {\n      const chapterStructures = structures.filter(item => item.type === 'chapter');\n      const chapterCount = chapterStructures.length + 1;\n      itemTitle = `${chapterCount}챕터`;\n    }\n\n    const newItem: ProjectStructure = {\n      id: `${type}_${Date.now()}`,\n      title: itemTitle,\n      description: '',\n      type,\n      status: 'planning',\n      projectId,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    // 🔥 Zustand 스토어에 추가 (비동기)\n    await addStructureItem(projectId, newItem);\n\n    // 🔥 에디터 상태 업데이트\n    setCurrentEditor({\n      projectId,\n      editorType: type,\n      itemId: newItem.id,\n      itemTitle: newItem.title\n    });\n\n    setShowAddMenu(false);\n\n    // 🔥 해당 타입의 에디터로 이동\n    if (type === 'idea') {\n      onNavigateToIdeaEdit?.(newItem.id);\n    } else if (type === 'synopsis') {\n      onNavigateToSynopsisEdit?.(newItem.id);\n    }\n  }, [projectId, addStructureItem, setCurrentEditor, onAddNewChapter, onNavigateToIdeaEdit, onNavigateToSynopsisEdit]);\n\n  const handleItemClick = useCallback((item: ProjectStructure): void => {\n    // 🔥 에디터 상태 업데이트\n    setCurrentEditor({\n      projectId,\n      editorType: item.type as 'chapter' | 'synopsis' | 'idea',\n      itemId: item.id,\n      itemTitle: item.title\n    });\n\n    if (item.type === 'chapter') {\n      onNavigateToChapterEdit?.(item.id);\n    } else if (item.type === 'idea') {\n      onNavigateToIdeaEdit?.(item.id);\n    } else if (item.type === 'synopsis') {\n      onNavigateToSynopsisEdit?.(item.id);\n    }\n  }, [projectId, setCurrentEditor, onNavigateToChapterEdit, onNavigateToIdeaEdit, onNavigateToSynopsisEdit]);\n\n  const handleEditStart = useCallback((item: ProjectStructure): void => {\n    setEditingId(item.id);\n    setEditTitle(item.title);\n  }, []);\n\n  const handleEditSave = useCallback((id: string): void => {\n    if (editTitle.trim()) {\n      // 🔥 Zustand 스토어에서 업데이트\n      updateStructureItem(projectId, id, { title: editTitle.trim() });\n    }\n    setEditingId(null);\n    setEditTitle('');\n  }, [projectId, editTitle, updateStructureItem]);\n\n  const handleEditCancel = useCallback((): void => {\n    setEditingId(null);\n    setEditTitle('');\n  }, []);\n\n  const handleDelete = useCallback(async (id: string): Promise<void> => {\n    try {\n      // 🔥 Zustand 스토어에서 삭제 (DB 삭제 포함)\n      await deleteStructureItem(projectId, id);\n\n      // 🔥 삭제 성공 시 추가 정리 작업\n      Logger.info('STRUCTURE_VIEW', 'Structure item deleted successfully', { id, projectId });\n\n      // 편집 상태 초기화\n      if (editingId === id) {\n        setEditingId(null);\n        setEditTitle('');\n      }\n    } catch (error) {\n      Logger.error('STRUCTURE_VIEW', 'Failed to delete structure item', { id, projectId, error });\n    }\n  }, [projectId, deleteStructureItem, editingId]);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent, id: string): void => {\n    if (e.key === 'Enter') {\n      handleEditSave(id);\n    } else if (e.key === 'Escape') {\n      handleEditCancel();\n    }\n  }, [handleEditSave, handleEditCancel]);\n\n  return (\n    <div className={STRUCTURE_STYLES.container}>\n      {/* 헤더 */}\n      <div className={STRUCTURE_STYLES.header}>\n        <h2 className={STRUCTURE_STYLES.title}>스토리 구조</h2>\n        <p className={STRUCTURE_STYLES.subtitle}>\n          장, 장면, 메모를 관리하여 이야기의 흐름을 구성하세요\n        </p>\n      </div>\n\n      {/* 구조 목록 */}\n      <div className={STRUCTURE_STYLES.content}>\n        <div className={STRUCTURE_STYLES.structureList}>\n          {structures.map((item) => {\n            const IconComponent = TYPE_ICONS[item.type as keyof typeof TYPE_ICONS] || FileText;\n            const isEditing = editingId === item.id;\n\n            return (\n              <div\n                key={item.id}\n                className={STRUCTURE_STYLES.structureItem}\n                onClick={() => handleItemClick(item)}\n                style={{ cursor: 'pointer' }}\n              >\n                <IconComponent className={STRUCTURE_STYLES.itemIcon} />\n                <div className={STRUCTURE_STYLES.itemContent}>\n                  {isEditing ? (\n                    <input\n                      type=\"text\"\n                      value={editTitle}\n                      onChange={(e) => setEditTitle(e.target.value)}\n                      onKeyDown={(e) => handleKeyPress(e, item.id)}\n                      onBlur={() => handleEditSave(item.id)}\n                      className={STRUCTURE_STYLES.editInput}\n                      autoFocus\n                    />\n                  ) : (\n                    <>\n                      <div className={STRUCTURE_STYLES.itemTitle}>{item.title}</div>\n                      <div className={STRUCTURE_STYLES.itemType}>\n                        {item.type === 'chapter' ? '장' :\n                          item.type === 'synopsis' ? '시놉시스' : '아이디어'}\n                      </div>\n                    </>\n                  )}\n                </div>\n                <div className={STRUCTURE_STYLES.itemActions}>\n                  <button\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      handleEditStart(item);\n                    }}\n                    className={STRUCTURE_STYLES.actionButton}\n                    title=\"편집\"\n                  >\n                    <Edit2 className=\"w-4 h-4\" />\n                  </button>\n                  <button\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      handleDelete(item.id);\n                    }}\n                    className={STRUCTURE_STYLES.actionButton}\n                    title=\"삭제\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n\n          {/* 추가 메뉴 */}\n          <div className={STRUCTURE_STYLES.addMenuContainer}>\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                setShowAddMenu(!showAddMenu);\n              }}\n              className={STRUCTURE_STYLES.addButton}\n            >\n              <Plus className=\"w-5 h-5\" />\n              <span>새 항목 추가</span>\n              {showAddMenu ? <ChevronDown className=\"w-4 h-4\" /> : <ChevronRight className=\"w-4 h-4\" />}\n            </button>\n\n            {showAddMenu && (\n              <div className={STRUCTURE_STYLES.addMenu}>\n                {ADD_MENU_ITEMS.map(({ type, label, icon: Icon, description }) => (\n                  <div\n                    key={type}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      handleAddItem(type);\n                    }}\n                    className={STRUCTURE_STYLES.addMenuItem}\n                  >\n                    <Icon className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-gray-900 dark:text-gray-100\">\n                        {label}\n                      </div>\n                      <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        {description}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport { StructureView };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6911, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/views/CharactersView.tsx"],"sourcesContent":["'use client';\n\n// 🔥 기가차드 캐릭터 뷰 - 상세 정보 확장 및 정보 과부하 방지\n\nimport React, { useState } from 'react';\nimport { ProjectCharacter } from '../../../../shared/types';\nimport { Plus, Edit3, Save, X as XIcon, Users, Heart, BookOpen, User, Briefcase, Home, MapPin, Calendar, Palette } from 'lucide-react';\nimport { Logger } from '../../../../shared/logger';\nimport { useLongPress } from '../../../hooks/useLongPress';\n\ninterface CharactersViewProps {\n  projectId: string;\n  characters: ProjectCharacter[];\n  onCharactersChange: (characters: ProjectCharacter[]) => void;\n}\n\n// 🔥 기가차드 캐릭터 스타일 - 카드 기반 레이아웃\nconst CHARACTERS_STYLES = {\n  container: 'flex-1 overflow-hidden bg-gradient-to-br from-slate-50 to-white dark:from-gray-900 dark:to-gray-800',\n\n  // 🔥 개선된 헤더\n  header: 'p-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-slate-200/50 dark:border-gray-700/50',\n  headerTop: 'flex items-center justify-between mb-4',\n  title: 'text-2xl font-bold text-gray-900 dark:text-gray-100',\n  subtitle: 'text-slate-600 dark:text-gray-400 leading-relaxed',\n\n  // 🔥 통계 카드\n  statsGrid: 'grid grid-cols-3 gap-4 mt-4',\n  statCard: 'p-3 bg-white dark:bg-gray-800 rounded-lg border border-slate-200 dark:border-gray-700',\n  statIcon: 'w-5 h-5 text-blue-600 dark:text-blue-400 mb-2',\n  statValue: 'text-lg font-semibold text-gray-900 dark:text-gray-100',\n  statLabel: 'text-xs text-slate-600 dark:text-gray-400',\n\n  // 🔥 콘텐츠 영역\n  content: 'flex-1 flex flex-col min-h-0',\n  scrollArea: 'flex-1 overflow-y-auto',\n  contentPadding: 'p-6',\n\n  // 🔥 캐릭터 그리드\n  characterGrid: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6',\n\n  // 🔥 캐릭터 카드 - 확장 가능\n  characterCard: 'group bg-white dark:bg-gray-800 rounded-xl border border-slate-200 dark:border-gray-700 hover:shadow-lg transition-all duration-200 overflow-hidden',\n  characterHeader: 'p-4 border-b border-slate-100 dark:border-gray-700',\n  characterAvatar: 'w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-bold text-lg mb-3',\n  characterName: 'font-bold text-lg text-gray-900 dark:text-gray-100 mb-1',\n  characterRole: 'text-sm text-blue-600 dark:text-blue-400 font-medium',\n\n  // 🔥 탭 시스템\n  tabContainer: 'flex border-b border-slate-100 dark:border-gray-700',\n  tab: 'px-3 py-2 text-sm font-medium text-slate-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 cursor-pointer transition-colors',\n  tabActive: 'text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400',\n\n  // 🔥 탭 콘텐츠\n  tabContent: 'p-4 space-y-3',\n  fieldGroup: 'space-y-2',\n  fieldLabel: 'text-xs font-medium text-slate-500 dark:text-gray-400 uppercase tracking-wide',\n  fieldValue: 'text-sm text-gray-700 dark:text-gray-300 leading-relaxed',\n  fieldEmpty: 'text-xs text-slate-400 dark:text-gray-500 italic',\n\n  // 🔥 액션 버튼\n  actionButtons: 'absolute top-3 right-3 flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity',\n  editButton: 'p-1.5 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-colors cursor-pointer',\n  deleteButton: 'p-1.5 text-gray-400 hover:text-red-600 dark:hover:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors cursor-pointer',\n\n  // 🔥 추가 버튼\n  addButton: 'group relative flex flex-col items-center justify-center gap-4 p-8 bg-white dark:bg-gray-800 border-2 border-dashed border-slate-300 dark:border-gray-600 rounded-xl hover:border-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/10 transition-all duration-200 cursor-pointer',\n  addButtonIcon: 'w-8 h-8 text-slate-400 group-hover:text-blue-500 dark:group-hover:text-blue-400 transition-colors group-hover:scale-110 transform',\n  addButtonText: 'text-base font-medium text-slate-600 dark:text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors',\n\n  // 🔥 편집 모달 오버레이\n  modalOverlay: 'fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4',\n  modal: 'bg-white dark:bg-gray-800 rounded-xl shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden',\n  modalHeader: 'p-6 border-b border-slate-200 dark:border-gray-700 flex items-center justify-between',\n  modalTitle: 'text-xl font-bold text-gray-900 dark:text-gray-100',\n  modalBody: 'p-6 overflow-y-auto max-h-[60vh]',\n  modalFooter: 'p-6 border-t border-slate-200 dark:border-gray-700 flex gap-3 justify-end',\n\n  // 🔥 폼 필드\n  formGrid: 'grid grid-cols-1 md:grid-cols-2 gap-4',\n  formField: 'space-y-2',\n  formLabel: 'text-sm font-medium text-gray-700 dark:text-gray-300',\n  formInput: 'w-full px-3 py-2 border border-slate-300 dark:border-gray-600 rounded-lg text-sm text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500',\n  formTextarea: 'w-full px-3 py-2 border border-slate-300 dark:border-gray-600 rounded-lg text-sm text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none',\n\n  // 🔥 버튼\n  button: 'px-4 py-2 rounded-lg font-medium transition-colors',\n  buttonPrimary: 'bg-blue-600 hover:bg-blue-700 text-white',\n  buttonSecondary: 'bg-slate-200 hover:bg-slate-300 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-700 dark:text-gray-200',\n\n  // 🔥 빈 상태\n  emptyState: 'flex flex-col items-center justify-center h-64 text-center',\n  emptyIcon: 'w-16 h-16 text-slate-400 dark:text-gray-500 mb-4',\n  emptyTitle: 'text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2',\n  emptyDescription: 'text-slate-600 dark:text-gray-400 max-w-md mx-auto leading-relaxed',\n} as const;\n\n// 🔥 탭 정의\nconst CHARACTER_TABS = [\n  { id: 'basic', label: '기본', icon: User },\n  { id: 'details', label: '상세', icon: BookOpen },\n  { id: 'story', label: '스토리', icon: Heart },\n] as const;\n\nexport function CharactersView({ projectId, characters, onCharactersChange }: CharactersViewProps): React.ReactElement {\n  const [activeTab, setActiveTab] = useState<Record<string, string>>({});\n  const [editingCharacter, setEditingCharacter] = useState<ProjectCharacter | null>(null);\n  const [editForm, setEditForm] = useState<Partial<ProjectCharacter>>({});\n\n  // 🔥 통계 계산\n  const stats = {\n    total: characters.length,\n    main: characters.filter(c => c.role?.includes('주인공') || c.role?.includes('주연')).length,\n    detailed: characters.filter(c => c.appearance && c.personality && c.background).length,\n  };\n\n  const handleAddCharacter = async (): Promise<void> => {\n    const newCharacter: ProjectCharacter = {\n      id: Date.now().toString(),\n      projectId,\n      name: '새 인물',\n      role: '역할 미정',\n      description: '인물에 대한 기본 설명을 추가하세요.',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    setEditingCharacter(newCharacter);\n    setEditForm(newCharacter);\n  };\n\n  const handleEditStart = (character: ProjectCharacter): void => {\n    setEditingCharacter(character);\n    setEditForm(character);\n  };\n\n  const handleEditSave = async (): Promise<void> => {\n    if (!editingCharacter || !editForm.name?.trim()) return;\n\n    try {\n      const characterToSave = {\n        ...editForm,\n        id: editingCharacter.id,\n        projectId,\n        updatedAt: new Date()\n      } as ProjectCharacter;\n\n      const result = await window.electronAPI.projects.upsertCharacter(characterToSave);\n\n      if (result.success && result.data) {\n        const updatedCharacters = editingCharacter.id === editForm.id\n          ? characters.map(char => char.id === editingCharacter.id ? result.data! : char)\n          : [...characters, result.data];\n\n        onCharactersChange(updatedCharacters);\n        setEditingCharacter(null);\n        setEditForm({});\n        Logger.info('CHARACTERS_VIEW', 'Character saved', { id: result.data.id });\n      }\n    } catch (error) {\n      Logger.error('CHARACTERS_VIEW', 'Failed to save character', error);\n      alert('캐릭터 저장에 실패했습니다.');\n    }\n  };\n\n  const handleEditCancel = (): void => {\n    setEditingCharacter(null);\n    setEditForm({});\n  };\n\n  const handleDelete = (id: string): void => {\n    if (confirm('이 캐릭터를 삭제하시겠습니까?')) {\n      const updatedCharacters = characters.filter(char => char.id !== id);\n      onCharactersChange(updatedCharacters);\n    }\n  };\n\n  const getTabForCharacter = (characterId: string): string => {\n    return activeTab[characterId] || 'basic';\n  };\n\n  const setTabForCharacter = (characterId: string, tab: string): void => {\n    setActiveTab(prev => ({ ...prev, [characterId]: tab }));\n  };\n\n  const renderTabContent = (character: ProjectCharacter, tab: string) => {\n    switch (tab) {\n      case 'basic':\n        return (\n          <div className={CHARACTERS_STYLES.tabContent}>\n            <div className={CHARACTERS_STYLES.fieldGroup}>\n              <div className={CHARACTERS_STYLES.fieldLabel}>역할</div>\n              <div className={CHARACTERS_STYLES.fieldValue}>\n                {character.role || <span className={CHARACTERS_STYLES.fieldEmpty}>역할을 설정해주세요</span>}\n              </div>\n            </div>\n            <div className={CHARACTERS_STYLES.fieldGroup}>\n              <div className={CHARACTERS_STYLES.fieldLabel}>설명</div>\n              <div className={CHARACTERS_STYLES.fieldValue}>\n                {character.description || <span className={CHARACTERS_STYLES.fieldEmpty}>캐릭터 설명을 추가해주세요</span>}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'details':\n        return (\n          <div className={CHARACTERS_STYLES.tabContent}>\n            <div className={CHARACTERS_STYLES.fieldGroup}>\n              <div className={CHARACTERS_STYLES.fieldLabel}>외모</div>\n              <div className={CHARACTERS_STYLES.fieldValue}>\n                {character.appearance || <span className={CHARACTERS_STYLES.fieldEmpty}>외모를 기록해주세요</span>}\n              </div>\n            </div>\n            <div className={CHARACTERS_STYLES.fieldGroup}>\n              <div className={CHARACTERS_STYLES.fieldLabel}>나이</div>\n              <div className={CHARACTERS_STYLES.fieldValue}>\n                {character.age || <span className={CHARACTERS_STYLES.fieldEmpty}>나이를 설정해주세요</span>}\n              </div>\n            </div>\n            <div className={CHARACTERS_STYLES.fieldGroup}>\n              <div className={CHARACTERS_STYLES.fieldLabel}>직업</div>\n              <div className={CHARACTERS_STYLES.fieldValue}>\n                {character.occupation || <span className={CHARACTERS_STYLES.fieldEmpty}>직업을 기록해주세요</span>}\n              </div>\n            </div>\n            <div className={CHARACTERS_STYLES.fieldGroup}>\n              <div className={CHARACTERS_STYLES.fieldLabel}>출신 / 거주지</div>\n              <div className={CHARACTERS_STYLES.fieldValue}>\n                {character.birthplace || character.residence ?\n                  `${character.birthplace || '미기록'} / ${character.residence || '미기록'}` :\n                  <span className={CHARACTERS_STYLES.fieldEmpty}>출신지와 거주지를 기록해주세요</span>\n                }\n              </div>\n            </div>\n            <div className={CHARACTERS_STYLES.fieldGroup}>\n              <div className={CHARACTERS_STYLES.fieldLabel}>가족</div>\n              <div className={CHARACTERS_STYLES.fieldValue}>\n                {character.family || <span className={CHARACTERS_STYLES.fieldEmpty}>가족 관계를 기록해주세요</span>}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'story':\n        return (\n          <div className={CHARACTERS_STYLES.tabContent}>\n            <div className={CHARACTERS_STYLES.fieldGroup}>\n              <div className={CHARACTERS_STYLES.fieldLabel}>성격</div>\n              <div className={CHARACTERS_STYLES.fieldValue}>\n                {character.personality || <span className={CHARACTERS_STYLES.fieldEmpty}>성격을 기록해주세요</span>}\n              </div>\n            </div>\n            <div className={CHARACTERS_STYLES.fieldGroup}>\n              <div className={CHARACTERS_STYLES.fieldLabel}>배경</div>\n              <div className={CHARACTERS_STYLES.fieldValue}>\n                {character.background || <span className={CHARACTERS_STYLES.fieldEmpty}>캐릭터 배경을 기록해주세요</span>}\n              </div>\n            </div>\n            <div className={CHARACTERS_STYLES.fieldGroup}>\n              <div className={CHARACTERS_STYLES.fieldLabel}>목표</div>\n              <div className={CHARACTERS_STYLES.fieldValue}>\n                {character.goals || <span className={CHARACTERS_STYLES.fieldEmpty}>캐릭터의 목표를 기록해주세요</span>}\n              </div>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className={CHARACTERS_STYLES.container}>\n      {/* 🔥 개선된 헤더 */}\n      <div className={CHARACTERS_STYLES.header}>\n        <div className={CHARACTERS_STYLES.headerTop}>\n          <div>\n            <h1 className={CHARACTERS_STYLES.title}>등장인물</h1>\n            <p className={CHARACTERS_STYLES.subtitle}>\n              이야기 속 캐릭터들의 상세한 프로필을 관리하세요.\n              체계적인 캐릭터 설정으로 더욱 생생한 스토리를 만들어보세요.\n            </p>\n          </div>\n        </div>\n\n        {/* 🔥 통계 카드 */}\n        <div className={CHARACTERS_STYLES.statsGrid}>\n          <div className={CHARACTERS_STYLES.statCard}>\n            <Users className={CHARACTERS_STYLES.statIcon} />\n            <div className={CHARACTERS_STYLES.statValue}>{stats.total}</div>\n            <div className={CHARACTERS_STYLES.statLabel}>총 인물</div>\n          </div>\n          <div className={CHARACTERS_STYLES.statCard}>\n            <BookOpen className={CHARACTERS_STYLES.statIcon} />\n            <div className={CHARACTERS_STYLES.statValue}>{stats.main}</div>\n            <div className={CHARACTERS_STYLES.statLabel}>주요 인물</div>\n          </div>\n          <div className={CHARACTERS_STYLES.statCard}>\n            <Heart className={CHARACTERS_STYLES.statIcon} />\n            <div className={CHARACTERS_STYLES.statValue}>{stats.detailed}</div>\n            <div className={CHARACTERS_STYLES.statLabel}>상세 설정</div>\n          </div>\n        </div>\n      </div>\n\n      {/* 🔥 캐릭터 목록 */}\n      <div className={CHARACTERS_STYLES.content}>\n        <div className={CHARACTERS_STYLES.scrollArea}>\n          <div className={CHARACTERS_STYLES.contentPadding}>\n            {characters.length === 0 ? (\n              // 빈 상태\n              <div className={CHARACTERS_STYLES.emptyState}>\n                <Users className={CHARACTERS_STYLES.emptyIcon} />\n                <h2 className={CHARACTERS_STYLES.emptyTitle}>첫 번째 인물을 만들어보세요</h2>\n                <p className={CHARACTERS_STYLES.emptyDescription}>\n                  매력적인 캐릭터들이 당신의 이야기를 더욱 생동감 있게 만들어줄 것입니다.\n                  주인공부터 조연까지, 각자의 특별한 이야기를 담아보세요.\n                </p>\n                <button\n                  onClick={handleAddCharacter}\n                  className={`${CHARACTERS_STYLES.button} ${CHARACTERS_STYLES.buttonPrimary} mt-6`}\n                >\n                  첫 인물 만들기\n                </button>\n              </div>\n            ) : (\n              <div className={CHARACTERS_STYLES.characterGrid}>\n                {characters.map((character) => {\n                  const currentTab = getTabForCharacter(character.id);\n\n                  // 🔥 편집 핸들러\n                  const handleCharacterClick = () => {\n                    handleEditStart(character);\n                  };\n\n                  const handleCharacterDoubleClick = () => {\n                    handleEditStart(character);\n                    Logger.info('CHARACTERS_VIEW', '더블클릭으로 편집 모드 활성화', { name: character.name });\n                  };\n\n                  return (\n                    <div\n                      key={character.id}\n                      className={CHARACTERS_STYLES.characterCard}\n                      onClick={handleCharacterClick}\n                      onDoubleClick={handleCharacterDoubleClick}\n                    >\n                      <div className=\"relative\">\n                        {/* 🔥 액션 버튼들 */}\n                        <div className={CHARACTERS_STYLES.actionButtons}>\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleEditStart(character);\n                            }}\n                            className={CHARACTERS_STYLES.editButton}\n                            title=\"편집\"\n                          >\n                            <Edit3 size={16} />\n                          </button>\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleDelete(character.id);\n                            }}\n                            className={CHARACTERS_STYLES.deleteButton}\n                            title=\"삭제\"\n                          >\n                            <XIcon size={16} />\n                          </button>\n                        </div>\n\n                        {/* 🔥 캐릭터 헤더 */}\n                        <div className={CHARACTERS_STYLES.characterHeader}>\n                          <div className={CHARACTERS_STYLES.characterAvatar}>\n                            {character.name.charAt(0)}\n                          </div>\n                          <h3 className={CHARACTERS_STYLES.characterName}>{character.name}</h3>\n                          <span className={CHARACTERS_STYLES.characterRole}>{character.role}</span>\n                        </div>\n\n                        {/* 🔥 탭 시스템 */}\n                        <div className={CHARACTERS_STYLES.tabContainer}>\n                          {CHARACTER_TABS.map(({ id, label, icon: Icon }) => (\n                            <button\n                              key={id}\n                              onClick={() => setTabForCharacter(character.id, id)}\n                              className={`${CHARACTERS_STYLES.tab} ${currentTab === id ? CHARACTERS_STYLES.tabActive : ''\n                                }`}\n                            >\n                              <Icon className=\"w-4 h-4 mr-1\" />\n                              {label}\n                            </button>\n                          ))}\n                        </div>\n\n                        {/* 🔥 탭 콘텐츠 */}\n                        {renderTabContent(character, currentTab)}\n                      </div>\n                    </div>\n                  );\n                })}\n\n                {/* 🔥 추가 버튼 */}\n                <button\n                  onClick={handleAddCharacter}\n                  className={CHARACTERS_STYLES.addButton}\n                >\n                  <Plus className={CHARACTERS_STYLES.addButtonIcon} />\n                  <span className={CHARACTERS_STYLES.addButtonText}>새 인물 추가</span>\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* 🔥 편집 모달 */}\n      {editingCharacter && (\n        <div className={CHARACTERS_STYLES.modalOverlay} onClick={handleEditCancel}>\n          <div className={CHARACTERS_STYLES.modal} onClick={(e) => e.stopPropagation()}>\n            <div className={CHARACTERS_STYLES.modalHeader}>\n              <h2 className={CHARACTERS_STYLES.modalTitle}>\n                {editingCharacter.id === editForm.id ? '캐릭터 편집' : '새 캐릭터'}\n              </h2>\n              <button onClick={handleEditCancel}>\n                <XIcon size={20} />\n              </button>\n            </div>\n\n            <div className={CHARACTERS_STYLES.modalBody}>\n              <div className={CHARACTERS_STYLES.formGrid}>\n                <div className={CHARACTERS_STYLES.formField}>\n                  <label className={CHARACTERS_STYLES.formLabel}>이름 *</label>\n                  <input\n                    type=\"text\"\n                    value={editForm.name || ''}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, name: e.target.value }))}\n                    className={CHARACTERS_STYLES.formInput}\n                    placeholder=\"캐릭터 이름\"\n                  />\n                </div>\n\n                <div className={CHARACTERS_STYLES.formField}>\n                  <label className={CHARACTERS_STYLES.formLabel}>역할</label>\n                  <input\n                    type=\"text\"\n                    value={editForm.role || ''}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, role: e.target.value }))}\n                    className={CHARACTERS_STYLES.formInput}\n                    placeholder=\"주인공, 조연, 악역 등\"\n                  />\n                </div>\n\n                <div className={CHARACTERS_STYLES.formField}>\n                  <label className={CHARACTERS_STYLES.formLabel}>나이</label>\n                  <input\n                    type=\"text\"\n                    value={editForm.age || ''}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, age: e.target.value }))}\n                    className={CHARACTERS_STYLES.formInput}\n                    placeholder=\"나이 또는 연령대\"\n                  />\n                </div>\n\n                <div className={CHARACTERS_STYLES.formField}>\n                  <label className={CHARACTERS_STYLES.formLabel}>직업</label>\n                  <input\n                    type=\"text\"\n                    value={editForm.occupation || ''}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, occupation: e.target.value }))}\n                    className={CHARACTERS_STYLES.formInput}\n                    placeholder=\"직업이나 역할\"\n                  />\n                </div>\n\n                <div className={CHARACTERS_STYLES.formField}>\n                  <label className={CHARACTERS_STYLES.formLabel}>출신</label>\n                  <input\n                    type=\"text\"\n                    value={editForm.birthplace || ''}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, birthplace: e.target.value }))}\n                    className={CHARACTERS_STYLES.formInput}\n                    placeholder=\"출생지\"\n                  />\n                </div>\n\n                <div className={CHARACTERS_STYLES.formField}>\n                  <label className={CHARACTERS_STYLES.formLabel}>거주지</label>\n                  <input\n                    type=\"text\"\n                    value={editForm.residence || ''}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, residence: e.target.value }))}\n                    className={CHARACTERS_STYLES.formInput}\n                    placeholder=\"현재 거주지\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"mt-4 space-y-4\">\n                <div className={CHARACTERS_STYLES.formField}>\n                  <label className={CHARACTERS_STYLES.formLabel}>외모</label>\n                  <textarea\n                    value={editForm.appearance || ''}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, appearance: e.target.value }))}\n                    className={CHARACTERS_STYLES.formTextarea}\n                    placeholder=\"키, 몸무게, 헤어스타일, 특징 등\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className={CHARACTERS_STYLES.formField}>\n                  <label className={CHARACTERS_STYLES.formLabel}>성격</label>\n                  <textarea\n                    value={editForm.personality || ''}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, personality: e.target.value }))}\n                    className={CHARACTERS_STYLES.formTextarea}\n                    placeholder=\"성격적 특징, 말투, 습관 등\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className={CHARACTERS_STYLES.formField}>\n                  <label className={CHARACTERS_STYLES.formLabel}>가족</label>\n                  <textarea\n                    value={editForm.family || ''}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, family: e.target.value }))}\n                    className={CHARACTERS_STYLES.formTextarea}\n                    placeholder=\"가족 구성원과 관계\"\n                    rows={2}\n                  />\n                </div>\n\n                <div className={CHARACTERS_STYLES.formField}>\n                  <label className={CHARACTERS_STYLES.formLabel}>배경</label>\n                  <textarea\n                    value={editForm.background || ''}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, background: e.target.value }))}\n                    className={CHARACTERS_STYLES.formTextarea}\n                    placeholder=\"과거 경험, 중요한 사건 등\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className={CHARACTERS_STYLES.formField}>\n                  <label className={CHARACTERS_STYLES.formLabel}>설명</label>\n                  <textarea\n                    value={editForm.description || ''}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, description: e.target.value }))}\n                    className={CHARACTERS_STYLES.formTextarea}\n                    placeholder=\"캐릭터에 대한 전반적인 설명\"\n                    rows={3}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className={CHARACTERS_STYLES.modalFooter}>\n              <button\n                onClick={handleEditCancel}\n                className={`${CHARACTERS_STYLES.button} ${CHARACTERS_STYLES.buttonSecondary}`}\n              >\n                취소\n              </button>\n              <button\n                onClick={handleEditSave}\n                className={`${CHARACTERS_STYLES.button} ${CHARACTERS_STYLES.buttonPrimary}`}\n              >\n                저장\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8282, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/views/NotesView.tsx"],"sourcesContent":["'use client';\n\n// 🔥 기가차드 노트 뷰 - 드래그, 크기조절, 타입별 생성 완전 개선\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { ProjectNote } from '../../../../shared/types';\nimport { Plus, Edit3, Save, X as XIcon, Lightbulb, Target, BookOpen, StickyNote, Palette, Move, Maximize2 } from 'lucide-react';\nimport { Logger } from '../../../../shared/logger';\nimport { useLongPress } from '../../../hooks/useLongPress';\n\ninterface NotesViewProps {\n  projectId: string;\n  notes?: ProjectNote[];\n  onNotesChange?: (notes: ProjectNote[]) => void;\n}\n\ninterface NotePosition {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\n// 🔥 기가차드 작가 친화적 노트 스타일\nconst NOTES_STYLES = {\n  container: 'flex-1 overflow-hidden bg-gradient-to-br from-slate-50 to-white dark:from-gray-900 dark:to-gray-800',\n\n  // 🔥 개선된 헤더\n  header: 'p-6 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-slate-200/50 dark:border-gray-700/50',\n  headerTop: 'flex items-center justify-between mb-4',\n  title: 'text-2xl font-bold text-gray-900 dark:text-gray-100',\n  subtitle: 'text-slate-600 dark:text-gray-400 leading-relaxed',\n\n  // 🔥 통계 카드\n  statsGrid: 'grid grid-cols-4 gap-4 mt-4',\n  statCard: 'p-3 bg-white dark:bg-gray-800 rounded-lg border border-slate-200 dark:border-gray-700',\n  statIcon: 'w-5 h-5 text-blue-600 dark:text-blue-400 mb-2',\n  statValue: 'text-lg font-semibold text-gray-900 dark:text-gray-100',\n  statLabel: 'text-xs text-slate-600 dark:text-gray-400',\n\n  // 🔥 컨텐츠 영역\n  content: 'flex-1 relative overflow-hidden',\n\n  // 🔥 개선된 타입 필터\n  typeButtons: 'flex gap-3 mb-6 flex-wrap',\n  typeButton: 'flex items-center gap-2 px-4 py-2 text-sm font-medium border border-slate-200 dark:border-gray-700 rounded-full hover:bg-slate-100 dark:hover:bg-gray-700 transition-all duration-200 hover:scale-105 cursor-pointer',\n  typeButtonActive: 'bg-gradient-to-r from-blue-500 to-blue-600 text-white border-blue-600 hover:from-blue-600 hover:to-blue-700 shadow-md',\n\n  // 🔥 캔버스 영역 (드래그 가능)\n  canvas: 'absolute inset-0 overflow-auto p-6',\n\n  // 🔥 개선된 노트 카드 (드래그 가능, 크기 조절 가능)\n  noteCard: 'absolute group select-none bg-gradient-to-br shadow-lg rounded-xl border-2 transition-all duration-200 cursor-move',\n  noteCardIdea: 'from-yellow-100 to-yellow-200 dark:from-yellow-900/30 dark:to-yellow-800/30 border-yellow-300 dark:border-yellow-700',\n  noteCardGoal: 'from-green-100 to-green-200 dark:from-green-900/30 dark:to-green-800/30 border-green-300 dark:border-green-700',\n  noteCardReference: 'from-blue-100 to-blue-200 dark:from-blue-900/30 dark:to-blue-800/30 border-blue-300 dark:border-blue-700',\n  noteCardHover: 'hover:shadow-xl hover:scale-105 hover:z-10',\n\n  // 🔥 노트 헤더\n  noteHeader: 'flex items-center justify-between p-4 border-b border-current/20',\n  noteIcon: 'w-5 h-5 mr-2',\n  noteTitle: 'font-bold text-gray-900 dark:text-gray-100 flex-1 text-sm',\n  noteActions: 'flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity',\n\n  // 🔥 노트 컨텐츠\n  noteContent: 'p-4 text-gray-700 dark:text-gray-300 text-xs leading-relaxed overflow-hidden',\n  noteDate: 'text-xs text-gray-500 dark:text-gray-500 px-4 pb-3 font-medium',\n\n  // 🔥 크기 조절 핸들\n  resizeHandle: 'absolute bottom-0 right-0 w-4 h-4 cursor-se-resize opacity-0 group-hover:opacity-100 transition-opacity',\n  resizeIcon: 'w-3 h-3 text-gray-400',\n\n  // 🔥 개선된 추가 버튼들\n  addButtonsContainer: 'absolute bottom-6 right-6 flex flex-col gap-3',\n  addButton: 'group relative flex items-center gap-3 px-4 py-3 bg-white dark:bg-gray-800 border-2 border-dashed border-slate-300 dark:border-gray-600 rounded-xl hover:border-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/10 transition-all duration-200 cursor-pointer shadow-lg hover:shadow-xl',\n  addButtonIcon: 'w-5 h-5 text-slate-400 group-hover:text-blue-500 dark:group-hover:text-blue-400 transition-colors',\n  addButtonText: 'text-sm font-medium text-slate-600 dark:text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors',\n\n  // 🔥 편집 버튼 개선\n  editButton: 'relative z-10 p-1.5 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-colors cursor-pointer',\n  saveButton: 'relative z-10 p-1.5 text-gray-400 hover:text-green-600 dark:hover:text-green-400 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-lg transition-colors cursor-pointer',\n  cancelButton: 'relative z-10 p-1.5 text-gray-400 hover:text-red-600 dark:hover:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors cursor-pointer',\n\n  // 🔥 편집 인풋\n  editInput: 'w-full px-2 py-1 text-xs border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-1 focus:ring-blue-500',\n  editTextarea: 'w-full px-2 py-1 text-xs border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-1 focus:ring-blue-500 resize-none',\n\n  // 🔥 빈 상태\n  emptyState: 'absolute inset-0 flex flex-col items-center justify-center text-center',\n  emptyIcon: 'w-16 h-16 text-slate-400 dark:text-gray-500 mb-4',\n  emptyTitle: 'text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2',\n  emptyDescription: 'text-slate-600 dark:text-gray-400 max-w-md mx-auto leading-relaxed',\n} as const;\n\n// 기본 메모 데이터\nconst DEFAULT_NOTES: ProjectNote[] = [];\n\nconst NOTE_TYPES = [\n  { id: 'all', label: '전체', icon: StickyNote },\n  { id: 'idea', label: '아이디어', icon: Lightbulb },\n  { id: 'goal', label: '목표', icon: Target },\n  { id: 'reference', label: '참고', icon: BookOpen },\n];\n\nconst NOTE_TYPE_STYLES = {\n  idea: NOTES_STYLES.noteCardIdea,\n  goal: NOTES_STYLES.noteCardGoal,\n  reference: NOTES_STYLES.noteCardReference,\n};\n\nexport function NotesView({ projectId, notes: propNotes, onNotesChange }: NotesViewProps): React.ReactElement {\n  const [notes, setNotes] = useState<(ProjectNote & { position?: NotePosition })[]>(\n    (propNotes || DEFAULT_NOTES).map((note, index) => ({\n      ...note,\n      projectId,\n      position: {\n        x: 50 + (index % 3) * 250,\n        y: 50 + Math.floor(index / 3) * 200,\n        width: 240,\n        height: 180\n      }\n    }))\n  );\n  const [selectedType, setSelectedType] = useState<string>('all');\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editForm, setEditForm] = useState<Partial<ProjectNote>>({});\n  const [dragData, setDragData] = useState<{ id: string; startX: number; startY: number; startMouseX: number; startMouseY: number } | null>(null);\n  const [resizeData, setResizeData] = useState<{ id: string; startWidth: number; startHeight: number; startMouseX: number; startMouseY: number } | null>(null);\n\n  const canvasRef = useRef<HTMLDivElement>(null);\n\n  // 🔥 노트 편집 핸들러들\n  const handleEditNote = useCallback((noteId: string) => {\n    const note = notes.find(n => n.id === noteId);\n    if (note) {\n      setEditingId(noteId);\n      setEditForm(note);\n    }\n  }, [notes]);\n\n  const handleLongPressEdit = useCallback((noteId: string) => {\n    handleEditNote(noteId);\n    Logger.info('NOTES_VIEW', '🔥 롱프레스로 편집 모드 활성화', { noteId });\n  }, [handleEditNote]);\n\n  // 🔥 통계 계산\n  const stats = {\n    total: notes.length,\n    ideas: notes.filter(note => note.type === 'idea').length,\n    goals: notes.filter(note => note.type === 'goal').length,\n    references: notes.filter(note => note.type === 'reference').length,\n  };\n\n  // 🔥 필터링된 노트\n  const filteredNotes = selectedType === 'all'\n    ? notes\n    : notes.filter(note => note.type === selectedType);\n\n  // 🔥 새 노트 추가 (타입별)\n  const handleAddNote = useCallback((type: 'idea' | 'goal' | 'reference') => {\n    const newNote = {\n      id: Date.now().toString(),\n      projectId,\n      title: type === 'idea' ? '새 아이디어' : type === 'goal' ? '새 목표' : '새 참고사항',\n      content: type === 'idea' ? '떠오른 아이디어를 기록하세요...' :\n        type === 'goal' ? '달성하고 싶은 목표를 설정하세요...' :\n          '참고할 자료나 정보를 기록하세요...',\n      type,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      position: {\n        x: Math.random() * 300 + 50,\n        y: Math.random() * 200 + 50,\n        width: 240,\n        height: 180\n      }\n    };\n\n    const updatedNotes = [...notes, newNote];\n    setNotes(updatedNotes);\n    onNotesChange?.(updatedNotes);\n\n    // 바로 편집 모드로 진입\n    setEditingId(newNote.id);\n    setEditForm(newNote);\n    Logger.info('NOTES_VIEW', 'New note added', { id: newNote.id, type });\n  }, [notes, projectId, onNotesChange]);\n\n  // 🔥 드래그 시작\n  const handleMouseDown = useCallback((e: React.MouseEvent, noteId: string) => {\n    if ((e.target as HTMLElement).closest('.resize-handle')) return;\n\n    const note = notes.find(n => n.id === noteId);\n    if (!note?.position) return;\n\n    setDragData({\n      id: noteId,\n      startX: note.position.x,\n      startY: note.position.y,\n      startMouseX: e.clientX,\n      startMouseY: e.clientY\n    });\n  }, [notes]);\n\n  // 🔥 크기 조절 시작\n  const handleResizeStart = useCallback((e: React.MouseEvent, noteId: string) => {\n    e.stopPropagation();\n\n    const note = notes.find(n => n.id === noteId);\n    if (!note?.position) return;\n\n    setResizeData({\n      id: noteId,\n      startWidth: note.position.width,\n      startHeight: note.position.height,\n      startMouseX: e.clientX,\n      startMouseY: e.clientY\n    });\n  }, [notes]);\n\n  // 🔥 마우스 이동 처리\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (dragData) {\n      const deltaX = e.clientX - dragData.startMouseX;\n      const deltaY = e.clientY - dragData.startMouseY;\n\n      setNotes(prev => prev.map(note =>\n        note.id === dragData.id && note.position\n          ? {\n            ...note,\n            position: {\n              ...note.position,\n              x: Math.max(0, dragData.startX + deltaX),\n              y: Math.max(0, dragData.startY + deltaY)\n            }\n          }\n          : note\n      ));\n    }\n\n    if (resizeData) {\n      const deltaX = e.clientX - resizeData.startMouseX;\n      const deltaY = e.clientY - resizeData.startMouseY;\n\n      setNotes(prev => prev.map(note =>\n        note.id === resizeData.id && note.position\n          ? {\n            ...note,\n            position: {\n              ...note.position,\n              width: Math.max(200, resizeData.startWidth + deltaX),\n              height: Math.max(150, resizeData.startHeight + deltaY)\n            }\n          }\n          : note\n      ));\n    }\n  }, [dragData, resizeData]);\n\n  // 🔥 마우스 업 처리\n  const handleMouseUp = useCallback(() => {\n    if (dragData || resizeData) {\n      onNotesChange?.(notes);\n    }\n    setDragData(null);\n    setResizeData(null);\n  }, [dragData, resizeData, notes, onNotesChange]);\n\n  // 🔥 이벤트 리스너 등록\n  React.useEffect(() => {\n    if (dragData || resizeData) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [dragData, resizeData, handleMouseMove, handleMouseUp]);\n\n  // 🔥 편집 관련 함수들\n  const handleEditStart = useCallback((note: ProjectNote) => {\n    setEditingId(note.id);\n    setEditForm(note);\n  }, []);\n\n  const handleEditSave = useCallback(() => {\n    if (editingId && editForm) {\n      const updatedNotes = notes.map(note =>\n        note.id === editingId\n          ? { ...note, ...editForm, updatedAt: new Date() }\n          : note\n      );\n      setNotes(updatedNotes);\n      onNotesChange?.(updatedNotes);\n      setEditingId(null);\n      setEditForm({});\n    }\n  }, [editingId, editForm, notes, onNotesChange]);\n\n  const handleEditCancel = useCallback(() => {\n    setEditingId(null);\n    setEditForm({});\n  }, []);\n\n  const handleDelete = useCallback((id: string) => {\n    const updatedNotes = notes.filter(note => note.id !== id);\n    setNotes(updatedNotes);\n    onNotesChange?.(updatedNotes);\n  }, [notes, onNotesChange]);\n\n  return (\n    <div className={NOTES_STYLES.container}>\n      {/* 🔥 개선된 헤더 */}\n      <div className={NOTES_STYLES.header}>\n        <div className={NOTES_STYLES.headerTop}>\n          <div>\n            <h1 className={NOTES_STYLES.title}>창작 노트</h1>\n            <p className={NOTES_STYLES.subtitle}>\n              아이디어, 목표, 참고사항을 자유롭게 배치하고 관리하세요.\n              드래그로 위치를 조정하고 크기를 조절할 수 있습니다.\n            </p>\n          </div>\n        </div>\n\n        {/* 🔥 통계 카드 */}\n        <div className={NOTES_STYLES.statsGrid}>\n          <div className={NOTES_STYLES.statCard}>\n            <StickyNote className={NOTES_STYLES.statIcon} />\n            <div className={NOTES_STYLES.statValue}>{stats.total}</div>\n            <div className={NOTES_STYLES.statLabel}>총 노트</div>\n          </div>\n          <div className={NOTES_STYLES.statCard}>\n            <Lightbulb className={NOTES_STYLES.statIcon} />\n            <div className={NOTES_STYLES.statValue}>{stats.ideas}</div>\n            <div className={NOTES_STYLES.statLabel}>아이디어</div>\n          </div>\n          <div className={NOTES_STYLES.statCard}>\n            <Target className={NOTES_STYLES.statIcon} />\n            <div className={NOTES_STYLES.statValue}>{stats.goals}</div>\n            <div className={NOTES_STYLES.statLabel}>목표</div>\n          </div>\n          <div className={NOTES_STYLES.statCard}>\n            <BookOpen className={NOTES_STYLES.statIcon} />\n            <div className={NOTES_STYLES.statValue}>{stats.references}</div>\n            <div className={NOTES_STYLES.statLabel}>참고</div>\n          </div>\n        </div>\n\n        {/* 🔥 타입 필터 */}\n        <div className={NOTES_STYLES.typeButtons}>\n          {NOTE_TYPES.map(({ id, label, icon: Icon }) => (\n            <button\n              key={id}\n              onClick={() => setSelectedType(id)}\n              className={`${NOTES_STYLES.typeButton} ${selectedType === id ? NOTES_STYLES.typeButtonActive : ''\n                }`}\n            >\n              <Icon className=\"w-4 h-4\" />\n              <span>{label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* 🔥 캔버스 영역 */}\n      <div className={NOTES_STYLES.content}>\n        <div ref={canvasRef} className={NOTES_STYLES.canvas}>\n          {filteredNotes.length === 0 ? (\n            // 빈 상태\n            <div className={NOTES_STYLES.emptyState}>\n              <StickyNote className={NOTES_STYLES.emptyIcon} />\n              <h2 className={NOTES_STYLES.emptyTitle}>\n                {selectedType === 'all' ? '첫 번째 노트를 만들어보세요' : `${NOTE_TYPES.find(t => t.id === selectedType)?.label} 노트를 추가해보세요`}\n              </h2>\n              <p className={NOTES_STYLES.emptyDescription}>\n                창작 과정에서 떠오르는 아이디어나 중요한 정보들을\n                자유롭게 배치할 수 있는 캔버스입니다.\n              </p>\n            </div>\n          ) : (\n            // 노트들\n            filteredNotes.map((note) => {\n              const isEditing = editingId === note.id;\n              const position = note.position || { x: 50, y: 50, width: 240, height: 180 };\n              const Icon = note.type === 'idea' ? Lightbulb : note.type === 'goal' ? Target : BookOpen;\n              const noteTypeStyle = NOTE_TYPE_STYLES[note.type as keyof typeof NOTE_TYPE_STYLES];\n\n              // 🔥 드래그 및 편집 핸들러\n              const handleNoteClick = () => {\n                setEditingId(note.id);\n                setEditForm(note);\n              };\n\n              const handleNoteDoubleClick = () => {\n                handleLongPressEdit(note.id);\n              };\n\n              return (\n                <div\n                  key={note.id}\n                  className={`${NOTES_STYLES.noteCard} ${noteTypeStyle} ${NOTES_STYLES.noteCardHover}`}\n                  style={{\n                    left: position.x,\n                    top: position.y,\n                    width: position.width,\n                    height: position.height,\n                    zIndex: dragData?.id === note.id ? 1000 : 1\n                  }}\n                  onClick={handleNoteClick}\n                  onDoubleClick={handleNoteDoubleClick}\n                  onMouseDown={(e) => {\n                    handleMouseDown(e, note.id);\n                  }}\n                >\n                  {/* 헤더 */}\n                  <div className={NOTES_STYLES.noteHeader}>\n                    <div className=\"flex items-center flex-1\">\n                      <Icon className={NOTES_STYLES.noteIcon} />\n                      {isEditing ? (\n                        <input\n                          type=\"text\"\n                          value={editForm.title || ''}\n                          onChange={(e) => setEditForm(prev => ({ ...prev, title: e.target.value }))}\n                          className={NOTES_STYLES.editInput}\n                          onClick={(e) => e.stopPropagation()}\n                        />\n                      ) : (\n                        <span className={NOTES_STYLES.noteTitle}>{note.title}</span>\n                      )}\n                    </div>\n\n                    <div className={NOTES_STYLES.noteActions}>\n                      {isEditing ? (\n                        <>\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleEditSave();\n                            }}\n                            className={NOTES_STYLES.saveButton}\n                          >\n                            <Save size={12} />\n                          </button>\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleEditCancel();\n                            }}\n                            className={NOTES_STYLES.cancelButton}\n                          >\n                            <XIcon size={12} />\n                          </button>\n                        </>\n                      ) : (\n                        <>\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleEditStart(note);\n                            }}\n                            className={NOTES_STYLES.editButton}\n                          >\n                            <Edit3 size={12} />\n                          </button>\n                          <button\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleDelete(note.id);\n                            }}\n                            className={NOTES_STYLES.cancelButton}\n                          >\n                            <XIcon size={12} />\n                          </button>\n                        </>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* 컨텐츠 */}\n                  <div className={NOTES_STYLES.noteContent}>\n                    {isEditing ? (\n                      <textarea\n                        value={editForm.content || ''}\n                        onChange={(e) => setEditForm(prev => ({ ...prev, content: e.target.value }))}\n                        className={NOTES_STYLES.editTextarea}\n                        rows={6}\n                        onClick={(e) => e.stopPropagation()}\n                      />\n                    ) : (\n                      <div>{note.content}</div>\n                    )}\n                  </div>\n\n                  {/* 날짜 */}\n                  <div className={NOTES_STYLES.noteDate}>\n                    {note.updatedAt.toLocaleDateString()}\n                  </div>\n\n                  {/* 크기 조절 핸들 */}\n                  <div\n                    className={`${NOTES_STYLES.resizeHandle} resize-handle`}\n                    onMouseDown={(e) => handleResizeStart(e, note.id)}\n                  >\n                    <Maximize2 className={NOTES_STYLES.resizeIcon} />\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n\n        {/* 🔥 추가 버튼들 */}\n        <div className={NOTES_STYLES.addButtonsContainer}>\n          <button\n            onClick={() => handleAddNote('idea')}\n            className={NOTES_STYLES.addButton}\n          >\n            <Lightbulb className={NOTES_STYLES.addButtonIcon} />\n            <span className={NOTES_STYLES.addButtonText}>아이디어</span>\n          </button>\n          <button\n            onClick={() => handleAddNote('goal')}\n            className={NOTES_STYLES.addButton}\n          >\n            <Target className={NOTES_STYLES.addButtonIcon} />\n            <span className={NOTES_STYLES.addButtonText}>목표</span>\n          </button>\n          <button\n            onClick={() => handleAddNote('reference')}\n            className={NOTES_STYLES.addButton}\n          >\n            <BookOpen className={NOTES_STYLES.addButtonIcon} />\n            <span className={NOTES_STYLES.addButtonText}>참고</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9171, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/views/SynopsisView.tsx"],"sourcesContent":["'use client';\n\n// 🔥 시놉시스 편집 뷰 - 타임라인 + 카드 시스템\n\nimport React, { useState, useCallback } from 'react';\nimport { useLongPress } from '../../../hooks/useLongPress';\nimport { Logger } from '../../../../shared/logger';\nimport {\n    Plus,\n    Edit3,\n    Trash2,\n    Clock,\n    Target,\n    Zap,\n    Heart,\n    Users,\n    MapPin,\n    ArrowRight,\n    MoreHorizontal,\n    Save,\n    X as XIcon,\n    ChevronLeft,\n    ChevronRight,\n    Workflow,\n    FileText,\n    Eye\n} from 'lucide-react'; interface PlotPoint {\n    id: string;\n    act: 1 | 2 | 3;\n    title: string;\n    description: string;\n    type: 'setup' | 'conflict' | 'resolution' | 'twist' | 'climax';\n    characters: string[];\n    location?: string;\n    notes?: string;\n    order: number;\n}\n\ninterface SynopsisViewProps {\n    synopsisId: string;\n    onBack: () => void;\n}\n\n// 🔥 3막 구조 템플릿\nconst ACT_TEMPLATES = {\n    1: { title: 'Act 1: 설정', color: 'from-green-500 to-emerald-600', description: '인물, 배경, 상황 소개' },\n    2: { title: 'Act 2: 전개', color: 'from-blue-500 to-indigo-600', description: '갈등 발생과 전개' },\n    3: { title: 'Act 3: 해결', color: 'from-purple-500 to-violet-600', description: '클라이맥스와 결말' }\n} as const;\n\n// 🔥 플롯 타입별 스타일\nconst PLOT_TYPE_STYLES = {\n    setup: { icon: MapPin, color: 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300' },\n    conflict: { icon: Zap, color: 'bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300' },\n    resolution: { icon: Target, color: 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300' },\n    twist: { icon: MoreHorizontal, color: 'bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300' },\n    climax: { icon: Zap, color: 'bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300' }\n} as const;\n\n// 🔥 스타일 정의\nconst SYNOPSIS_STYLES = {\n    container: 'flex flex-col h-full bg-gradient-to-br from-slate-50 to-white dark:from-gray-900 dark:to-gray-800',\n\n    // 🔥 헤더\n    header: 'flex-shrink-0 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border-b border-slate-200 dark:border-gray-700 p-4',\n    headerContent: 'flex items-center justify-between',\n    backButton: 'flex items-center gap-2 px-3 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors',\n    title: 'text-xl font-bold text-gray-900 dark:text-gray-100',\n    actions: 'flex items-center gap-2',\n    actionButton: 'p-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors',\n\n    // 🔥 메인 컨텐츠\n    content: 'flex-1 min-h-0 overflow-hidden',\n    timeline: 'h-full overflow-y-auto p-6',    // 🔥 3막 구조\n    actsContainer: 'space-y-8',\n    actSection: 'bg-white dark:bg-gray-800 rounded-xl border border-slate-200 dark:border-gray-700 overflow-hidden',\n    actHeader: 'p-4 bg-gradient-to-r text-white',\n    actTitle: 'text-lg font-bold',\n    actDescription: 'text-sm opacity-90 mt-1',\n    actContent: 'p-4',\n\n    // 🔥 플롯 포인트\n    plotPoints: 'space-y-3',\n    plotPoint: 'group bg-slate-50 dark:bg-gray-700/50 rounded-lg p-4 border border-slate-200 dark:border-gray-600 hover:bg-slate-100 dark:hover:bg-gray-700 transition-colors cursor-pointer',\n    plotHeader: 'flex items-start justify-between',\n    plotInfo: 'flex-1',\n    plotTitle: 'font-semibold text-gray-900 dark:text-gray-100 group-hover:text-blue-600 dark:group-hover:text-blue-400',\n    plotDescription: 'text-sm text-gray-600 dark:text-gray-400 mt-1 line-clamp-2',\n    plotMeta: 'flex items-center gap-3 mt-2 text-xs text-gray-500 dark:text-gray-400',\n    plotType: 'inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium',\n    plotActions: 'opacity-0 group-hover:opacity-100 transition-opacity flex gap-1',\n\n    // 🔥 추가 버튼\n    addButton: 'w-full mt-3 p-3 border-2 border-dashed border-slate-300 dark:border-gray-600 rounded-lg text-slate-600 dark:text-gray-400 hover:border-blue-400 hover:text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors flex items-center justify-center gap-2 text-sm',\n\n    // 🔥 편집 모달\n    modal: 'fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50',\n    modalContent: 'bg-white dark:bg-gray-800 rounded-xl border border-slate-200 dark:border-gray-700 shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden',\n    modalHeader: 'flex items-center justify-between p-4 border-b border-slate-200 dark:border-gray-700',\n    modalTitle: 'text-lg font-semibold text-gray-900 dark:text-gray-100',\n    modalBody: 'p-4 overflow-y-auto',\n    modalFooter: 'flex items-center justify-end gap-2 p-4 border-t border-slate-200 dark:border-gray-700',\n\n    // 🔥 폼 스타일\n    formGroup: 'mb-4',\n    label: 'block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2',\n    input: 'w-full px-3 py-2 border border-slate-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500',\n    textarea: 'w-full px-3 py-2 border border-slate-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none',\n    select: 'w-full px-3 py-2 border border-slate-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500',\n\n    button: 'px-4 py-2 rounded-lg font-medium transition-colors',\n    primaryButton: 'bg-blue-600 hover:bg-blue-700 text-white',\n    secondaryButton: 'bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-900 dark:text-gray-100',\n} as const;\n\nexport function SynopsisView({ synopsisId, onBack }: SynopsisViewProps): React.ReactElement {\n    // 🔥 상태 관리 - localStorage에서 데이터 복원\n    const [plotPoints, setPlotPoints] = useState<PlotPoint[]>(() => {\n        try {\n            const saved = localStorage.getItem(`synopsis_${synopsisId}`);\n            if (saved) {\n                const parsed = JSON.parse(saved);\n                return parsed.map((plot: {\n                    id: string;\n                    title: string;\n                    description: string;\n                    type: string;\n                    importance: string;\n                    characters: string[];\n                    notes: string;\n                    createdAt: string;\n                    updatedAt: string;\n                }) => ({\n                    ...plot,\n                    createdAt: new Date(plot.createdAt),\n                    updatedAt: new Date(plot.updatedAt)\n                }));\n            }\n        } catch (error) {\n            Logger.error('SYNOPSIS_VIEW', 'Failed to load synopsis from localStorage', { error });\n        }\n\n        // 기본 mock 데이터\n        return [\n            {\n                id: '1',\n                act: 1,\n                title: '주인공 소개',\n                description: '평범한 일상을 보내는 주인공의 모습을 보여준다. 성격과 배경을 자연스럽게 드러낸다.',\n                type: 'setup',\n                characters: ['주인공'],\n                location: '주인공의 집',\n                order: 1,\n                duration: undefined,\n                notes: undefined,\n                importance: 'medium' as const,\n                createdAt: new Date('2024-01-10'),\n                updatedAt: new Date('2024-01-15')\n            },\n            {\n                id: '2',\n                act: 1,\n                title: '사건의 시작',\n                description: '평범한 일상을 깨뜨리는 중요한 사건이 발생한다. 주인공이 선택해야 할 기로에 선다.',\n                type: 'conflict',\n                characters: ['주인공', '조력자'],\n                location: '사건 현장',\n                order: 2,\n                duration: undefined,\n                notes: undefined,\n                importance: 'high' as const,\n                createdAt: new Date('2024-01-11'),\n                updatedAt: new Date('2024-01-16')\n            },\n            {\n                id: '3',\n                act: 2,\n                title: '첫 번째 시련',\n                description: '주인공이 목표를 향해 나아가면서 겪는 첫 번째 큰 어려움. 실패와 좌절을 경험한다.',\n                type: 'conflict',\n                characters: ['주인공', '적대자'],\n                location: '시련의 장소',\n                order: 3,\n                duration: undefined,\n                notes: undefined,\n                importance: 'medium' as const,\n                createdAt: new Date('2024-01-12'),\n                updatedAt: new Date('2024-01-17')\n            }\n        ];\n    });\n\n    // 🔥 데이터 저장 함수\n    const saveToLocalStorage = useCallback((newPlots: PlotPoint[]) => {\n        try {\n            localStorage.setItem(`synopsis_${synopsisId}`, JSON.stringify(newPlots));\n        } catch (error) {\n            Logger.error('SYNOPSIS_VIEW', 'Failed to save synopsis to localStorage', { error });\n        }\n    }, [synopsisId]);\n\n    // 🔥 자동 저장이 포함된 setPlotPoints 래퍼\n    const updatePlotPoints = useCallback((newPlots: PlotPoint[] | ((prev: PlotPoint[]) => PlotPoint[])) => {\n        if (typeof newPlots === 'function') {\n            setPlotPoints(prev => {\n                const updated = newPlots(prev);\n                saveToLocalStorage(updated);\n                return updated;\n            });\n        } else {\n            setPlotPoints(newPlots);\n            saveToLocalStorage(newPlots);\n        }\n    }, [saveToLocalStorage]);\n\n    const [viewMode, setViewMode] = useState<'timeline' | 'outline' | 'mindmap'>('timeline');\n    const [editingPlot, setEditingPlot] = useState<PlotPoint | null>(null);\n    const [showAddModal, setShowAddModal] = useState<{ show: boolean; act?: 1 | 2 | 3 }>({ show: false });\n\n    // 🔥 플롯 포인트 생성\n    const createPlotPoint = useCallback((act: 1 | 2 | 3) => {\n        const newPlot: PlotPoint = {\n            id: Date.now().toString(),\n            act,\n            title: '새 플롯 포인트',\n            description: '',\n            type: 'setup',\n            characters: [],\n            order: plotPoints.filter(p => p.act === act).length + 1\n        };\n        setEditingPlot(newPlot);\n        setShowAddModal({ show: true, act });\n    }, [plotPoints]);\n\n    // 🔥 플롯 포인트 저장\n    const savePlotPoint = useCallback(() => {\n        if (!editingPlot) return;\n\n        if (showAddModal.show) {\n            setPlotPoints(prev => [...prev, editingPlot]);\n        } else {\n            setPlotPoints(prev => prev.map(p => p.id === editingPlot.id ? editingPlot : p));\n        }\n\n        setEditingPlot(null);\n        setShowAddModal({ show: false });\n    }, [editingPlot, showAddModal.show]);\n\n    // 🔥 플롯 포인트 삭제\n    const deletePlotPoint = useCallback((id: string) => {\n        setPlotPoints(prev => prev.filter(p => p.id !== id));\n    }, []);\n\n    // 🔥 막별 플롯 포인트 필터링\n    const getPlotPointsByAct = useCallback((act: 1 | 2 | 3) => {\n        return plotPoints.filter(p => p.act === act).sort((a, b) => a.order - b.order);\n    }, [plotPoints]);\n\n    return (\n        <div className={SYNOPSIS_STYLES.container}>\n            {/* 🔥 헤더 */}\n            <div className={SYNOPSIS_STYLES.header}>\n                <div className={SYNOPSIS_STYLES.headerContent}>\n                    <button\n                        onClick={onBack}\n                        className={SYNOPSIS_STYLES.backButton}\n                    >\n                        <ChevronLeft size={20} />\n                        <span>구조로 돌아가기</span>\n                    </button>\n\n                    <h1 className={SYNOPSIS_STYLES.title}>시놉시스 편집</h1>\n\n                    <div className={SYNOPSIS_STYLES.actions}>\n                        <div className=\"flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1 mr-3\">\n                            <button\n                                onClick={() => setViewMode('timeline')}\n                                className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${viewMode === 'timeline'\n                                    ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-gray-100 shadow-sm'\n                                    : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100'\n                                    }`}\n                                title=\"타임라인 뷰\"\n                            >\n                                <Clock size={16} className=\"mr-1.5 inline\" />\n                                타임라인\n                            </button>\n                            <button\n                                onClick={() => setViewMode('outline')}\n                                className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${viewMode === 'outline'\n                                    ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-gray-100 shadow-sm'\n                                    : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100'\n                                    }`}\n                                title=\"아웃라인 뷰\"\n                            >\n                                <FileText size={16} className=\"mr-1.5 inline\" />\n                                아웃라인\n                            </button>\n                            <button\n                                onClick={() => setViewMode('mindmap')}\n                                className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${viewMode === 'mindmap'\n                                    ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-gray-100 shadow-sm'\n                                    : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100'\n                                    }`}\n                                title=\"마인드맵 뷰\"\n                            >\n                                <Workflow size={16} className=\"mr-1.5 inline\" />\n                                마인드맵\n                            </button>\n                        </div>\n                        <button className={SYNOPSIS_STYLES.actionButton} title=\"저장\">\n                            <Save size={18} />\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            {/* 🔥 메인 컨텐츠 */}\n            <div className={SYNOPSIS_STYLES.content}>\n                <div className={SYNOPSIS_STYLES.timeline}>\n                    {/* 🔥 뷰 모드별 렌더링 */}\n                    {viewMode === 'timeline' && (\n                        <div className={SYNOPSIS_STYLES.actsContainer}>\n                            {/* 🔥 3막 구조 렌더링 */}\n                            {([1, 2, 3] as const).map((act) => {\n                                const actTemplate = ACT_TEMPLATES[act];\n                                const actPlots = getPlotPointsByAct(act);\n\n                                return (\n                                    <div key={act} className={SYNOPSIS_STYLES.actSection}>\n                                        {/* 막 헤더 */}\n                                        <div className={`${SYNOPSIS_STYLES.actHeader} bg-gradient-to-r ${actTemplate.color}`}>\n                                            <div className={SYNOPSIS_STYLES.actTitle}>{actTemplate.title}</div>\n                                            <div className={SYNOPSIS_STYLES.actDescription}>{actTemplate.description}</div>\n                                        </div>\n\n                                        {/* 막 컨텐츠 */}\n                                        <div className={SYNOPSIS_STYLES.actContent}>\n                                            <div className={SYNOPSIS_STYLES.plotPoints}>\n                                                {actPlots.map((plot) => {\n                                                    const TypeIcon = PLOT_TYPE_STYLES[plot.type].icon;\n\n                                                    return (\n                                                        <div\n                                                            key={plot.id}\n                                                            className={SYNOPSIS_STYLES.plotPoint}\n                                                            onClick={() => setEditingPlot(plot)}\n                                                        >\n                                                            <div className={SYNOPSIS_STYLES.plotHeader}>\n                                                                <div className={SYNOPSIS_STYLES.plotInfo}>\n                                                                    <div className={SYNOPSIS_STYLES.plotTitle}>\n                                                                        {plot.title}\n                                                                    </div>\n                                                                    <div className={SYNOPSIS_STYLES.plotDescription}>\n                                                                        {plot.description}\n                                                                    </div>\n                                                                    <div className={SYNOPSIS_STYLES.plotMeta}>\n                                                                        <span className={`${SYNOPSIS_STYLES.plotType} ${PLOT_TYPE_STYLES[plot.type].color}`}>\n                                                                            <TypeIcon size={12} />\n                                                                            {plot.type}\n                                                                        </span>\n                                                                        {plot.characters.length > 0 && (\n                                                                            <span className=\"flex items-center gap-1\">\n                                                                                <Users size={12} />\n                                                                                {plot.characters.join(', ')}\n                                                                            </span>\n                                                                        )}\n                                                                        {plot.location && (\n                                                                            <span className=\"flex items-center gap-1\">\n                                                                                <MapPin size={12} />\n                                                                                {plot.location}\n                                                                            </span>\n                                                                        )}\n                                                                    </div>\n                                                                </div>\n\n                                                                <div className={SYNOPSIS_STYLES.plotActions}>\n                                                                    <button\n                                                                        onClick={(e) => {\n                                                                            e.stopPropagation();\n                                                                            setEditingPlot(plot);\n                                                                        }}\n                                                                        className={SYNOPSIS_STYLES.actionButton}\n                                                                    >\n                                                                        <Edit3 size={14} />\n                                                                    </button>\n                                                                    <button\n                                                                        onClick={(e) => {\n                                                                            e.stopPropagation();\n                                                                            deletePlotPoint(plot.id);\n                                                                        }}\n                                                                        className={SYNOPSIS_STYLES.actionButton}\n                                                                    >\n                                                                        <Trash2 size={14} />\n                                                                    </button>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    );\n                                                })}\n                                            </div>\n\n                                            {/* 새 플롯 포인트 추가 버튼 */}\n                                            <button\n                                                onClick={() => createPlotPoint(act)}\n                                                className={SYNOPSIS_STYLES.addButton}\n                                            >\n                                                <Plus size={16} />\n                                                새 플롯 포인트 추가\n                                            </button>\n                                        </div>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    )}\n\n                    {/* 🔥 아웃라인 뷰 */}\n                    {viewMode === 'outline' && (\n                        <div className=\"space-y-6\">\n                            <div className=\"bg-white dark:bg-gray-800 rounded-xl border border-slate-200 dark:border-gray-700 p-6\">\n                                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">구조 개요</h3>\n                                <div className=\"space-y-4\">\n                                    {plotPoints.map((plot) => (\n                                        <div key={plot.id} className=\"border-l-4 border-blue-400 pl-4 py-2\">\n                                            <div className=\"flex items-center gap-2 mb-1\">\n                                                <span className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">\n                                                    Act {plot.act}\n                                                </span>\n                                                <span className=\"text-xs px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded-full\">\n                                                    {PLOT_TYPE_STYLES[plot.type].icon &&\n                                                        React.createElement(PLOT_TYPE_STYLES[plot.type].icon, { size: 12 })\n                                                    }\n                                                </span>\n                                            </div>\n                                            <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">{plot.title}</h4>\n                                            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">{plot.description}</p>\n                                        </div>\n                                    ))}\n                                </div>\n                            </div>\n                        </div>\n                    )}\n\n                    {/* 🔥 마인드맵 뷰 */}\n                    {viewMode === 'mindmap' && (\n                        <div className=\"bg-white dark:bg-gray-800 rounded-xl border border-slate-200 dark:border-gray-700 p-6\">\n                            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-6\">관계도</h3>\n                            <div className=\"grid grid-cols-3 gap-8 min-h-[400px]\">\n                                {([1, 2, 3] as const).map((act) => (\n                                    <div key={act} className=\"space-y-4\">\n                                        <div className={`text-center p-3 rounded-lg bg-gradient-to-r ${ACT_TEMPLATES[act].color} text-white font-semibold`}>\n                                            {ACT_TEMPLATES[act].title}\n                                        </div>\n                                        <div className=\"space-y-3\">\n                                            {getPlotPointsByAct(act).map((plot) => {\n                                                // 🔥 롱프레스 핸들러\n                                                const longPressHandlers = useLongPress({\n                                                    onLongPress: () => {\n                                                        // 롱프레스 시 편집 모드\n                                                        setEditingPlot(plot);\n                                                        Logger.info('SYNOPSIS_VIEW', '롱프레스로 편집 모드 활성화', { title: plot.title });\n                                                    },\n                                                    onShortPress: () => {\n                                                        // 짧은 클릭 시 편집 모드\n                                                        setEditingPlot(plot);\n                                                    },\n                                                    delay: 500\n                                                });\n\n                                                return (\n                                                    <div\n                                                        key={plot.id}\n                                                        className=\"bg-gray-50 dark:bg-gray-700 p-3 rounded-lg text-sm cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors\"\n                                                        {...longPressHandlers}\n                                                    >\n                                                        <div className=\"font-medium text-gray-900 dark:text-gray-100 mb-1\">\n                                                            {plot.title}\n                                                        </div>\n                                                        <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                                                            {plot.description?.slice(0, 60)}...\n                                                        </div>\n                                                    </div>\n                                                );\n                                            })}\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            {/* 🔥 편집 모달 */}\n            {(editingPlot || showAddModal.show) && (\n                <div className={SYNOPSIS_STYLES.modal}>\n                    <div className={SYNOPSIS_STYLES.modalContent}>\n                        <div className={SYNOPSIS_STYLES.modalHeader}>\n                            <h2 className={SYNOPSIS_STYLES.modalTitle}>\n                                {showAddModal.show ? '새 플롯 포인트' : '플롯 포인트 편집'}\n                            </h2>\n                            <button\n                                onClick={() => {\n                                    setEditingPlot(null);\n                                    setShowAddModal({ show: false });\n                                }}\n                                className={SYNOPSIS_STYLES.actionButton}\n                            >\n                                <XIcon size={18} />\n                            </button>\n                        </div>\n\n                        <div className={SYNOPSIS_STYLES.modalBody}>\n                            <div className={SYNOPSIS_STYLES.formGroup}>\n                                <label className={SYNOPSIS_STYLES.label}>제목</label>\n                                <input\n                                    type=\"text\"\n                                    value={editingPlot?.title || ''}\n                                    onChange={(e) => setEditingPlot(prev => prev ? { ...prev, title: e.target.value } : null)}\n                                    className={SYNOPSIS_STYLES.input}\n                                    placeholder=\"플롯 포인트 제목\"\n                                />\n                            </div>\n\n                            <div className={SYNOPSIS_STYLES.formGroup}>\n                                <label className={SYNOPSIS_STYLES.label}>설명</label>\n                                <textarea\n                                    value={editingPlot?.description || ''}\n                                    onChange={(e) => setEditingPlot(prev => prev ? { ...prev, description: e.target.value } : null)}\n                                    className={SYNOPSIS_STYLES.textarea}\n                                    rows={4}\n                                    placeholder=\"상세한 설명을 입력하세요...\"\n                                />\n                            </div>\n\n                            <div className={SYNOPSIS_STYLES.formGroup}>\n                                <label className={SYNOPSIS_STYLES.label}>타입</label>\n                                <select\n                                    value={editingPlot?.type || 'setup'}\n                                    onChange={(e) => setEditingPlot(prev => prev ? { ...prev, type: e.target.value as PlotPoint['type'] } : null)}\n                                    className={SYNOPSIS_STYLES.select}\n                                >\n                                    <option value=\"setup\">설정</option>\n                                    <option value=\"conflict\">갈등</option>\n                                    <option value=\"resolution\">해결</option>\n                                    <option value=\"twist\">반전</option>\n                                    <option value=\"climax\">클라이맥스</option>\n                                </select>\n                            </div>\n\n                            <div className={SYNOPSIS_STYLES.formGroup}>\n                                <label className={SYNOPSIS_STYLES.label}>장소</label>\n                                <input\n                                    type=\"text\"\n                                    value={editingPlot?.location || ''}\n                                    onChange={(e) => setEditingPlot(prev => prev ? { ...prev, location: e.target.value } : null)}\n                                    className={SYNOPSIS_STYLES.input}\n                                    placeholder=\"이벤트가 일어나는 장소\"\n                                />\n                            </div>\n                        </div>\n\n                        <div className={SYNOPSIS_STYLES.modalFooter}>\n                            <button\n                                onClick={() => {\n                                    setEditingPlot(null);\n                                    setShowAddModal({ show: false });\n                                }}\n                                className={`${SYNOPSIS_STYLES.button} ${SYNOPSIS_STYLES.secondaryButton}`}\n                            >\n                                취소\n                            </button>\n                            <button\n                                onClick={savePlotPoint}\n                                className={`${SYNOPSIS_STYLES.button} ${SYNOPSIS_STYLES.primaryButton}`}\n                            >\n                                저장\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 10291, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/views/IdeaView.tsx"],"sourcesContent":["'use client';\n\n// 🔥 아이디어 편집 뷰 - 창의적 발상과 영감 관리 시스템\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Logger } from '../../../../shared/logger';\nimport {\n    Plus,\n    Edit3,\n    Trash2,\n    Search,\n    Filter,\n    Tag,\n    Clock,\n    Lightbulb,\n    Users,\n    MessageSquare,\n    FileText,\n    Image,\n    Link,\n    ChevronLeft,\n    ChevronDown,\n    ChevronRight,\n    MoreHorizontal,\n    Save,\n    X as XIcon,\n    Grid3x3,\n    List,\n    Shuffle,\n    TrendingUp,\n    Heart,\n    Star,\n    Archive,\n    ArrowUpRight,\n    MapPin,\n    Undo2,\n    Redo2\n} from 'lucide-react'; interface IdeaItem {\n    id: string;\n    title: string;\n    content: string;\n    category: 'character' | 'plot' | 'setting' | 'dialogue' | 'theme' | 'other';\n    stage: 'initial' | 'developing' | 'concrete' | 'applied';\n    tags: string[];\n    priority: 'low' | 'medium' | 'high';\n    connections: string[]; // 연결된 다른 아이디어 ID들\n    attachments: string[]; // 이미지, 링크 등\n    notes: string;\n    createdAt: Date;\n    updatedAt: Date;\n    isFavorite: boolean;\n}\n\ninterface IdeaViewProps {\n    ideaId: string;\n    onBack: () => void;\n}\n\n// 🔥 카테고리별 스타일\nconst CATEGORY_STYLES = {\n    character: { icon: Users, color: 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300', label: '캐릭터' },\n    plot: { icon: FileText, color: 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300', label: '플롯' },\n    setting: { icon: MapPin, color: 'bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300', label: '설정' },\n    dialogue: { icon: MessageSquare, color: 'bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300', label: '대사' },\n    theme: { icon: Heart, color: 'bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300', label: '테마' },\n    other: { icon: MoreHorizontal, color: 'bg-gray-100 dark:bg-gray-700/30 text-gray-700 dark:text-gray-300', label: '기타' }\n} as const;\n\n// 🔥 개발 단계별 스타일\nconst STAGE_STYLES = {\n    initial: { color: 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400', label: '초기' },\n    developing: { color: 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-300', label: '발전' },\n    concrete: { color: 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300', label: '구체화' },\n    applied: { color: 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300', label: '적용됨' }\n} as const;\n\n// 🔥 스타일 정의\nconst IDEA_STYLES = {\n    container: 'flex-1 h-full bg-gradient-to-br from-slate-50 to-white dark:from-gray-900 dark:to-gray-800',\n\n    // 🔥 헤더\n    header: 'sticky top-0 z-10 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border-b border-slate-200 dark:border-gray-700',\n    headerTop: 'flex items-center justify-between p-4',\n    backButton: 'flex items-center gap-2 px-3 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors',\n    title: 'text-xl font-bold text-gray-900 dark:text-gray-100',\n    headerActions: 'flex items-center gap-2',\n\n    // 🔥 빠른 캡처\n    quickCapture: 'p-4 border-b border-slate-200 dark:border-gray-700',\n    captureInput: 'w-full px-4 py-3 border border-slate-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 placeholder-gray-500 dark:placeholder-gray-400',\n    captureButton: 'mt-2 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors text-sm font-medium whitespace-nowrap min-w-[80px]',    // 🔥 툴바\n    toolbar: 'flex items-center justify-between p-4 border-b border-slate-200 dark:border-gray-700',\n    toolbarLeft: 'flex items-center gap-3',\n    toolbarRight: 'flex items-center gap-2',\n    viewToggle: 'flex items-center bg-gray-100 dark:bg-gray-700 rounded-lg p-1',\n    viewButton: 'p-2 rounded-md transition-colors',\n    viewButtonActive: 'bg-white dark:bg-gray-600 text-blue-600 dark:text-blue-400 shadow-sm',\n    viewButtonInactive: 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200',\n\n    // 🔥 필터\n    filterButton: 'flex items-center gap-2 px-3 py-2 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors',\n    searchContainer: 'relative',\n    searchInput: 'pl-9 pr-4 py-2 border border-slate-300 dark:border-gray-600 rounded-lg text-sm text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500',\n    searchIcon: 'absolute left-3 top-2.5 text-gray-400',\n\n    // 🔥 메인 컨텐츠\n    content: 'flex-1 overflow-hidden',\n    scrollArea: 'h-full overflow-y-auto p-6',\n\n    // 🔥 카드 뷰\n    cardsContainer: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4',\n    ideaCard: 'group bg-white dark:bg-gray-800 rounded-xl border border-slate-200 dark:border-gray-700 p-4 hover:shadow-lg hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-200 cursor-pointer',\n    cardHeader: 'flex items-start justify-between mb-3',\n    cardTitle: 'font-semibold text-gray-900 dark:text-gray-100 line-clamp-2 group-hover:text-blue-600 dark:group-hover:text-blue-400',\n    cardActions: 'opacity-0 group-hover:opacity-100 transition-opacity flex gap-1',\n    cardContent: 'text-sm text-gray-600 dark:text-gray-400 line-clamp-3 mb-3',\n    cardFooter: 'flex items-center justify-between',\n    cardMeta: 'flex items-center gap-2',\n    cardTags: 'flex items-center gap-1 flex-wrap',\n\n    // 🔥 리스트 뷰\n    listContainer: 'space-y-2',\n    listItem: 'group bg-white dark:bg-gray-800 rounded-lg border border-slate-200 dark:border-gray-700 p-4 hover:bg-slate-50 dark:hover:bg-gray-700/50 transition-colors cursor-pointer',\n\n    // 🔥 공통 요소\n    badge: 'inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium whitespace-nowrap',\n    tag: 'inline-flex items-center gap-1 px-2.5 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full text-xs whitespace-nowrap',\n    actionButton: 'p-1.5 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors',    // 🔥 통계 영역\n    statsGrid: 'grid grid-cols-4 gap-4 mb-6',\n    statCard: 'bg-white dark:bg-gray-800 rounded-lg border border-slate-200 dark:border-gray-700 p-4 text-center',\n    statValue: 'text-2xl font-bold text-gray-900 dark:text-gray-100',\n    statLabel: 'text-sm text-gray-600 dark:text-gray-400 mt-1',\n    statIcon: 'w-5 h-5 text-blue-600 dark:text-blue-400 mx-auto mb-2',\n\n    // 🔥 빈 상태\n    emptyState: 'flex flex-col items-center justify-center h-64 text-center',\n    emptyIcon: 'w-16 h-16 text-gray-400 dark:text-gray-500 mb-4',\n    emptyTitle: 'text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2',\n    emptyDescription: 'text-gray-600 dark:text-gray-400 max-w-md mx-auto',\n\n    // 🔥 모달\n    modal: 'fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50',\n    modalContent: 'bg-white dark:bg-gray-800 rounded-xl border border-slate-200 dark:border-gray-700 shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden',\n    modalHeader: 'flex items-center justify-between p-4 border-b border-slate-200 dark:border-gray-700',\n    modalTitle: 'text-lg font-semibold text-gray-900 dark:text-gray-100',\n    modalBody: 'p-4 overflow-y-auto',\n    modalFooter: 'flex items-center justify-end gap-2 p-4 border-t border-slate-200 dark:border-gray-700',\n\n    // 🔥 폼 스타일\n    formGroup: 'mb-4',\n    label: 'block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2',\n    input: 'w-full px-3 py-2 border border-slate-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500',\n    textarea: 'w-full px-3 py-2 border border-slate-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none',\n    select: 'w-full px-3 py-2 border border-slate-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-gray-100 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-blue-500',\n\n    button: 'px-4 py-2 rounded-lg font-medium transition-colors',\n    primaryButton: 'bg-blue-600 hover:bg-blue-700 text-white',\n    secondaryButton: 'bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-900 dark:text-gray-100',\n} as const;\n\nexport function IdeaView({ ideaId, onBack }: IdeaViewProps): React.ReactElement {\n    // 🔥 상태 관리 - localStorage에서 데이터 복원\n    const [ideas, setIdeas] = useState<IdeaItem[]>(() => {\n        try {\n            const saved = localStorage.getItem(`ideas_${ideaId}`);\n            if (saved) {\n                const parsed = JSON.parse(saved);\n                return parsed.map((idea: {\n                    id: string;\n                    title: string;\n                    content: string;\n                    category: string;\n                    stage: string;\n                    tags: string[];\n                    priority: string;\n                    connections: string[];\n                    attachments: string[];\n                    notes: string;\n                    createdAt: string;\n                    updatedAt: string;\n                    isFavorite?: boolean;\n                }) => ({\n                    ...idea,\n                    createdAt: new Date(idea.createdAt),\n                    updatedAt: new Date(idea.updatedAt)\n                }));\n            }\n        } catch (error) {\n            Logger.error('IDEA_VIEW', 'Failed to load ideas from localStorage', { error });\n        }\n\n        // 기본 mock 데이터\n        return [\n            {\n                id: '1',\n                title: '신비로운 도서관',\n                content: '각 책이 살아있는 도서관. 독자가 책을 열면 그 세계로 빨려들어간다. 사서는 실제로는 차원의 수호자.',\n                category: 'setting',\n                stage: 'developing',\n                tags: ['판타지', '도서관', '차원이동'],\n                priority: 'high',\n                connections: [],\n                attachments: [],\n                notes: 'Harry Potter의 움직이는 계단에서 영감을 받음',\n                createdAt: new Date('2024-01-15'),\n                updatedAt: new Date('2024-01-20'),\n                isFavorite: true\n            },\n            {\n                id: '2',\n                title: '시간을 먹는 괴물',\n                content: '사람들의 시간을 훔쳐먹는 보이지 않는 괴물. 피해자는 점점 늙어간다. 주인공만이 이를 볼 수 있다.',\n                category: 'character',\n                stage: 'concrete',\n                tags: ['판타지', '괴물', '시간'],\n                priority: 'medium',\n                connections: ['1'],\n                attachments: [],\n                notes: '',\n                createdAt: new Date('2024-01-10'),\n                updatedAt: new Date('2024-01-18'),\n                isFavorite: false\n            },\n            {\n                id: '3',\n                title: '\"시간이 멈췄네\"',\n                content: '주인공이 위기 상황에서 시간 정지 능력을 처음 발견했을 때의 첫 마디. 놀라움과 당황이 섞인 톤.',\n                category: 'dialogue',\n                stage: 'applied',\n                tags: ['대사', '능력각성', '첫발견'],\n                priority: 'low',\n                connections: ['2'],\n                attachments: [],\n                notes: '1챕터 클라이맥스에서 사용',\n                createdAt: new Date('2024-01-08'),\n                updatedAt: new Date('2024-01-25'),\n                isFavorite: true\n            }\n        ];\n    });\n\n    // 🔥 데이터 저장 함수\n    const saveToLocalStorage = useCallback((newIdeas: IdeaItem[]) => {\n        try {\n            localStorage.setItem(`ideas_${ideaId}`, JSON.stringify(newIdeas));\n        } catch (error) {\n            Logger.error('IDEA_VIEW', 'Failed to save ideas to localStorage', { error });\n        }\n    }, [ideaId]);\n\n    // 🔥 자동 저장이 포함된 setIdeas 래퍼\n    const updateIdeas = useCallback((newIdeas: IdeaItem[] | ((prev: IdeaItem[]) => IdeaItem[])) => {\n        if (typeof newIdeas === 'function') {\n            setIdeas(prev => {\n                const updated = newIdeas(prev);\n                saveToLocalStorage(updated);\n                return updated;\n            });\n        } else {\n            setIdeas(newIdeas);\n            saveToLocalStorage(newIdeas);\n        }\n    }, [saveToLocalStorage]);\n\n    // 🔥 되돌리기/다시하기 기능\n    const [undoStack, setUndoStack] = useState<IdeaItem[][]>([]);\n    const [redoStack, setRedoStack] = useState<IdeaItem[][]>([]);\n    const [viewMode, setViewMode] = useState<'cards' | 'list'>('cards');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [selectedCategory, setSelectedCategory] = useState<string>('all');\n    const [selectedStage, setSelectedStage] = useState<string>('all');\n    const [editingIdea, setEditingIdea] = useState<IdeaItem | null>(null);\n    const [showAddModal, setShowAddModal] = useState(false);\n    const [quickCaptureText, setQuickCaptureText] = useState('');\n    const [draggedItemId, setDraggedItemId] = useState<string | null>(null);\n    const [dragOverItemId, setDragOverItemId] = useState<string | null>(null);\n\n    // 🔥 필터링된 아이디어\n    const filteredIdeas = useMemo(() => {\n        return ideas.filter(idea => {\n            const matchesSearch = idea.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                idea.content.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                idea.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n            const matchesCategory = selectedCategory === 'all' || idea.category === selectedCategory;\n            const matchesStage = selectedStage === 'all' || idea.stage === selectedStage;\n\n            return matchesSearch && matchesCategory && matchesStage;\n        });\n    }, [ideas, searchTerm, selectedCategory, selectedStage]);\n\n    // 🔥 통계 계산\n    const stats = useMemo(() => {\n        return {\n            total: ideas.length,\n            favorites: ideas.filter(i => i.isFavorite).length,\n            applied: ideas.filter(i => i.stage === 'applied').length,\n            highPriority: ideas.filter(i => i.priority === 'high').length\n        };\n    }, [ideas]);\n\n    // 🔥 되돌리기/다시하기 함수들\n    const saveToUndoStack = useCallback((currentIdeas: IdeaItem[]) => {\n        setUndoStack(prev => [...prev.slice(-19), currentIdeas]); // 최대 20개 상태만 유지\n        setRedoStack([]); // 새 동작 시 redo 스택 초기화\n    }, []);\n\n    // 🔥 빠른 캡처\n    const handleQuickCapture = useCallback(() => {\n        if (!quickCaptureText.trim()) return;\n\n        saveToUndoStack(ideas); // Undo 스택에 현재 상태 저장\n\n        const newIdea: IdeaItem = {\n            id: Date.now().toString(),\n            title: quickCaptureText.slice(0, 50) + (quickCaptureText.length > 50 ? '...' : ''),\n            content: quickCaptureText,\n            category: 'other',\n            stage: 'initial',\n            tags: [],\n            priority: 'medium',\n            connections: [],\n            attachments: [],\n            notes: '',\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            isFavorite: false\n        };\n\n        updateIdeas(prev => [newIdea, ...prev]);\n        setQuickCaptureText('');\n    }, [quickCaptureText, ideas, saveToUndoStack, updateIdeas]);\n\n    // 🔥 아이디어 저장\n    const saveIdea = useCallback(() => {\n        if (!editingIdea) return;\n\n        saveToUndoStack(ideas); // Undo 스택에 현재 상태 저장\n\n        if (showAddModal) {\n            const newIdea = {\n                ...editingIdea,\n                id: Date.now().toString(),\n                createdAt: new Date(),\n                updatedAt: new Date()\n            };\n            updateIdeas(prev => [newIdea, ...prev]);\n        } else {\n            updateIdeas(prev => prev.map(i => i.id === editingIdea.id ? { ...editingIdea, updatedAt: new Date() } : i));\n        }\n\n        setEditingIdea(null);\n        setShowAddModal(false);\n    }, [editingIdea, showAddModal, ideas, saveToUndoStack, updateIdeas]);\n\n    // 🔥 아이디어 삭제\n    const deleteIdea = useCallback((id: string) => {\n        if (window.confirm('정말로 이 아이디어를 삭제하시겠습니까?')) {\n            saveToUndoStack(ideas); // Undo 스택에 현재 상태 저장\n            updateIdeas(prev => prev.filter(i => i.id !== id));\n        }\n    }, [ideas, saveToUndoStack, updateIdeas]);\n\n    // 🔥 즐겨찾기 토글\n    const toggleFavorite = useCallback((id: string) => {\n        saveToUndoStack(ideas); // Undo 스택에 현재 상태 저장\n        updateIdeas(prev => prev.map(i => i.id === id ? { ...i, isFavorite: !i.isFavorite } : i));\n    }, [ideas, saveToUndoStack, updateIdeas]);\n\n    const handleUndo = useCallback(() => {\n        if (undoStack.length === 0) return;\n\n        const previousState = undoStack[undoStack.length - 1];\n        if (!previousState) return;\n\n        setRedoStack(prev => [...prev, ideas]);\n        updateIdeas(previousState);\n        setUndoStack(prev => prev.slice(0, -1));\n    }, [ideas, undoStack, updateIdeas]);\n\n    const handleRedo = useCallback(() => {\n        if (redoStack.length === 0) return;\n\n        const nextState = redoStack[redoStack.length - 1];\n        if (!nextState) return;\n\n        setUndoStack(prev => [...prev, ideas]);\n        updateIdeas(nextState);\n        setRedoStack(prev => prev.slice(0, -1));\n    }, [ideas, redoStack, updateIdeas]);\n\n    // 🔥 단축키 처리\n    const handleKeyDown = useCallback((e: KeyboardEvent) => {\n        const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n\n        if (isMac) {\n            // Mac: Cmd+Z (Undo), Cmd+Shift+Z (Redo)\n            if (e.metaKey && e.key === 'z') {\n                e.preventDefault();\n                if (e.shiftKey) {\n                    handleRedo();\n                } else {\n                    handleUndo();\n                }\n            }\n        } else {\n            // Windows/Linux: Ctrl+Z (Undo), Ctrl+Y (Redo)\n            if (e.ctrlKey && e.key === 'z' && !e.shiftKey) {\n                e.preventDefault();\n                handleUndo();\n            } else if (e.ctrlKey && e.key === 'y') {\n                e.preventDefault();\n                handleRedo();\n            }\n        }\n    }, [handleUndo, handleRedo]);\n\n    // 🔥 단축키 이벤트 리스너 등록\n    React.useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n    }, [handleKeyDown]);\n\n    // 🔥 새 아이디어 추가\n    const handleAddNewIdea = useCallback(() => {\n        const newIdea: IdeaItem = {\n            id: Date.now().toString(),\n            title: '',\n            content: '',\n            category: 'other',\n            stage: 'initial',\n            tags: [],\n            priority: 'medium',\n            connections: [],\n            attachments: [],\n            notes: '',\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            isFavorite: false\n        };\n\n        setEditingIdea(newIdea);\n        setShowAddModal(true);\n    }, []);\n\n    // 🔥 드래그 앤 드롭 핸들러\n    const handleDragStart = useCallback((e: React.DragEvent, ideaId: string) => {\n        setDraggedItemId(ideaId);\n        e.dataTransfer.effectAllowed = 'move';\n    }, []);\n\n    const handleDragOver = useCallback((e: React.DragEvent, ideaId: string) => {\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'move';\n        setDragOverItemId(ideaId);\n    }, []);\n\n    const handleDragLeave = useCallback(() => {\n        setDragOverItemId(null);\n    }, []);\n\n    const handleDrop = useCallback((e: React.DragEvent, targetId: string) => {\n        e.preventDefault();\n\n        if (!draggedItemId || draggedItemId === targetId) {\n            setDraggedItemId(null);\n            setDragOverItemId(null);\n            return;\n        }\n\n        saveToUndoStack(ideas); // Undo 스택에 현재 상태 저장\n\n        const draggedIndex = ideas.findIndex(idea => idea.id === draggedItemId);\n        const targetIndex = ideas.findIndex(idea => idea.id === targetId);\n\n        if (draggedIndex === -1 || targetIndex === -1) return;\n\n        const newIdeas = [...ideas];\n        const draggedItem = newIdeas.splice(draggedIndex, 1)[0];\n        if (draggedItem) {\n            newIdeas.splice(targetIndex, 0, draggedItem);\n            updateIdeas(newIdeas);\n        }\n\n        setDraggedItemId(null);\n        setDragOverItemId(null);\n    }, [draggedItemId, ideas, saveToUndoStack, updateIdeas]);\n\n    return (\n        <div className={IDEA_STYLES.container}>\n            {/* 🔥 헤더 */}\n            <div className={IDEA_STYLES.header}>\n                <div className={IDEA_STYLES.headerTop}>\n                    <button onClick={onBack} className={IDEA_STYLES.backButton}>\n                        <ChevronLeft size={20} />\n                        <span>구조로 돌아가기</span>\n                    </button>\n\n                    <h1 className={IDEA_STYLES.title}>아이디어 관리</h1>\n\n                    <div className={IDEA_STYLES.headerActions}>\n                        <div className=\"flex gap-2 mr-3\">\n                            <button\n                                onClick={handleUndo}\n                                disabled={undoStack.length === 0}\n                                className={`${IDEA_STYLES.button} ${undoStack.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                title=\"되돌리기 (Ctrl+Z / Cmd+Z)\"\n                            >\n                                <Undo2 size={16} />\n                            </button>\n                            <button\n                                onClick={handleRedo}\n                                disabled={redoStack.length === 0}\n                                className={`${IDEA_STYLES.button} ${redoStack.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                title=\"다시하기 (Ctrl+Y / Cmd+Shift+Z)\"\n                            >\n                                <Redo2 size={16} />\n                            </button>\n                        </div>\n                        <button\n                            onClick={handleAddNewIdea}\n                            className={`${IDEA_STYLES.button} ${IDEA_STYLES.primaryButton}`}\n                        >\n                            <Plus size={16} className=\"mr-1\" />\n                            새 아이디어\n                        </button>\n                    </div>\n                </div>\n\n                {/* 🔥 빠른 캡처 */}\n                <div className={IDEA_STYLES.quickCapture}>\n                    <div className=\"flex gap-2\">\n                        <input\n                            type=\"text\"\n                            value={quickCaptureText}\n                            onChange={(e) => setQuickCaptureText(e.target.value)}\n                            placeholder=\"💡 떠오른 아이디어를 빠르게 메모하세요... (Enter로 저장)\"\n                            className={IDEA_STYLES.captureInput}\n                            onKeyDown={(e) => {\n                                if (e.key === 'Enter') {\n                                    handleQuickCapture();\n                                }\n                            }}\n                        />\n                        <button\n                            onClick={handleQuickCapture}\n                            disabled={!quickCaptureText.trim()}\n                            className={IDEA_STYLES.captureButton}\n                        >\n                            저장\n                        </button>\n                    </div>\n                </div>\n\n                {/* 🔥 툴바 */}\n                <div className={IDEA_STYLES.toolbar}>\n                    <div className={IDEA_STYLES.toolbarLeft}>\n                        <div className={IDEA_STYLES.searchContainer}>\n                            <Search size={16} className={IDEA_STYLES.searchIcon} />\n                            <input\n                                type=\"text\"\n                                value={searchTerm}\n                                onChange={(e) => setSearchTerm(e.target.value)}\n                                placeholder=\"아이디어 검색...\"\n                                className={IDEA_STYLES.searchInput}\n                            />\n                        </div>\n\n                        <select\n                            value={selectedCategory}\n                            onChange={(e) => setSelectedCategory(e.target.value)}\n                            className={IDEA_STYLES.filterButton}\n                        >\n                            <option value=\"all\">모든 카테고리</option>\n                            {Object.entries(CATEGORY_STYLES).map(([key, value]) => (\n                                <option key={key} value={key}>{value.label}</option>\n                            ))}\n                        </select>\n\n                        <select\n                            value={selectedStage}\n                            onChange={(e) => setSelectedStage(e.target.value)}\n                            className={IDEA_STYLES.filterButton}\n                        >\n                            <option value=\"all\">모든 단계</option>\n                            {Object.entries(STAGE_STYLES).map(([key, value]) => (\n                                <option key={key} value={key}>{value.label}</option>\n                            ))}\n                        </select>\n                    </div>\n\n                    <div className={IDEA_STYLES.toolbarRight}>\n                        <div className={IDEA_STYLES.viewToggle}>\n                            <button\n                                onClick={() => setViewMode('cards')}\n                                className={`${IDEA_STYLES.viewButton} ${viewMode === 'cards' ? IDEA_STYLES.viewButtonActive : IDEA_STYLES.viewButtonInactive\n                                    }`}\n                            >\n                                <Grid3x3 size={16} />\n                            </button>\n                            <button\n                                onClick={() => setViewMode('list')}\n                                className={`${IDEA_STYLES.viewButton} ${viewMode === 'list' ? IDEA_STYLES.viewButtonActive : IDEA_STYLES.viewButtonInactive\n                                    }`}\n                            >\n                                <List size={16} />\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            {/* 🔥 메인 컨텐츠 */}\n            <div className={IDEA_STYLES.content}>\n                <div className={IDEA_STYLES.scrollArea}>\n                    {/* 🔥 통계 */}\n                    <div className={IDEA_STYLES.statsGrid}>\n                        <div className={IDEA_STYLES.statCard}>\n                            <Lightbulb className={IDEA_STYLES.statIcon} />\n                            <div className={IDEA_STYLES.statValue}>{stats.total}</div>\n                            <div className={IDEA_STYLES.statLabel}>총 아이디어</div>\n                        </div>\n                        <div className={IDEA_STYLES.statCard}>\n                            <Star className={IDEA_STYLES.statIcon} />\n                            <div className={IDEA_STYLES.statValue}>{stats.favorites}</div>\n                            <div className={IDEA_STYLES.statLabel}>즐겨찾기</div>\n                        </div>\n                        <div className={IDEA_STYLES.statCard}>\n                            <ArrowUpRight className={IDEA_STYLES.statIcon} />\n                            <div className={IDEA_STYLES.statValue}>{stats.applied}</div>\n                            <div className={IDEA_STYLES.statLabel}>적용됨</div>\n                        </div>\n                        <div className={IDEA_STYLES.statCard}>\n                            <TrendingUp className={IDEA_STYLES.statIcon} />\n                            <div className={IDEA_STYLES.statValue}>{stats.highPriority}</div>\n                            <div className={IDEA_STYLES.statLabel}>높은 우선순위</div>\n                        </div>\n                    </div>\n\n                    {/* 🔥 아이디어 목록 */}\n                    {filteredIdeas.length === 0 ? (\n                        <div className={IDEA_STYLES.emptyState}>\n                            <Lightbulb className={IDEA_STYLES.emptyIcon} />\n                            <h3 className={IDEA_STYLES.emptyTitle}>아이디어가 없습니다</h3>\n                            <p className={IDEA_STYLES.emptyDescription}>\n                                위의 빠른 캡처를 사용하여 첫 번째 아이디어를 추가해보세요!\n                            </p>\n                        </div>\n                    ) : viewMode === 'cards' ? (\n                        <div className={IDEA_STYLES.cardsContainer}>\n                            {filteredIdeas.map((idea) => {\n                                const CategoryIcon = CATEGORY_STYLES[idea.category].icon;\n\n                                // 🔥 편집 핸들러들 (Hook 제거)\n                                const handleIdeaClick = () => {\n                                    setEditingIdea(idea);\n                                    Logger.info('IDEA_VIEW', '클릭으로 편집 모드 활성화', { title: idea.title });\n                                };\n\n                                const handleIdeaDoubleClick = () => {\n                                    setEditingIdea(idea);\n                                    Logger.info('IDEA_VIEW', '더블클릭으로 편집 모드', { title: idea.title });\n                                };\n\n                                return (\n                                    <div\n                                        key={idea.id}\n                                        className={`${IDEA_STYLES.ideaCard} ${draggedItemId === idea.id ? 'opacity-50' : ''\n                                            } ${dragOverItemId === idea.id ? 'ring-2 ring-blue-500' : ''\n                                            } select-none cursor-pointer`}\n                                        style={{ userSelect: 'none' }}\n                                        draggable={false}\n                                        onClick={handleIdeaClick}\n                                        onDoubleClick={handleIdeaDoubleClick}\n                                    // 드래그 기능 일시적으로 비활성화\n                                    // onDragStart={(e) => handleDragStart(e, idea.id)}\n                                    // onDragOver={(e) => handleDragOver(e, idea.id)}\n                                    // onDragLeave={handleDragLeave}\n                                    // onDrop={(e) => handleDrop(e, idea.id)}\n                                    >\n                                        <div className={IDEA_STYLES.cardHeader}>\n                                            <h3 className={IDEA_STYLES.cardTitle}>{idea.title}</h3>\n                                            <div className={IDEA_STYLES.cardActions}>\n                                                <button\n                                                    onClick={(e) => {\n                                                        e.stopPropagation();\n                                                        toggleFavorite(idea.id);\n                                                    }}\n                                                    className={IDEA_STYLES.actionButton}\n                                                >\n                                                    <Star\n                                                        size={14}\n                                                        className={idea.isFavorite ? 'fill-yellow-400 text-yellow-400' : ''}\n                                                    />\n                                                </button>\n                                                <button\n                                                    onClick={(e) => {\n                                                        e.preventDefault();\n                                                        e.stopPropagation();\n                                                        deleteIdea(idea.id);\n                                                    }}\n                                                    className={IDEA_STYLES.actionButton}\n                                                    title=\"삭제\"\n                                                >\n                                                    <Trash2 size={14} />\n                                                </button>\n                                            </div>\n                                        </div>\n\n                                        <p className={IDEA_STYLES.cardContent}>{idea.content}</p>\n\n                                        <div className={IDEA_STYLES.cardFooter}>\n                                            <div className={IDEA_STYLES.cardMeta}>\n                                                <span className={`${IDEA_STYLES.badge} ${CATEGORY_STYLES[idea.category].color}`}>\n                                                    <CategoryIcon size={12} />\n                                                    {CATEGORY_STYLES[idea.category].label}\n                                                </span>\n                                                <span className={`${IDEA_STYLES.badge} ${STAGE_STYLES[idea.stage].color}`}>\n                                                    {STAGE_STYLES[idea.stage].label}\n                                                </span>\n                                            </div>\n\n                                            {idea.tags.length > 0 && (\n                                                <div className={IDEA_STYLES.cardTags}>\n                                                    {idea.tags.slice(0, 3).map((tag, index) => (\n                                                        <span key={index} className={IDEA_STYLES.tag}>\n                                                            {tag}\n                                                        </span>\n                                                    ))}\n                                                    {idea.tags.length > 3 && (\n                                                        <span className={IDEA_STYLES.tag}>+{idea.tags.length - 3}</span>\n                                                    )}\n                                                </div>\n                                            )}\n                                        </div>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    ) : (\n                        <div className={IDEA_STYLES.listContainer}>\n                            {filteredIdeas.map((idea) => {\n                                const CategoryIcon = CATEGORY_STYLES[idea.category].icon;\n\n                                return (\n                                    <div\n                                        key={idea.id}\n                                        className={IDEA_STYLES.listItem}\n                                        onClick={() => setEditingIdea(idea)}\n                                    >\n                                        <div className=\"flex items-start justify-between\">\n                                            <div className=\"flex-1\">\n                                                <div className=\"flex items-center gap-3 mb-2\">\n                                                    <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">\n                                                        {idea.title}\n                                                    </h3>\n                                                    <span className={`${IDEA_STYLES.badge} ${CATEGORY_STYLES[idea.category].color}`}>\n                                                        <CategoryIcon size={12} />\n                                                        {CATEGORY_STYLES[idea.category].label}\n                                                    </span>\n                                                    <span className={`${IDEA_STYLES.badge} ${STAGE_STYLES[idea.stage].color}`}>\n                                                        {STAGE_STYLES[idea.stage].label}\n                                                    </span>\n                                                    {idea.isFavorite && (\n                                                        <Star size={14} className=\"fill-yellow-400 text-yellow-400\" />\n                                                    )}\n                                                </div>\n                                                <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-2\">\n                                                    {idea.content}\n                                                </p>\n                                                {idea.tags.length > 0 && (\n                                                    <div className=\"flex gap-1 flex-wrap\">\n                                                        {idea.tags.map((tag, index) => (\n                                                            <span key={index} className={IDEA_STYLES.tag}>\n                                                                {tag}\n                                                            </span>\n                                                        ))}\n                                                    </div>\n                                                )}\n                                            </div>\n\n                                            <div className=\"opacity-0 group-hover:opacity-100 transition-opacity flex gap-1\">\n                                                <button\n                                                    onClick={(e) => {\n                                                        e.stopPropagation();\n                                                        toggleFavorite(idea.id);\n                                                    }}\n                                                    className={IDEA_STYLES.actionButton}\n                                                >\n                                                    <Star size={14} className={idea.isFavorite ? 'fill-yellow-400 text-yellow-400' : ''} />\n                                                </button>\n                                                <button\n                                                    onClick={(e) => {\n                                                        e.stopPropagation();\n                                                        deleteIdea(idea.id);\n                                                    }}\n                                                    className={IDEA_STYLES.actionButton}\n                                                >\n                                                    <Trash2 size={14} />\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            {/* 🔥 편집 모달 */}\n            {(editingIdea || showAddModal) && (\n                <div className={IDEA_STYLES.modal}>\n                    <div className={IDEA_STYLES.modalContent}>\n                        <div className={IDEA_STYLES.modalHeader}>\n                            <h2 className={IDEA_STYLES.modalTitle}>\n                                {showAddModal ? '새 아이디어' : '아이디어 편집'}\n                            </h2>\n                            <button\n                                onClick={() => {\n                                    setEditingIdea(null);\n                                    setShowAddModal(false);\n                                }}\n                                className={IDEA_STYLES.actionButton}\n                            >\n                                <XIcon size={18} />\n                            </button>\n                        </div>\n\n                        <div className={IDEA_STYLES.modalBody}>\n                            <div className={IDEA_STYLES.formGroup}>\n                                <label className={IDEA_STYLES.label}>제목</label>\n                                <input\n                                    type=\"text\"\n                                    value={editingIdea?.title || ''}\n                                    onChange={(e) => setEditingIdea(prev => prev ? { ...prev, title: e.target.value } : null)}\n                                    className={IDEA_STYLES.input}\n                                    placeholder=\"아이디어 제목\"\n                                />\n                            </div>\n\n                            <div className={IDEA_STYLES.formGroup}>\n                                <label className={IDEA_STYLES.label}>내용</label>\n                                <textarea\n                                    value={editingIdea?.content || ''}\n                                    onChange={(e) => setEditingIdea(prev => prev ? { ...prev, content: e.target.value } : null)}\n                                    className={IDEA_STYLES.textarea}\n                                    rows={4}\n                                    placeholder=\"아이디어의 상세한 설명을 입력하세요...\"\n                                />\n                            </div>\n\n                            <div className=\"grid grid-cols-3 gap-4\">\n                                <div className={IDEA_STYLES.formGroup}>\n                                    <label className={IDEA_STYLES.label}>카테고리</label>\n                                    <select\n                                        value={editingIdea?.category || 'other'}\n                                        onChange={(e) => setEditingIdea(prev => prev ? { ...prev, category: e.target.value as IdeaItem['category'] } : null)}\n                                        className={IDEA_STYLES.select}\n                                    >\n                                        {Object.entries(CATEGORY_STYLES).map(([key, value]) => (\n                                            <option key={key} value={key}>{value.label}</option>\n                                        ))}\n                                    </select>\n                                </div>\n\n                                <div className={IDEA_STYLES.formGroup}>\n                                    <label className={IDEA_STYLES.label}>개발 단계</label>\n                                    <select\n                                        value={editingIdea?.stage || 'initial'}\n                                        onChange={(e) => setEditingIdea(prev => prev ? { ...prev, stage: e.target.value as IdeaItem['stage'] } : null)}\n                                        className={IDEA_STYLES.select}\n                                    >\n                                        {Object.entries(STAGE_STYLES).map(([key, value]) => (\n                                            <option key={key} value={key}>{value.label}</option>\n                                        ))}\n                                    </select>\n                                </div>\n\n                                <div className={IDEA_STYLES.formGroup}>\n                                    <label className={IDEA_STYLES.label}>우선순위</label>\n                                    <select\n                                        value={editingIdea?.priority || 'medium'}\n                                        onChange={(e) => setEditingIdea(prev => prev ? { ...prev, priority: e.target.value as IdeaItem['priority'] } : null)}\n                                        className={IDEA_STYLES.select}\n                                    >\n                                        <option value=\"low\">낮음</option>\n                                        <option value=\"medium\">보통</option>\n                                        <option value=\"high\">높음</option>\n                                    </select>\n                                </div>\n                            </div>\n\n                            <div className={IDEA_STYLES.formGroup}>\n                                <label className={IDEA_STYLES.label}>태그 (쉼표로 구분)</label>\n                                <input\n                                    type=\"text\"\n                                    value={editingIdea?.tags.join(', ') || ''}\n                                    onChange={(e) => setEditingIdea(prev => prev ? { ...prev, tags: e.target.value.split(',').map(t => t.trim()).filter(Boolean) } : null)}\n                                    className={IDEA_STYLES.input}\n                                    placeholder=\"예: 판타지, 마법, 모험\"\n                                />\n                            </div>\n\n                            <div className={IDEA_STYLES.formGroup}>\n                                <label className={IDEA_STYLES.label}>메모</label>\n                                <textarea\n                                    value={editingIdea?.notes || ''}\n                                    onChange={(e) => setEditingIdea(prev => prev ? { ...prev, notes: e.target.value } : null)}\n                                    className={IDEA_STYLES.textarea}\n                                    rows={3}\n                                    placeholder=\"추가 메모나 영감의 출처를 기록하세요...\"\n                                />\n                            </div>\n                        </div>\n\n                        <div className={IDEA_STYLES.modalFooter}>\n                            <button\n                                onClick={() => {\n                                    setEditingIdea(null);\n                                    setShowAddModal(false);\n                                }}\n                                className={`${IDEA_STYLES.button} ${IDEA_STYLES.secondaryButton}`}\n                            >\n                                취소\n                            </button>\n                            <button\n                                onClick={saveIdea}\n                                className={`${IDEA_STYLES.button} ${IDEA_STYLES.primaryButton}`}\n                            >\n                                저장\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 12005, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/hooks/useAutoSave.ts"],"sourcesContent":["'use client';\n\nimport { useCallback, useRef, useEffect } from 'react';\nimport { Logger } from '../../../../shared/logger';\n\ninterface UseAutoSaveOptions {\n  projectId: string;\n  delay?: number; // 기본값: 3.5초 (노션 스타일)\n  onSave: () => Promise<void>;\n  onSaveSuccess?: () => void;\n  onSaveError?: (error: Error) => void;\n}\n\n/**\n * 🔥 노션 스타일 자동 저장 Hook - 타이핑 중단 후 저장\n * \n * 특징:\n * - 사용자가 타이핑을 멈춘 후에만 저장 (노션 방식)\n * - 타이핑 중에는 절대 저장하지 않음\n * - 3.5초 딜레이로 여유로운 사용자 경험 제공\n * - 에러 처리 및 재시도 로직\n * - 저장 상태 추적\n */\nexport function useAutoSave({\n  projectId,\n  delay = 5000, // 🔥 5초로 증가 (글 삭제 방지 - 기가차드 수정)\n  onSave,\n  onSaveSuccess,\n  onSaveError\n}: UseAutoSaveOptions) {\n  const saveTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const isLoadingRef = useRef(false);\n  const retryCountRef = useRef(0);\n  const lastTypingTimeRef = useRef<number>(0); // 🔥 마지막 타이핑 시간 추적\n  const maxRetries = 3;\n\n  // 🔥 노션 스타일 Debounced 저장 (타이핑 중단 후에만)\n  const debouncedSave = useCallback(() => {\n    // 🔥 타이핑 시간 업데이트\n    lastTypingTimeRef.current = Date.now();\n    \n    // 기존 타이머 취소\n    if (saveTimerRef.current) {\n      clearTimeout(saveTimerRef.current);\n    }\n\n    // 새 타이머 설정 - 사용자가 타이핑을 멈춘 후에만 실행\n    saveTimerRef.current = setTimeout(async () => {\n      const timeSinceLastTyping = Date.now() - lastTypingTimeRef.current;\n      \n      // 🔥 핵심: 마지막 타이핑 후 충분한 시간이 지났는지 확인\n      if (timeSinceLastTyping < delay * 0.9) { // 딜레이의 90% 이상 대기\n        Logger.debug('AUTO_SAVE', 'Still typing, postponing save', { \n          projectId, \n          timeSinceLastTyping,\n          requiredDelay: delay \n        });\n        // 다시 스케줄링\n        debouncedSave();\n        return;\n      }\n      \n      if (isLoadingRef.current) {\n        Logger.debug('AUTO_SAVE', 'Save already in progress, skipping', { projectId });\n        return;\n      }\n\n      try {\n        isLoadingRef.current = true;\n        const startTime = Date.now();\n        \n        Logger.debug('AUTO_SAVE', '💾 Starting auto-save (typing stopped)', { \n          projectId,\n          timeSinceLastTyping \n        });\n        \n        await onSave();\n        retryCountRef.current = 0; // 성공 시 재시도 카운터 리셋\n        \n        const duration = Date.now() - startTime;\n        Logger.info('AUTO_SAVE', '✅ Auto-save completed', { \n          projectId, \n          duration: `${duration}ms`,\n          timeSinceLastTyping\n        });\n        \n        onSaveSuccess?.();\n      } catch (error) {\n        const errorObj = error instanceof Error ? error : new Error(String(error));\n        Logger.error('AUTO_SAVE', '❌ Auto-save failed', errorObj);\n        \n        // 재시도 로직\n        if (retryCountRef.current < maxRetries) {\n          retryCountRef.current++;\n          Logger.warn('AUTO_SAVE', `Retrying save (${retryCountRef.current}/${maxRetries})`, { projectId });\n          \n          // 재시도 딜레이 (2초, 4초, 8초로 점진적 증가)\n          setTimeout(() => {\n            debouncedSave();\n          }, Math.pow(2, retryCountRef.current) * 1000);\n        } else {\n          Logger.error('AUTO_SAVE', 'Max retries exceeded', { projectId });\n          onSaveError?.(errorObj);\n        }\n      } finally {\n        isLoadingRef.current = false;\n        saveTimerRef.current = null;\n      }\n    }, delay);\n  }, [projectId, delay, onSave, onSaveSuccess, onSaveError]);\n\n  // 🔥 즉시 저장 (Ctrl+S용)\n  const forceSave = useCallback(async () => {\n    // 기존 debounced 저장 취소\n    if (saveTimerRef.current) {\n      clearTimeout(saveTimerRef.current);\n      saveTimerRef.current = null;\n    }\n\n    if (isLoadingRef.current) {\n      Logger.debug('AUTO_SAVE', 'Save already in progress, cannot force save', { projectId });\n      return;\n    }\n\n    try {\n      isLoadingRef.current = true;\n      const startTime = Date.now();\n      \n      Logger.info('AUTO_SAVE', 'Starting force save', { projectId });\n      \n      await onSave();\n      retryCountRef.current = 0;\n      \n      const duration = Date.now() - startTime;\n      Logger.info('AUTO_SAVE', '✅ Force save completed', { \n        projectId, \n        duration: `${duration}ms` \n      });\n      \n      onSaveSuccess?.();\n    } catch (error) {\n      const errorObj = error instanceof Error ? error : new Error(String(error));\n      Logger.error('AUTO_SAVE', '❌ Force save failed', errorObj);\n      onSaveError?.(errorObj);\n    } finally {\n      isLoadingRef.current = false;\n    }\n  }, [projectId, onSave, onSaveSuccess, onSaveError]);\n\n  // 🔥 컴포넌트 언마운트 시 정리\n  useEffect(() => {\n    return () => {\n      if (saveTimerRef.current) {\n        clearTimeout(saveTimerRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    debouncedSave,\n    forceSave,\n    isLoading: isLoadingRef.current,\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 12154, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/hooks/useProjectData.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { Logger } from '../../../../shared/logger';\nimport { calculateWriterStats, type WriterStats as WriterStatsType } from '../editor/WriterStats';\nimport { useAutoSave } from './useAutoSave';\nimport { ProjectCharacter, ProjectStructure, ProjectNote } from '../../../../shared/types';\nimport useStructureStore from '../../../stores/useStructureStore'; // 🔥 스토어 import 추가\n\n// 저장 상태 타입\ntype SaveStatus = 'unsaved' | 'saving' | 'saved' | 'error';\n\ninterface UseProjectDataReturn {\n  // 🔥 로딩 및 에러 상태\n  isLoading: boolean;\n  error: string | null;\n\n  // 프로젝트 상태\n  title: string;\n  setTitle: (title: string) => void;\n  content: string;\n  setContent: (content: string) => void;\n  chapters: string; // JSON 문자열\n  setChapters: (chapters: string) => void;\n  lastSaved: Date | null;\n  saveStatus: SaveStatus;\n\n  // 작가 데이터\n  characters: ProjectCharacter[];\n  setCharacters: (characters: ProjectCharacter[]) => void;\n  structure: ProjectStructure[];\n  setStructure: (structure: ProjectStructure[]) => void;\n  notes: ProjectNote[]; // 🔥 notes 추가\n  setNotes: (notes: ProjectNote[]) => void; // 🔥 setNotes 추가\n  writerStats: WriterStatsType;\n\n  // 액션\n  loadProject: () => Promise<void>;\n  saveProject: () => Promise<void>;\n  forceSave: () => Promise<void>; // 🔥 즉시 저장 (Ctrl+S)\n  updateWriterStats: () => void;\n  setWordGoal: (goal: number) => void;\n}\n\nexport function useProjectData(projectId: string): UseProjectDataReturn {\n  const sessionStartRef = useRef<number>(Date.now());\n\n  // 🔥 성능 최적화: 기본 날짜 메모이제이션 (new Date() 반복 생성 방지)\n  const defaultDate = useMemo(() => new Date(), []);\n\n  // 🔥 성능 최적화: 기본 데이터 메모이제이션 (중복 객체 생성 방지)\n  const defaultCharacters = useMemo(() => [\n    {\n      id: '1',\n      projectId: projectId,\n      name: '주인공',\n      role: '주요 인물',\n      notes: '용감하고 정의로운 성격',\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    {\n      id: '2',\n      projectId: projectId,\n      name: '조력자',\n      role: '조력자',\n      notes: '지혜롭고 경험이 많음',\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    {\n      id: '3',\n      projectId: projectId,\n      name: '적대자',\n      role: '적대자',\n      notes: '야망이 크고 냉혹함',\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n  ], [projectId, defaultDate]);\n\n  const defaultNotes = useMemo(() => [\n    {\n      id: '1',\n      projectId: projectId,\n      title: '첫 번째 메모',\n      content: '이야기의 핵심 아이디어를 여기에 적어보세요.',\n      tags: ['아이디어'],\n      color: '#3b82f6',\n      isPinned: false,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    {\n      id: '2',\n      projectId: projectId,\n      title: '설정 노트',\n      content: '세계관, 배경 설정에 대한 내용을 정리합니다.',\n      tags: ['설정', '세계관'],\n      color: '#10b981',\n      isPinned: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n  ], [projectId, defaultDate]);\n\n  const defaultStructure = useMemo(() => [\n    {\n      id: '1',\n      projectId: projectId,\n      type: 'chapter' as const,\n      title: '1챕터: 시작',\n      isActive: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    {\n      id: '2',\n      projectId: projectId,\n      type: 'synopsis' as const,\n      title: '첫 번째 장면',\n      isActive: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    {\n      id: '3',\n      projectId: projectId,\n      type: 'synopsis' as const,\n      title: '두 번째 장면',\n      isActive: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    {\n      id: '4',\n      projectId: projectId,\n      type: 'chapter' as const,\n      title: '2챕터: 전개',\n      isActive: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    {\n      id: '5',\n      projectId: projectId,\n      type: 'synopsis' as const,\n      title: '세 번째 장면',\n      isActive: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n    {\n      id: '6',\n      projectId: projectId,\n      type: 'idea' as const,\n      title: '아이디어 메모',\n      isActive: true,\n      createdAt: defaultDate,\n      updatedAt: defaultDate\n    },\n  ], [projectId, defaultDate]);\n\n  // 🔥 로딩 및 에러 상태 추가\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // 🔥 기본 프로젝트 상태\n  const [title, setTitle] = useState<string>('');\n  const [content, setContent] = useState<string>('');\n  const [chapters, setChapters] = useState<string>('{}'); // JSON 문자열\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const [saveStatus, setSaveStatus] = useState<SaveStatus>('saved');\n\n  // 🔥 ref로 최신 값 추적 (성능 최적화: useEffect 제거)\n  const titleRef = useRef<string>('');\n  const contentRef = useRef<string>('');\n  const chaptersRef = useRef<string>('{}'); // 🔥 chapters ref 추가\n\n  // 🔥 최적화: setter에서 직접 ref 업데이트 (useEffect 불필요)\n  const setTitleOptimized = useCallback((newTitle: string) => {\n    titleRef.current = newTitle;\n    setTitle(newTitle);\n  }, []);\n\n  const setContentOptimized = useCallback((newContent: string) => {\n    contentRef.current = newContent;\n    setContent(newContent);\n  }, []);\n\n  const setChaptersOptimized = useCallback((newChapters: string) => {\n    console.log('🔥 DEBUG: setChaptersOptimized called', { newChapters, currentRef: chaptersRef.current });\n    chaptersRef.current = newChapters;\n    setChapters(newChapters);\n    console.log('🔥 DEBUG: setChaptersOptimized completed', { updatedRef: chaptersRef.current });\n  }, []);\n\n  // 🔥 작가 데이터\n  const [characters, setCharacters] = useState<ProjectCharacter[]>([]);\n  const [structure, setStructure] = useState<ProjectStructure[]>([]);\n  const [notes, setNotes] = useState<ProjectNote[]>([]); // 🔥 notes 상태 추가\n  const [writerStats, setWriterStats] = useState<WriterStatsType>({\n    wordCount: 0,\n    charCount: 0,\n    paragraphCount: 0,\n    readingTime: 0,\n    wordGoal: 1000,\n    progress: 0,\n    sessionTime: 0,\n    wpm: 0\n  });\n\n  // 🔥 프로젝트 로드 (무한루프 방지)\n  const loadProject = useCallback(async (): Promise<void> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      Logger.debug('PROJECT_DATA', 'Loading project', { projectId });\n      // retry helper: 짧은 지연으로 재시도 (DB 동기화 지연 대응)\n      const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n      const maxAttempts = 4;\n      let attempt = 0;\n      let result: any = null;\n      while (attempt < maxAttempts) {\n        attempt += 1;\n        try {\n          result = await window.electronAPI.projects.getById(projectId);\n          // 성공적으로 데이터를 받았거나 다른 에러가 발생하면 루프 종료\n          if (result?.success) break;\n          // 프로젝트를 찾을 수 없다는 에러인 경우에만 재시도\n          if (!(result && result.error && String(result.error).includes('찾을 수 없습니다'))) {\n            break;\n          }\n          Logger.debug('PROJECT_DATA', `Project not found, retrying (${attempt}/${maxAttempts})`, { projectId });\n        } catch (err) {\n          Logger.warn('PROJECT_DATA', `Attempt ${attempt} failed`, err);\n        }\n\n        // 지수적 백오프: 100ms, 200ms, 400ms...\n        await sleep(100 * Math.pow(2, attempt - 1));\n      }\n\n\n      // result는 위에서 설정된 값\n      if (result && result.success && result.data) {\n        setTitle(result.data.title);\n        setContent(result.data.content || '');\n\n        // 🔥 chapters 데이터 로드 및 ref 동기화\n        const chaptersData = result.data.chapters || '{}';\n        setChapters(chaptersData);\n        chaptersRef.current = chaptersData; // ref도 동기화\n\n        setLastSaved(new Date(result.data.lastModified));\n        setSaveStatus('saved'); // 🔥 저장 상태 업데이트\n\n        // 🔥 실제 데이터 로드 - 캐릭터 데이터\n        try {\n          const charactersResult = await window.electronAPI.projects.getCharacters(projectId);\n          if (charactersResult.success && charactersResult.data) {\n            setCharacters(charactersResult.data);\n            Logger.debug('PROJECT_DATA', 'Characters loaded successfully', { count: charactersResult.data.length });\n          } else {\n            Logger.warn('PROJECT_DATA', 'No characters found, using defaults');\n            // 기본 캐릭터 데이터\n            setCharacters(defaultCharacters);\n          }\n        } catch (error) {\n          Logger.warn('PROJECT_DATA', 'Failed to load characters, using defaults', error);\n          setCharacters(defaultCharacters);\n        }\n\n        // 🔥 실제 데이터 로드 - 구조 데이터\n        try {\n          const structureResult = await window.electronAPI.projects.getStructure(projectId);\n          if (structureResult.success && structureResult.data) {\n            setStructure(structureResult.data);\n            // 🔥 DB 데이터를 Zustand 스토어에 동기화\n            useStructureStore.getState().setStructures(projectId, structureResult.data);\n            Logger.debug('PROJECT_DATA', 'Structure loaded and synced to store', { count: structureResult.data.length });\n          } else {\n            Logger.warn('PROJECT_DATA', 'No structure found, using defaults');\n            // 기본 구조 데이터\n            setStructure(defaultStructure);\n          }\n        } catch (error) {\n          Logger.warn('PROJECT_DATA', 'Failed to load structure, using defaults', error);\n          setStructure(defaultStructure);\n        }\n\n        // 🔥 실제 데이터 로드 - 노트 데이터\n        try {\n          const notesResult = await window.electronAPI.projects.getNotes(projectId);\n          if (notesResult.success && notesResult.data) {\n            setNotes(notesResult.data);\n            Logger.debug('PROJECT_DATA', 'Notes loaded successfully', { count: notesResult.data.length });\n          } else {\n            Logger.warn('PROJECT_DATA', 'No notes found, using defaults');\n            // 기본 노트 데이터\n            setNotes(defaultNotes);\n          }\n        } catch (error) {\n          Logger.warn('PROJECT_DATA', 'Failed to load notes, using defaults', error);\n          setNotes(defaultNotes);\n        }\n\n        Logger.info('PROJECT_DATA', 'Project loaded successfully');\n      } else {\n        throw new Error(result.error || 'Failed to load project');\n      }\n    } catch (error) {\n      Logger.error('PROJECT_DATA', 'Error loading project', error);\n      setError(error instanceof Error ? error.message : 'Failed to load project');\n\n      // 🔥 실패 시 로컬 백업 확인\n      try {\n        const backup = localStorage.getItem(`project_backup_${projectId}`);\n        if (backup) {\n          const backupData = JSON.parse(backup);\n          setTitle(backupData.title || '');\n          setContent(backupData.content || '');\n          setSaveStatus('unsaved');\n          Logger.info('PROJECT_DATA', 'Loaded from local backup');\n        }\n      } catch (storageError) {\n        Logger.error('PROJECT_DATA', 'Failed to load backup', storageError);\n      }\n    } finally {\n      setIsLoading(false); // 🔥 무조건 로딩 상태 해제\n    }\n  }, [projectId]);\n\n  // 🔥 프로젝트 저장 함수 (ref로 무한루프 방지)\n  const saveProjectInternal = useCallback(async (): Promise<void> => {\n    try {\n      const currentTitle = titleRef.current;\n      const currentContent = contentRef.current;\n      const currentChapters = chaptersRef.current; // 🔥 ref에서 최신 chapters 가져오기\n\n      if (!currentTitle.trim() && !currentContent.trim()) return;\n\n      Logger.debug('PROJECT_DATA', 'Saving project to server', { projectId });\n\n      // 🔥 로컬 백업 먼저 저장 (즉시)\n      try {\n        const backupData = { title: currentTitle, content: currentContent, chapters: currentChapters, lastModified: new Date() };\n        localStorage.setItem(`project_backup_${projectId}`, JSON.stringify(backupData));\n        Logger.debug('PROJECT_DATA', 'Local backup saved');\n      } catch (storageError) {\n        Logger.warn('PROJECT_DATA', 'Failed to save local backup', storageError);\n      }\n\n      // 🔥 즉시 서버 저장\n      const payload: any = {\n        title: currentTitle,\n        content: currentContent,\n        chapters: currentChapters, // 🔥 ref에서 가져온 최신 chapters 사용\n        lastModified: new Date()\n      };\n\n      console.log('🔥 DEBUG: Saving payload to server', { payload, chaptersLength: currentChapters.length, chaptersPreview: currentChapters.substring(0, 100) });\n\n      const result = await window.electronAPI.projects.update(projectId, payload);\n\n      if (result.success) {\n        setLastSaved(new Date());\n        setSaveStatus('saved');\n        Logger.info('PROJECT_DATA', 'Project saved successfully to server', {\n          hasChapters: !!currentChapters && currentChapters !== '{}'\n        });\n\n        // 성공 시 로컬 백업 제거\n        try {\n          localStorage.removeItem(`project_backup_${projectId}`);\n        } catch (e) {\n          // 무시\n        }\n      } else {\n        throw new Error(result.error || 'Failed to save project');\n      }\n    } catch (error) {\n      Logger.error('PROJECT_DATA', 'Error saving project', error);\n      setSaveStatus('error');\n      throw error;\n    }\n  }, [projectId]); // 🔥 projectId만 dependency로 설정\n\n  // 🔥 노션 스타일 autoSave Hook 사용 - 타이핑 중단 후 저장\n  const { debouncedSave, forceSave, isLoading: isSaving } = useAutoSave({\n    projectId,\n    delay: 3000, // 🔥 3초 딜레이 (더 안전한 타이핑) - 타이핑 멈춘 후에만 저장\n    onSave: saveProjectInternal,\n    onSaveSuccess: () => {\n      setSaveStatus('saved');\n      setLastSaved(new Date());\n      Logger.info('PROJECT_DATA', '✅ 자동 저장 완료', { projectId });\n    },\n    onSaveError: (error: Error) => {\n      setSaveStatus('error');\n      Logger.error('PROJECT_DATA', '❌ 자동 저장 실패', { error: error.message, projectId });\n\n      // 에러 발생 시 로컬 백업 생성\n      try {\n        localStorage.setItem(`project_backup_${projectId}`, JSON.stringify({ title, content }));\n        Logger.info('PROJECT_DATA', '📦 로컬 백업 저장됨', { projectId });\n      } catch (backupError) {\n        Logger.error('PROJECT_DATA', '❌ 로컬 백업 실패', backupError);\n      }\n    }\n  });\n\n  // 🔥 호환성을 위한 saveProject 함수\n  const saveProject = useCallback(async (): Promise<void> => {\n    await forceSave();\n  }, [forceSave]);\n\n  // 🔥 비용이 큰 통계 계산을 메모이제이션 (Hook 규칙 준수)\n  const memoizedStats = useMemo(() => {\n    if (!content) return writerStats;\n    return calculateWriterStats(content, writerStats.wordGoal, sessionStartRef.current);\n  }, [content, writerStats.wordGoal, writerStats]);\n\n  // 🔥 작가 통계 업데이트 (메모이제이션된 값 사용)\n  const updateWriterStats = useCallback((): void => {\n    setWriterStats(memoizedStats);\n  }, [memoizedStats]);\n\n  const setWordGoal = useCallback((goal: number): void => {\n    setWriterStats((prev: WriterStatsType) => ({\n      ...prev,\n      wordGoal: goal,\n      progress: Math.min(100, Math.round((prev.wordCount / goal) * 100))\n    }));\n  }, []);\n\n  // 🔥 프로젝트 초기 로드 (성능 최적화: loadProject를 useRef로 안전하게 관리)\n  const loadProjectRef = useRef(loadProject);\n  loadProjectRef.current = loadProject;\n\n  useEffect(() => {\n    if (projectId) {\n      loadProjectRef.current();\n    }\n  }, [projectId]); // 🔥 projectId만 dependency로 - 무한루프 완전 방지\n\n  // 🔥 자동 저장 시스템 (성능 최적화: ref로 무한루프 방지)\n  const debouncedSaveRef = useRef(debouncedSave);\n  debouncedSaveRef.current = debouncedSave;\n\n  useEffect(() => {\n    // 🔥 JSON 문자열 검증: 빈 객체가 아닌 실제 데이터가 있을 때만 저장\n    const hasRealChapters = (() => {\n      try {\n        const parsed = JSON.parse(chapters);\n        return Object.keys(parsed).length > 0;\n      } catch {\n        return false;\n      }\n    })();\n\n    if (title.trim() || content.trim() || hasRealChapters) {\n      setSaveStatus('unsaved');\n      debouncedSaveRef.current(); // ref를 통해 안전하게 호출\n    }\n  }, [title, content, chapters]); // 🔥 chapters 추가로 auto-save 트리거\n\n  // 🔥 저장 중 상태 관리\n  useEffect(() => {\n    if (isSaving) {\n      setSaveStatus('saving');\n    }\n  }, [isSaving]);\n\n  // 🔥 통계 업데이트 (기가차드 수정: interval 제거로 커서 리셋 완전 해결)\n  useEffect(() => {\n    updateWriterStats();\n    // 🔥 30초 interval 완전 제거 - 커서 리셋 원인 제거\n    // 세션 시간은 사용자가 통계를 볼 때만 계산하도록 변경\n  }, []); // 🔥 dependency 완전 제거 - useEffect 지옥 해결\n\n  // 🔥 캐릭터 저장 함수\n  const saveCharacters = useCallback(async (charactersToSave: ProjectCharacter[]): Promise<void> => {\n    try {\n      Logger.debug('PROJECT_DATA', 'Saving characters', { count: charactersToSave.length });\n\n      // 🔥 실제 API 호출\n      const result = await window.electronAPI.projects.updateCharacters(projectId, charactersToSave);\n\n      if (result.success) {\n        Logger.info('PROJECT_DATA', 'Characters saved successfully');\n      } else {\n        throw new Error(result.error || 'Failed to save characters');\n      }\n    } catch (error) {\n      Logger.error('PROJECT_DATA', 'Error saving characters', error);\n      throw error;\n    }\n  }, [projectId]);\n\n  // 🔥 메모 저장 함수\n  const saveNotes = useCallback(async (notesToSave: ProjectNote[]): Promise<void> => {\n    try {\n      Logger.debug('PROJECT_DATA', 'Saving notes', { count: notesToSave.length });\n\n      // 🔥 실제 API 호출\n      const result = await window.electronAPI.projects.updateNotes(projectId, notesToSave);\n\n      if (result.success) {\n        Logger.info('PROJECT_DATA', 'Notes saved successfully');\n      } else {\n        throw new Error(result.error || 'Failed to save notes');\n      }\n    } catch (error) {\n      Logger.error('PROJECT_DATA', 'Error saving notes', error);\n      throw error;\n    }\n  }, [projectId]);\n\n  // 🔥 캐릭터 변경 핸들러 (자동 저장 포함)\n  const handleCharactersChange = useCallback(async (newCharacters: ProjectCharacter[]): Promise<void> => {\n    setCharacters(newCharacters);\n\n    try {\n      await saveCharacters(newCharacters);\n    } catch (error) {\n      Logger.error('PROJECT_DATA', 'Failed to save characters automatically', error);\n      // 사용자에게 에러 표시할 수 있음\n    }\n  }, [saveCharacters]);\n\n  // 🔥 메모 변경 핸들러 (자동 저장 포함)  \n  const handleNotesChange = useCallback(async (newNotes: ProjectNote[]): Promise<void> => {\n    setNotes(newNotes);\n\n    try {\n      await saveNotes(newNotes);\n    } catch (error) {\n      Logger.error('PROJECT_DATA', 'Failed to save notes automatically', error);\n      // 사용자에게 에러 표시할 수 있음\n    }\n  }, [saveNotes]);\n\n  return {\n    // 🔥 로딩 및 에러 상태\n    isLoading,\n    error,\n\n    // 🔥 기본 프로젝트 데이터 (성능 최적화된 setter)\n    title,\n    setTitle: setTitleOptimized,\n    content,\n    setContent: setContentOptimized,\n    chapters,\n    setChapters: setChaptersOptimized, // 🔥 최적화된 setter 사용\n    lastSaved,\n    saveStatus,\n\n    // 🔥 작가 데이터\n    characters,\n    setCharacters,\n    structure,\n    setStructure,\n    notes, // 🔥 notes 추가\n    setNotes, // 🔥 setNotes 추가\n    writerStats,\n\n    // 🔥 액션 함수들\n    loadProject,\n    saveProject,\n    forceSave, // 🔥 새로운 즉시 저장 함수\n    updateWriterStats,\n    setWordGoal\n  };\n}\n"],"names":[],"mappings":";;;AAEA;AACA;AACA;AACA;AAEA,2PAAmE,mBAAmB;AAPtF;;;;;;AA4CO,SAAS,eAAe,SAAiB;IAC9C,MAAM,kBAAkB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAU,KAAK,GAAG;IAE/C,gDAAgD;IAChD,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM,IAAI,QAAQ,EAAE;IAEhD,yCAAyC;IACzC,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM;YACtC;gBACE,IAAI;gBACJ,WAAW;gBACX,MAAM;gBACN,MAAM;gBACN,OAAO;gBACP,WAAW;gBACX,WAAW;YACb;YACA;gBACE,IAAI;gBACJ,WAAW;gBACX,MAAM;gBACN,MAAM;gBACN,OAAO;gBACP,WAAW;gBACX,WAAW;YACb;YACA;gBACE,IAAI;gBACJ,WAAW;gBACX,MAAM;gBACN,MAAM;gBACN,OAAO;gBACP,WAAW;gBACX,WAAW;YACb;SACD,EAAE;QAAC;QAAW;KAAY;IAE3B,MAAM,eAAe,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM;YACjC;gBACE,IAAI;gBACJ,WAAW;gBACX,OAAO;gBACP,SAAS;gBACT,MAAM;oBAAC;iBAAO;gBACd,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX,WAAW;YACb;YACA;gBACE,IAAI;gBACJ,WAAW;gBACX,OAAO;gBACP,SAAS;gBACT,MAAM;oBAAC;oBAAM;iBAAM;gBACnB,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX,WAAW;YACb;SACD,EAAE;QAAC;QAAW;KAAY;IAE3B,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM;YACrC;gBACE,IAAI;gBACJ,WAAW;gBACX,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX,WAAW;YACb;YACA;gBACE,IAAI;gBACJ,WAAW;gBACX,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX,WAAW;YACb;YACA;gBACE,IAAI;gBACJ,WAAW;gBACX,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX,WAAW;YACb;YACA;gBACE,IAAI;gBACJ,WAAW;gBACX,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX,WAAW;YACb;YACA;gBACE,IAAI;gBACJ,WAAW;gBACX,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX,WAAW;YACb;YACA;gBACE,IAAI;gBACJ,WAAW;gBACX,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX,WAAW;YACb;SACD,EAAE;QAAC;QAAW;KAAY;IAE3B,mBAAmB;IACnB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IACpD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,gBAAgB;IAChB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAC3C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAC/C,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,OAAO,WAAW;IACnE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IACxD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc;IAEzD,yCAAyC;IACzC,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAU;IAChC,MAAM,aAAa,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAU;IAClC,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAU,OAAO,qBAAqB;IAE/D,+CAA+C;IAC/C,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACrC,SAAS,OAAO,GAAG;QACnB,SAAS;IACX,GAAG,EAAE;IAEL,MAAM,sBAAsB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACvC,WAAW,OAAO,GAAG;QACrB,WAAW;IACb,GAAG,EAAE;IAEL,MAAM,uBAAuB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACxC,QAAQ,GAAG,CAAC,yCAAyC;YAAE;YAAa,YAAY,YAAY,OAAO;QAAC;QACpG,YAAY,OAAO,GAAG;QACtB,YAAY;QACZ,QAAQ,GAAG,CAAC,4CAA4C;YAAE,YAAY,YAAY,OAAO;QAAC;IAC5F,GAAG,EAAE;IAEL,YAAY;IACZ,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAsB,EAAE;IACnE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAsB,EAAE;IACjE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB,EAAE,GAAG,iBAAiB;IACxE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAmB;QAC9D,WAAW;QACX,WAAW;QACX,gBAAgB;QAChB,aAAa;QACb,UAAU;QACV,UAAU;QACV,aAAa;QACb,KAAK;IACP;IAEA,uBAAuB;IACvB,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QAC9B,IAAI;YACF,aAAa;YACb,SAAS;YACT,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,mBAAmB;gBAAE;YAAU;YAC5D,2CAA2C;YAC3C,MAAM,QAAQ,CAAC,KAAe,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;YAEzE,MAAM,cAAc;YACpB,IAAI,UAAU;YACd,IAAI,SAAc;YAClB,MAAO,UAAU,YAAa;gBAC5B,WAAW;gBACX,IAAI;oBACF,SAAS,MAAM,OAAO,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC;oBACnD,oCAAoC;oBACpC,IAAI,QAAQ,SAAS;oBACrB,8BAA8B;oBAC9B,IAAI,CAAC,CAAC,UAAU,OAAO,KAAK,IAAI,OAAO,OAAO,KAAK,EAAE,QAAQ,CAAC,YAAY,GAAG;wBAC3E;oBACF;oBACA,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,6BAA6B,EAAE,QAAQ,CAAC,EAAE,YAAY,CAAC,CAAC,EAAE;wBAAE;oBAAU;gBACtG,EAAE,OAAO,KAAK;oBACZ,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,OAAO,CAAC,EAAE;gBAC3D;gBAEA,kCAAkC;gBAClC,MAAM,MAAM,MAAM,KAAK,GAAG,CAAC,GAAG,UAAU;YAC1C;YAGA,oBAAoB;YACpB,IAAI,UAAU,OAAO,OAAO,IAAI,OAAO,IAAI,EAAE;gBAC3C,SAAS,OAAO,IAAI,CAAC,KAAK;gBAC1B,WAAW,OAAO,IAAI,CAAC,OAAO,IAAI;gBAElC,+BAA+B;gBAC/B,MAAM,eAAe,OAAO,IAAI,CAAC,QAAQ,IAAI;gBAC7C,YAAY;gBACZ,YAAY,OAAO,GAAG,cAAc,WAAW;gBAE/C,aAAa,IAAI,KAAK,OAAO,IAAI,CAAC,YAAY;gBAC9C,cAAc,UAAU,gBAAgB;gBAExC,yBAAyB;gBACzB,IAAI;oBACF,MAAM,mBAAmB,MAAM,OAAO,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC;oBACzE,IAAI,iBAAiB,OAAO,IAAI,iBAAiB,IAAI,EAAE;wBACrD,cAAc,iBAAiB,IAAI;wBACnC,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,kCAAkC;4BAAE,OAAO,iBAAiB,IAAI,CAAC,MAAM;wBAAC;oBACvG,OAAO;wBACL,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;wBAC5B,aAAa;wBACb,cAAc;oBAChB;gBACF,EAAE,OAAO,OAAO;oBACd,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB,6CAA6C;oBACzE,cAAc;gBAChB;gBAEA,wBAAwB;gBACxB,IAAI;oBACF,MAAM,kBAAkB,MAAM,OAAO,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC;oBACvE,IAAI,gBAAgB,OAAO,IAAI,gBAAgB,IAAI,EAAE;wBACnD,aAAa,gBAAgB,IAAI;wBACjC,8BAA8B;wBAC9B,8IAAA,CAAA,UAAiB,CAAC,QAAQ,GAAG,aAAa,CAAC,WAAW,gBAAgB,IAAI;wBAC1E,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,wCAAwC;4BAAE,OAAO,gBAAgB,IAAI,CAAC,MAAM;wBAAC;oBAC5G,OAAO;wBACL,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;wBAC5B,YAAY;wBACZ,aAAa;oBACf;gBACF,EAAE,OAAO,OAAO;oBACd,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB,4CAA4C;oBACxE,aAAa;gBACf;gBAEA,wBAAwB;gBACxB,IAAI;oBACF,MAAM,cAAc,MAAM,OAAO,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC;oBAC/D,IAAI,YAAY,OAAO,IAAI,YAAY,IAAI,EAAE;wBAC3C,SAAS,YAAY,IAAI;wBACzB,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,6BAA6B;4BAAE,OAAO,YAAY,IAAI,CAAC,MAAM;wBAAC;oBAC7F,OAAO;wBACL,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;wBAC5B,YAAY;wBACZ,SAAS;oBACX;gBACF,EAAE,OAAO,OAAO;oBACd,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB,wCAAwC;oBACpE,SAAS;gBACX;gBAEA,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;YAC9B,OAAO;gBACL,MAAM,IAAI,MAAM,OAAO,KAAK,IAAI;YAClC;QACF,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,yBAAyB;YACtD,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAElD,mBAAmB;YACnB,IAAI;gBACF,MAAM,SAAS,aAAa,OAAO,CAAC,CAAC,eAAe,EAAE,WAAW;gBACjE,IAAI,QAAQ;oBACV,MAAM,aAAa,KAAK,KAAK,CAAC;oBAC9B,SAAS,WAAW,KAAK,IAAI;oBAC7B,WAAW,WAAW,OAAO,IAAI;oBACjC,cAAc;oBACd,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;gBAC9B;YACF,EAAE,OAAO,cAAc;gBACrB,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,yBAAyB;YACxD;QACF,SAAU;YACR,aAAa,QAAQ,kBAAkB;QACzC;IACF,GAAG;QAAC;KAAU;IAEd,+BAA+B;IAC/B,MAAM,sBAAsB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACtC,IAAI;YACF,MAAM,eAAe,SAAS,OAAO;YACrC,MAAM,iBAAiB,WAAW,OAAO;YACzC,MAAM,kBAAkB,YAAY,OAAO,EAAE,4BAA4B;YAEzE,IAAI,CAAC,aAAa,IAAI,MAAM,CAAC,eAAe,IAAI,IAAI;YAEpD,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,4BAA4B;gBAAE;YAAU;YAErE,sBAAsB;YACtB,IAAI;gBACF,MAAM,aAAa;oBAAE,OAAO;oBAAc,SAAS;oBAAgB,UAAU;oBAAiB,cAAc,IAAI;gBAAO;gBACvH,aAAa,OAAO,CAAC,CAAC,eAAe,EAAE,WAAW,EAAE,KAAK,SAAS,CAAC;gBACnE,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB;YAC/B,EAAE,OAAO,cAAc;gBACrB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB,+BAA+B;YAC7D;YAEA,cAAc;YACd,MAAM,UAAe;gBACnB,OAAO;gBACP,SAAS;gBACT,UAAU;gBACV,cAAc,IAAI;YACpB;YAEA,QAAQ,GAAG,CAAC,sCAAsC;gBAAE;gBAAS,gBAAgB,gBAAgB,MAAM;gBAAE,iBAAiB,gBAAgB,SAAS,CAAC,GAAG;YAAK;YAExJ,MAAM,SAAS,MAAM,OAAO,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW;YAEnE,IAAI,OAAO,OAAO,EAAE;gBAClB,aAAa,IAAI;gBACjB,cAAc;gBACd,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB,wCAAwC;oBAClE,aAAa,CAAC,CAAC,mBAAmB,oBAAoB;gBACxD;gBAEA,gBAAgB;gBAChB,IAAI;oBACF,aAAa,UAAU,CAAC,CAAC,eAAe,EAAE,WAAW;gBACvD,EAAE,OAAO,GAAG;gBACV,KAAK;gBACP;YACF,OAAO;gBACL,MAAM,IAAI,MAAM,OAAO,KAAK,IAAI;YAClC;QACF,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,wBAAwB;YACrD,cAAc;YACd,MAAM;QACR;IACF,GAAG;QAAC;KAAU,GAAG,+BAA+B;IAEhD,2CAA2C;IAC3C,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE,WAAW,QAAQ,EAAE,GAAG,CAAA,GAAA,iKAAA,CAAA,cAAW,AAAD,EAAE;QACpE;QACA,OAAO;QACP,QAAQ;QACR,eAAe;YACb,cAAc;YACd,aAAa,IAAI;YACjB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB,cAAc;gBAAE;YAAU;QACxD;QACA,aAAa,CAAC;YACZ,cAAc;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,cAAc;gBAAE,OAAO,MAAM,OAAO;gBAAE;YAAU;YAE7E,mBAAmB;YACnB,IAAI;gBACF,aAAa,OAAO,CAAC,CAAC,eAAe,EAAE,WAAW,EAAE,KAAK,SAAS,CAAC;oBAAE;oBAAO;gBAAQ;gBACpF,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB,gBAAgB;oBAAE;gBAAU;YAC1D,EAAE,OAAO,aAAa;gBACpB,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,cAAc;YAC7C;QACF;IACF;IAEA,4BAA4B;IAC5B,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QAC9B,MAAM;IACR,GAAG;QAAC;KAAU;IAEd,sCAAsC;IACtC,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QAC5B,IAAI,CAAC,SAAS,OAAO;QACrB,OAAO,CAAA,GAAA,kKAAA,CAAA,uBAAoB,AAAD,EAAE,SAAS,YAAY,QAAQ,EAAE,gBAAgB,OAAO;IACpF,GAAG;QAAC;QAAS,YAAY,QAAQ;QAAE;KAAY;IAE/C,+BAA+B;IAC/B,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACpC,eAAe;IACjB,GAAG;QAAC;KAAc;IAElB,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC/B,eAAe,CAAC,OAA0B,CAAC;gBACzC,GAAG,IAAI;gBACP,UAAU;gBACV,UAAU,KAAK,GAAG,CAAC,KAAK,KAAK,KAAK,CAAC,AAAC,KAAK,SAAS,GAAG,OAAQ;YAC/D,CAAC;IACH,GAAG,EAAE;IAEL,uDAAuD;IACvD,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAC9B,eAAe,OAAO,GAAG;IAEzB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,WAAW;YACb,eAAe,OAAO;QACxB;IACF,GAAG;QAAC;KAAU,GAAG,yCAAyC;IAE1D,sCAAsC;IACtC,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE;IAChC,iBAAiB,OAAO,GAAG;IAE3B,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,4CAA4C;QAC5C,MAAM,kBAAkB,CAAC;YACvB,IAAI;gBACF,MAAM,SAAS,KAAK,KAAK,CAAC;gBAC1B,OAAO,OAAO,IAAI,CAAC,QAAQ,MAAM,GAAG;YACtC,EAAE,OAAM;gBACN,OAAO;YACT;QACF,CAAC;QAED,IAAI,MAAM,IAAI,MAAM,QAAQ,IAAI,MAAM,iBAAiB;YACrD,cAAc;YACd,iBAAiB,OAAO,IAAI,kBAAkB;QAChD;IACF,GAAG;QAAC;QAAO;QAAS;KAAS,GAAG,gCAAgC;IAEhE,gBAAgB;IAChB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,UAAU;YACZ,cAAc;QAChB;IACF,GAAG;QAAC;KAAS;IAEb,iDAAiD;IACjD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACA,sCAAsC;IACtC,gCAAgC;IAClC,GAAG,EAAE,GAAG,wCAAwC;IAEhD,eAAe;IACf,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QACxC,IAAI;YACF,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,qBAAqB;gBAAE,OAAO,iBAAiB,MAAM;YAAC;YAEnF,eAAe;YACf,MAAM,SAAS,MAAM,OAAO,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC,WAAW;YAE7E,IAAI,OAAO,OAAO,EAAE;gBAClB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;YAC9B,OAAO;gBACL,MAAM,IAAI,MAAM,OAAO,KAAK,IAAI;YAClC;QACF,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,2BAA2B;YACxD,MAAM;QACR;IACF,GAAG;QAAC;KAAU;IAEd,cAAc;IACd,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QACnC,IAAI;YACF,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,gBAAgB;gBAAE,OAAO,YAAY,MAAM;YAAC;YAEzE,eAAe;YACf,MAAM,SAAS,MAAM,OAAO,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW;YAExE,IAAI,OAAO,OAAO,EAAE;gBAClB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,gBAAgB;YAC9B,OAAO;gBACL,MAAM,IAAI,MAAM,OAAO,KAAK,IAAI;YAClC;QACF,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,sBAAsB;YACnD,MAAM;QACR;IACF,GAAG;QAAC;KAAU;IAEd,2BAA2B;IAC3B,MAAM,yBAAyB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QAChD,cAAc;QAEd,IAAI;YACF,MAAM,eAAe;QACvB,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,2CAA2C;QACxE,oBAAoB;QACtB;IACF,GAAG;QAAC;KAAe;IAEnB,4BAA4B;IAC5B,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QAC3C,SAAS;QAET,IAAI;YACF,MAAM,UAAU;QAClB,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,gBAAgB,sCAAsC;QACnE,oBAAoB;QACtB;IACF,GAAG;QAAC;KAAU;IAEd,OAAO;QACL,gBAAgB;QAChB;QACA;QAEA,kCAAkC;QAClC;QACA,UAAU;QACV;QACA,YAAY;QACZ;QACA,aAAa;QACb;QACA;QAEA,YAAY;QACZ;QACA;QACA;QACA;QACA;QACA;QACA;QAEA,YAAY;QACZ;QACA;QACA;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 12728, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/hooks/useUIState.ts"],"sourcesContent":["'use client';\n\nimport { useState, useCallback } from 'react';\nimport { Logger } from '../../../../shared/logger';\nimport { useTheme } from '../../../providers/ThemeProvider';\n\ninterface UseUIStateReturn {\n  // UI 상태\n  showLeftSidebar: boolean;\n  showRightSidebar: boolean;\n  showHeader: boolean;\n  isDarkMode: boolean;\n  isFocusMode: boolean;\n  \n  // 액션\n  toggleLeftSidebar: () => void;\n  toggleRightSidebar: () => void;\n  toggleDarkMode: () => void;\n  toggleFocusMode: () => void;\n  setShowHeader: (show: boolean) => void;\n}\n\nexport function useUIState(): UseUIStateReturn {\n  // 🔥 테마 관리를 ThemeProvider로 위임\n  const { resolvedTheme, toggleTheme } = useTheme();\n  \n  // 🔥 UI 상태 (테마 제외)\n  const [showLeftSidebar, setShowLeftSidebar] = useState<boolean>(true);\n  const [showRightSidebar, setShowRightSidebar] = useState<boolean>(false);\n  const [showHeader, setShowHeader] = useState<boolean>(true);\n  const [isFocusMode, setIsFocusMode] = useState<boolean>(false);\n\n  // 🔥 핸들러 함수들\n  const toggleLeftSidebar = useCallback((): void => {\n    setShowLeftSidebar(prev => !prev);\n    Logger.debug('UI_STATE', 'Left sidebar toggled');\n  }, []);\n  \n  const toggleRightSidebar = useCallback((): void => {\n    setShowRightSidebar(prev => !prev);\n    Logger.debug('UI_STATE', 'Right sidebar toggled');\n  }, []);\n  \n  const toggleDarkMode = useCallback((): void => {\n    toggleTheme(); // ThemeProvider의 토글 사용\n    Logger.debug('UI_STATE', 'Dark mode toggled via ThemeProvider');\n  }, [toggleTheme]);\n  \n  const toggleFocusMode = useCallback((): void => {\n    setIsFocusMode(prev => {\n      const newValue = !prev;\n      if (newValue) {\n        setShowLeftSidebar(false);\n        setShowRightSidebar(false);\n      }\n      Logger.info('UI_STATE', `Focus mode ${newValue ? 'enabled' : 'disabled'}`);\n      return newValue;\n    });\n  }, []);\n\n  return {\n    showLeftSidebar,\n    showRightSidebar,\n    showHeader,\n    isDarkMode: resolvedTheme === 'dark', // ThemeProvider에서 가져옴\n    isFocusMode,\n    toggleLeftSidebar,\n    toggleRightSidebar,\n    toggleDarkMode,\n    toggleFocusMode,\n    setShowHeader\n  };\n}"],"names":[],"mappings":";;;AAEA;AACA;AACA;AAJA;;;;AAsBO,SAAS;IACd,8BAA8B;IAC9B,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,8IAAA,CAAA,WAAQ,AAAD;IAE9C,mBAAmB;IACnB,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAChE,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAClE,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IACtD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAExD,aAAa;IACb,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACpC,mBAAmB,CAAA,OAAQ,CAAC;QAC5B,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,YAAY;IAC3B,GAAG,EAAE;IAEL,MAAM,qBAAqB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACrC,oBAAoB,CAAA,OAAQ,CAAC;QAC7B,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,YAAY;IAC3B,GAAG,EAAE;IAEL,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACjC,eAAe,uBAAuB;QACtC,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,YAAY;IAC3B,GAAG;QAAC;KAAY;IAEhB,MAAM,kBAAkB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QAClC,eAAe,CAAA;YACb,MAAM,WAAW,CAAC;YAClB,IAAI,UAAU;gBACZ,mBAAmB;gBACnB,oBAAoB;YACtB;YACA,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,WAAW,YAAY,YAAY;YACzE,OAAO;QACT;IACF,GAAG,EAAE;IAEL,OAAO;QACL;QACA;QACA;QACA,YAAY,kBAAkB;QAC9B;QACA;QACA;QACA;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 12791, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/ProjectEditor.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useRef, useCallback, memo, useEffect } from 'react';\nimport { MarkdownEditor } from './editor/MarkdownEditor';\nimport { EditorProvider } from './editor/EditorProvider';\nimport { ShortcutHelp } from './editor/ShortcutHelp';\nimport { WriterSidebar } from './components/WriterSidebar';\nimport { WriterStatsPanel } from './editor/WriterStatsPanel'; // 🔥 AI 창작 파트너 패널 추가\nimport { ProjectHeader } from './components/ProjectHeader'; // 🔥 새로운 모듈화된 헤더\nimport { EditorTabBar } from './components/EditorTabBar'; // 🔥 NEW: 탭 바\nimport { NewChapterModal } from './components/NewChapterModal'; // 🔥 NEW: 새 챕터 모달\nimport { ConfirmDeleteDialog } from './components/ConfirmDeleteDialog';\nimport { ShareDialog } from './components/ShareDialog';\nimport { WriteView } from './views/WriteView';\nimport { StructureView } from './views/StructureView';\nimport useStructureStore from '../../stores/useStructureStore'; // 🔥 스토어 import 추가\nimport { CharactersView } from './views/CharactersView';\nimport { NotesView } from './views/NotesView';\nimport { SynopsisView } from './views/SynopsisView';\nimport { IdeaView } from './views/IdeaView';\nimport { Logger } from '../../../shared/logger';\nimport { EditorTab } from '../../../shared/editor';\nimport { ProjectStructure } from '../../../shared/types';\n\n// 🔥 실제 hooks import (기가차드 수정)\nimport { useProjectData } from './hooks/useProjectData';\nimport { useUIState } from './hooks/useUIState';\n\n\n// 🔥 기가차드 UI 문제점 해결된 스타일\nconst WRITER_EDITOR_STYLES = {\n  // 전체 레이아웃\n  container: 'h-screen flex flex-col bg-white dark:bg-gray-900 transition-colors duration-200',\n\n  // 헤더 (🔥 nav 중첩 문제 해결)\n  header: 'flex items-center justify-between px-4 py-3 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700',\n  headerLeft: 'flex items-center gap-3',\n  headerCenter: 'flex-1 max-w-md mx-auto',\n  headerRight: 'flex items-center gap-2',\n\n  // 메인 레이아웃\n  main: 'flex flex-1 overflow-hidden',\n\n  // 🔥 에디터 영역 수정 (한줄 문제, 스크롤 제한 해결)\n  editorContainer: 'flex-1 flex flex-col h-full bg-white dark:bg-gray-900 transition-colors duration-200',\n  editorContent: 'flex-1 min-h-0 overflow-hidden', // 🔥 min-h-0 추가로 flex 영역 제대로 잡힘\n\n  // UI 컨트롤\n  iconButton: 'flex items-center justify-center w-9 h-9 rounded-lg transition-colors hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-600 dark:text-gray-400',\n  iconButtonActive: 'flex items-center justify-center w-9 h-9 rounded-lg bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400',\n  titleInput: 'border-none bg-transparent focus:outline-none focus:ring-0 text-lg font-medium w-full placeholder:text-gray-400 dark:placeholder:text-gray-500 text-gray-900 dark:text-gray-100',\n\n  // 🔥 백 버튼 개선 (중첩 문제 해결)\n  backButton: 'flex items-center gap-2 px-3 py-1.5 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md transition-colors',\n} as const;\n\nexport interface ProjectEditorProps {\n  projectId: string;\n}\n\n// 🔥 React.memo로 무한 리렌더링 방지 (11원칙: 성능 최적화)\nexport const ProjectEditor = memo(function ProjectEditor({ projectId }: ProjectEditorProps): React.ReactElement {\n  Logger.info('PROJECT_EDITOR', 'ProjectEditor render started', { projectId }); // replaced console.log with Logger\n\n  // 🔥 커스텀 hooks 사용\n  const { isLoading, error, ...projectData } = useProjectData(projectId);\n  const uiState = useUIState();\n  const [currentView, setCurrentView] = useState<string>('write'); // 🔥 프로젝트 진입 시 바로 글쓰기 에디터 표시\n  const [currentSubView, setCurrentSubView] = useState<string>(''); // 🔥 서브 뷰 상태 (시놉시스, 아이디어 등)\n  const [editingItemId, setEditingItemId] = useState<string>(''); // 🔥 편집 중인 아이템 ID\n  const [collapsed, setCollapsed] = useState<boolean>(false);\n  const [showRightSidebar, setShowRightSidebar] = useState<boolean>(false); // 🔥 AI 사이드바 상태 추가\n  const [showDeleteDialog, setShowDeleteDialog] = useState<boolean>(false);\n  const [showShareDialog, setShowShareDialog] = useState<boolean>(false);\n  const [showNewChapterModal, setShowNewChapterModal] = useState<boolean>(false); // 🔥 NEW: 새 챕터 모달 상태\n\n  // 🔥 NEW: 탭 시스템 상태 (글쓰기 에디터만)\n  const [tabs, setTabs] = useState<EditorTab[]>([\n    {\n      id: 'main',\n      title: '메인',\n      type: 'main',\n      isActive: true,\n      order: 0,\n      content: '' // 메인 탭의 독립적인 컨텐츠\n    }\n  ]);\n  const [activeTabId, setActiveTabId] = useState<string>('main');\n  const [nextTabOrder, setNextTabOrder] = useState<number>(1);\n\n  // 🔥 저장 완료 후 모든 탭의 isDirty 상태 초기화\n  const handleSaveSuccess = useCallback(() => {\n    setTabs(prevTabs =>\n      prevTabs.map(tab => ({ ...tab, isDirty: false }))\n    );\n    Logger.info('PROJECT_EDITOR', 'All tabs marked as saved');\n  }, []);\n\n  // 🔥 저장 상태 변화 감지하여 탭 상태 업데이트\n  useEffect(() => {\n    if (projectData.saveStatus === 'saved') {\n      handleSaveSuccess();\n    }\n  }, [projectData.saveStatus, handleSaveSuccess]);\n\n  const editorRef = useRef<any>(null);\n  const hasRestoredTabs = useRef(false); // 🔥 탭 복원 중복 방지\n\n  // 🔥 프로젝트 로드 시 chapters에서 탭 복원 (중복 방지)\n  useEffect(() => {\n    if (!isLoading && projectData.chapters && !hasRestoredTabs.current) {\n      try {\n        const chaptersData = JSON.parse(projectData.chapters);\n        const chapterIds = Object.keys(chaptersData);\n\n        if (chapterIds.length === 0) return; // 빈 chapters는 무시\n\n        // 🔥 useStructureStore의 데이터와 교차 검증 (삭제된 챕터 필터링)\n        const structureStore = useStructureStore.getState();\n        const existingStructures = structureStore.structures[projectId] || [];\n        const validChapterIds = chapterIds.filter(chapterId =>\n          existingStructures.some(structure => structure.id === chapterId && structure.type === 'chapter')\n        );\n\n        if (validChapterIds.length === 0) return; // 유효한 챕터가 없으면 복원하지 않음\n\n        // 새로운 챕터 탭들 생성 (고유한 탭 ID 사용)\n        const chapterTabs: EditorTab[] = validChapterIds.map((chapterId, index) => {\n          const structure = existingStructures.find(s => s.id === chapterId);\n          return {\n            id: `tab-chapter-${Date.now()}-${index}-${Math.random().toString(36).substr(2, 9)}`, // 🔥 고유한 탭 ID\n            title: structure?.title || `${index + 1}챕터`, // 🔥 구조에서 제목 가져오기, 없으면 번호\n            type: 'chapter' as const,\n            isActive: false,\n            order: index + 1,\n            content: chaptersData[chapterId],\n            chapterId, // 🔥 챕터 ID는 별도 저장\n            isDirty: false // 🔥 복원된 탭은 저장된 상태\n          };\n        });\n\n        // 메인 탭 + 복원된 챕터 탭들\n        setTabs([\n          {\n            id: 'main',\n            title: '메인',\n            type: 'main',\n            isActive: true,\n            order: 0,\n            content: projectData.content || '',\n            isDirty: false // 🔥 초기 로드 시 저장된 상태\n          },\n          ...chapterTabs\n        ]);\n\n        // nextTabOrder 설정\n        setNextTabOrder(chapterTabs.length + 1);\n        hasRestoredTabs.current = true;\n\n        Logger.info('PROJECT_EDITOR', 'Tabs restored from chapters with validation', {\n          chaptersCount: chapterTabs.length,\n          validChapterIds,\n          totalChapterIds: chapterIds.length\n        });\n      } catch (error) {\n        Logger.error('PROJECT_EDITOR', 'Failed to restore tabs from chapters', error);\n      }\n    }\n  }, [isLoading, projectData.chapters, projectData.content, projectId]);\n\n  const [isEditorReady, setIsEditorReady] = useState<boolean>(false); // 🔥 에디터 준비 상태 추가\n\n  // 🔥 Google Docs 연동 감지 및 상태 관리\n  const [isGoogleDocsProject, setIsGoogleDocsProject] = useState<boolean>(false);\n  const [googleDocMeta, setGoogleDocMeta] = useState<{\n    googleDocId?: string;\n    googleDocUrl?: string;\n    originalDescription?: string;\n    isGoogleDocsProject?: boolean;\n  } | null>(null);\n  const [isSyncingWithGoogle, setIsSyncingWithGoogle] = useState<boolean>(false);\n  const [fullProjectData, setFullProjectData] = useState<any>(null); // 🔥 전체 프로젝트 데이터\n\n  // 🔥 프로젝트 전체 데이터 로드\n  useEffect(() => {\n    const loadFullProject = async () => {\n      try {\n        const result = await window.electronAPI?.projects?.getById(projectId);\n        if (result?.success && result.data) {\n          setFullProjectData(result.data);\n        }\n      } catch (error) {\n        Logger.error('PROJECT_EDITOR', 'Failed to load full project data', error);\n      }\n    };\n\n    if (projectId) {\n      loadFullProject();\n    }\n  }, [projectId]);\n\n  // 🔥 Google Docs 메타데이터 파싱 및 설정\n  useEffect(() => {\n    if (fullProjectData?.description) {\n      try {\n        const match = fullProjectData.description.match(/\\[Google Docs 연동 정보: (\\{.*\\})\\]$/s);\n        if (match && match[1]) {\n          const parsed = JSON.parse(match[1]);\n          if (parsed && parsed.isGoogleDocsProject) {\n            setIsGoogleDocsProject(true);\n            setGoogleDocMeta(parsed);\n            Logger.info('PROJECT_EDITOR', 'Google Docs project detected', {\n              googleDocId: parsed.googleDocId,\n              googleDocUrl: parsed.googleDocUrl\n            });\n          }\n        }\n      } catch (parseErr) {\n        Logger.debug('PROJECT_EDITOR', 'Google Docs 메타데이터 파싱 실패', { err: parseErr, projectId });\n      }\n    }\n  }, [fullProjectData?.description, projectId]);\n\n  // 🔥 메인 탭 content를 프로젝트 데이터와 동기화\n  useEffect(() => {\n    if (projectData.content !== undefined) {\n      setTabs(prevTabs =>\n        prevTabs.map(tab =>\n          tab.type === 'main'\n            ? { ...tab, content: projectData.content }\n            : tab\n        )\n      );\n    }\n  }, [projectData.content]);\n\n  // 🔥 에디터 상태 업데이트\n  const { setCurrentEditor, addStructureItem } = useStructureStore();\n\n  // 🔥 현재 뷰에 따라 에디터 상태 업데이트 (안전한 버전)\n  useEffect(() => {\n    if (!projectId) return;\n\n    if (currentView === 'structure') {\n      setCurrentEditor({\n        projectId,\n        editorType: 'structure'\n      });\n    } else if (currentView === 'write') {\n      setCurrentEditor({\n        projectId,\n        editorType: 'chapter',\n        itemId: editingItemId,\n        itemTitle: editingItemId ? `${editingItemId}챕터` : undefined\n      });\n    } else if (currentView === 'characters') {\n      setCurrentEditor({\n        projectId,\n        editorType: 'characters'\n      });\n    } else if (currentView === 'notes') {\n      setCurrentEditor({\n        projectId,\n        editorType: 'notes'\n      });\n    } else if (currentView === 'synopsis') {\n      setCurrentEditor({\n        projectId,\n        editorType: 'synopsis',\n        itemId: editingItemId,\n        itemTitle: '시놉시스'\n      });\n    } else if (currentView === 'idea') {\n      setCurrentEditor({\n        projectId,\n        editorType: 'idea',\n        itemId: editingItemId,\n        itemTitle: '아이디어'\n      });\n    }\n  }, [currentView, editingItemId, projectId, setCurrentEditor]);\n\n  // 🔥 Google Docs와 동기화 함수\n  const syncWithGoogleDocs = useCallback(async () => {\n    if (!isGoogleDocsProject || !googleDocMeta?.googleDocId) return;\n\n    setIsSyncingWithGoogle(true);\n    try {\n      Logger.info('PROJECT_EDITOR', 'Syncing with Google Docs', { googleDocId: googleDocMeta.googleDocId });\n\n      // Google Docs에서 최신 내용 가져오기\n      const result = await window.electronAPI?.oauth?.importGoogleDoc(googleDocMeta.googleDocId);\n\n      if (result?.success && result.data?.content) {\n        // 프로젝트 내용 업데이트\n        projectData.setContent(result.data.content);\n        await projectData.forceSave();\n        Logger.info('PROJECT_EDITOR', 'Google Docs sync completed', {\n          contentLength: result.data.content.length\n        });\n      } else {\n        Logger.warn('PROJECT_EDITOR', 'Google Docs sync failed', result?.error);\n      }\n    } catch (error) {\n      Logger.error('PROJECT_EDITOR', 'Google Docs sync error', error);\n    } finally {\n      setIsSyncingWithGoogle(false);\n    }\n  }, [isGoogleDocsProject, googleDocMeta?.googleDocId, projectData]);\n\n  // 🔥 탭 관리 함수들 (중복 key 방지)\n  const createNewTab = useCallback((type: EditorTab['type'], title: string, chapterId?: string) => {\n    // 🔥 항상 고유한 ID 생성 (chapterId와 구분)\n    const uniqueTabId = `tab-${type}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    const newTab: EditorTab = {\n      id: uniqueTabId, // 🔥 고유한 탭 ID\n      title,\n      type,\n      chapterId, // 🔥 챕터 ID는 별도 저장\n      isActive: false,\n      order: nextTabOrder,\n      content: '', // 새 탭은 빈 content로 시작\n      isDirty: false // 🔥 새 탭은 초기에 저장된 상태\n    };\n\n    setTabs(prevTabs => {\n      // 🔥 중복 chapterId 체크\n      if (chapterId) {\n        const existingTab = prevTabs.find(tab => tab.chapterId === chapterId);\n        if (existingTab) {\n          Logger.warn('PROJECT_EDITOR', 'Tab with same chapterId already exists', { chapterId });\n          // 기존 탭을 활성화\n          setActiveTabId(existingTab.id);\n          return prevTabs.map(tab => ({ ...tab, isActive: tab.id === existingTab.id }));\n        }\n      }\n\n      const updatedTabs = prevTabs.map(tab => ({ ...tab, isActive: false }));\n      return [...updatedTabs, { ...newTab, isActive: true }];\n    });\n\n    setActiveTabId(newTab.id);\n    setNextTabOrder(prev => prev + 1);\n\n    Logger.info('PROJECT_EDITOR', 'New tab created', {\n      tabId: newTab.id,\n      chapterId: newTab.chapterId,\n      type: newTab.type,\n      title: newTab.title\n    });\n\n    return newTab;\n  }, [nextTabOrder]);\n\n  const switchToTab = useCallback((tabId: string) => {\n    setTabs(prevTabs =>\n      prevTabs.map(tab => ({\n        ...tab,\n        isActive: tab.id === tabId\n      }))\n    );\n    setActiveTabId(tabId);\n\n    // 탭에 따라 currentView 업데이트\n    const targetTab = tabs.find(tab => tab.id === tabId);\n    if (targetTab) {\n      if (targetTab.type === 'chapter') {\n        setCurrentView('write');\n        setEditingItemId(targetTab.chapterId || '');\n      } else if (targetTab.type === 'main') {\n        // 🔥 메인 탭으로 전환 시 쓰기 뷰 활성화\n        setCurrentView('write');\n        setEditingItemId(''); // 메인은 editingItemId가 없음\n      } else {\n        setCurrentView(targetTab.type);\n      }\n\n      Logger.info('PROJECT_EDITOR', 'Switched to tab', {\n        tabId,\n        type: targetTab.type,\n        title: targetTab.title,\n        currentView: targetTab.type === 'main' ? 'write' : targetTab.type\n      });\n    }\n  }, [tabs]);\n\n  const closeTab = useCallback(async (tabId: string) => {\n    if (tabId === 'main') return; // 메인 탭은 닫을 수 없음\n\n    // 닫힐 탭의 정보 가져오기\n    const tabToClose = tabs.find(tab => tab.id === tabId);\n\n    setTabs(prevTabs => {\n      const filteredTabs = prevTabs.filter(tab => tab.id !== tabId);\n\n      // 닫힌 탭이 활성 탭이었다면 다른 탭으로 전환\n      if (activeTabId === tabId && filteredTabs.length > 0) {\n        const newActiveTab = filteredTabs[filteredTabs.length - 1];\n        if (newActiveTab) {\n          newActiveTab.isActive = true;\n          setActiveTabId(newActiveTab.id);\n\n          // currentView 업데이트\n          if (newActiveTab.type === 'chapter') {\n            setCurrentView('write');\n            setEditingItemId(newActiveTab.chapterId || '');\n          } else {\n            setCurrentView(newActiveTab.type);\n          }\n        }\n      }\n\n      return filteredTabs.map(tab => ({\n        ...tab,\n        isActive: tab.id === (activeTabId === tabId ? filteredTabs[filteredTabs.length - 1]?.id : activeTabId)\n      }));\n    });\n\n    // 🔥 챕터 탭을 닫을 때 chapters JSON에서도 제거\n    if (tabToClose?.type === 'chapter' && tabToClose.chapterId) {\n      try {\n        const chapters = JSON.parse(projectData.chapters || '{}');\n        delete chapters[tabToClose.chapterId];\n        projectData.setChapters(JSON.stringify(chapters));\n        await projectData.forceSave();\n\n        // 🔥 구조 데이터에서도 삭제\n        await useStructureStore.getState().deleteStructureItem(projectId, tabToClose.chapterId);\n\n        Logger.info('PROJECT_EDITOR', 'Chapter deleted from both tabs and data', {\n          tabId,\n          chapterId: tabToClose.chapterId\n        });\n      } catch (error) {\n        Logger.error('PROJECT_EDITOR', 'Failed to delete chapter data', { tabId, error });\n      }\n    }\n\n    Logger.info('PROJECT_EDITOR', 'Tab closed', { tabId });\n  }, [activeTabId, tabs, projectData, projectId]);\n\n  // 🔥 탭 재정렬 핸들러\n  const handleTabReorder = useCallback((fromIndex: number, toIndex: number) => {\n    setTabs(prevTabs => {\n      const newTabs = [...prevTabs];\n      const [movedTab] = newTabs.splice(fromIndex, 1);\n\n      if (movedTab) {\n        newTabs.splice(toIndex, 0, movedTab);\n\n        // order 값 재정렬\n        return newTabs.map((tab, index) => ({\n          ...tab,\n          order: index\n        }));\n      }\n\n      return newTabs;\n    });\n\n    Logger.info('PROJECT_EDITOR', 'Tabs reordered', { fromIndex, toIndex });\n  }, []);\n\n  // 🔥 현재 활성 탭의 content 가져오기\n  const getCurrentTabContent = useCallback(() => {\n    const activeTab = tabs.find(tab => tab.id === activeTabId);\n\n    if (!activeTab) return '';\n\n    // 메인 탭은 프로젝트 기본 content 사용\n    if (activeTab.type === 'main') {\n      return projectData.content || '';\n    }\n\n    // Chapter 탭은 chapters JSON에서 해당 chapter content 가져오기\n    if (activeTab.type === 'chapter' && activeTab.chapterId) {\n      try {\n        const chapters = JSON.parse(projectData.chapters || '{}');\n        return chapters[activeTab.chapterId] || '';\n      } catch {\n        return '';\n      }\n    }\n\n    return '';\n  }, [tabs, activeTabId, projectData.content, projectData.chapters]);\n\n  // 🔥 현재 활성 탭의 content 업데이트\n  const updateCurrentTabContent = useCallback((newContent: string) => {\n    const activeTab = tabs.find(tab => tab.id === activeTabId);\n    if (!activeTab) return;\n\n    // 탭 상태 업데이트 (dirty 표시)\n    setTabs(prevTabs =>\n      prevTabs.map(tab =>\n        tab.id === activeTabId\n          ? { ...tab, content: newContent, isDirty: true }\n          : tab\n      )\n    );\n\n    // 메인 탭의 경우 프로젝트 데이터 업데이트\n    if (activeTab.type === 'main') {\n      projectData.setContent(newContent);\n    }\n\n    // Chapter 탭의 경우 chapters JSON 업데이트  \n    if (activeTab.type === 'chapter' && activeTab.chapterId) {\n      try {\n        const chapters = JSON.parse(projectData.chapters || '{}');\n        chapters[activeTab.chapterId] = newContent;\n        projectData.setChapters(JSON.stringify(chapters));\n\n        Logger.debug('PROJECT_EDITOR', 'Chapter content updated', {\n          chapterId: activeTab.chapterId,\n          contentLength: newContent.length\n        });\n      } catch (error) {\n        Logger.error('PROJECT_EDITOR', 'Failed to update chapter content', error);\n      }\n    }\n\n    Logger.debug('PROJECT_EDITOR', 'Tab content updated', {\n      tabId: activeTabId,\n      type: activeTab.type,\n      contentLength: newContent.length\n    });\n  }, [activeTabId, tabs, projectData]);\n\n  // 🔥 Google Docs로 내용 업로드 (향후 구현 예정)\n  const updateGoogleDocs = useCallback(async (content: string) => {\n    if (!isGoogleDocsProject || !googleDocMeta?.googleDocId) return;\n\n    try {\n      Logger.info('PROJECT_EDITOR', 'Updating Google Docs', {\n        googleDocId: googleDocMeta.googleDocId,\n        contentLength: content.length\n      });\n\n      // TODO: Google Docs API를 통한 내용 업데이트 구현 필요\n      // const result = await window.electronAPI?.oauth?.updateGoogleDoc(googleDocMeta.googleDocId, content);\n\n    } catch (error) {\n      Logger.error('PROJECT_EDITOR', 'Google Docs update error', error);\n    }\n  }, [isGoogleDocsProject, googleDocMeta?.googleDocId]);\n\n  // 🔥 외부 링크 열기 함수\n  const openGoogleDocsExternal = useCallback(() => {\n    if (googleDocMeta?.googleDocUrl) {\n      try {\n        if (window.electronAPI?.shell?.openExternal) {\n          window.electronAPI.shell.openExternal(googleDocMeta.googleDocUrl);\n        } else {\n          window.open(googleDocMeta.googleDocUrl, '_blank', 'noopener');\n        }\n        Logger.info('PROJECT_EDITOR', 'Opened Google Docs externally', { url: googleDocMeta.googleDocUrl });\n      } catch (error) {\n        Logger.error('PROJECT_EDITOR', 'Failed to open Google Docs', error);\n      }\n    }\n  }, [googleDocMeta?.googleDocUrl]);\n\n  // 🔥 에디터 준비 완료 핸들러 (fallback 에디터용)\n  const handleEditorReady = useCallback((editor?: unknown) => {\n    if (editor) {\n      editorRef.current = editor;\n    }\n    setIsEditorReady(true); // 🔥 에디터 준비 완료 표시\n    Logger.info('PROJECT_EDITOR', 'Editor ready (fallback mode)');\n  }, []);\n\n  const handleBack = useCallback(() => window.history.back(), []);\n  const handleToggleSidebar = useCallback(() => setCollapsed((prev) => !prev), []);\n\n  // 🔥 AI 사이드바 토글 핸들러 추가\n  const handleToggleAISidebar = useCallback(() => {\n    setShowRightSidebar((prev) => !prev);\n    Logger.info('PROJECT_EDITOR', `AI sidebar ${!showRightSidebar ? 'opened' : 'closed'}`);\n  }, [showRightSidebar]);\n\n  // 🔥 내비게이션 핸들러들\n  const handleNavigateToChapterEdit = useCallback((chapterId: string) => {\n    setCurrentView('write');\n    setEditingItemId(chapterId);\n    Logger.info('PROJECT_EDITOR', 'Navigate to chapter edit', { chapterId });\n  }, []);\n\n  const handleNavigateToSynopsisEdit = useCallback((synopsisId: string) => {\n    setCurrentView('synopsis');\n    setCurrentSubView('synopsis');\n    setEditingItemId(synopsisId);\n    Logger.info('PROJECT_EDITOR', 'Navigate to synopsis edit', { synopsisId });\n  }, []);\n\n  const handleNavigateToIdeaEdit = useCallback((ideaId: string) => {\n    setCurrentView('idea');\n    setCurrentSubView('idea');\n    setEditingItemId(ideaId);\n    Logger.info('PROJECT_EDITOR', 'Navigate to idea edit', { ideaId });\n  }, []);\n\n  const handleBackToStructure = useCallback(() => {\n    setCurrentView('structure');\n    setCurrentSubView('');\n    setEditingItemId('');\n  }, []);\n\n  // 🔥 WriterSidebar 핸들러들\n  const handleAddStructure = useCallback(async () => {\n    setShowNewChapterModal(true);\n    Logger.info('PROJECT_EDITOR', 'New chapter modal opened');\n  }, []);\n\n  // 🔥 NEW: 새 챕터 생성 확정 핸들러\n  const handleCreateNewChapter = useCallback(async (title: string) => {\n    try {\n      const newChapterId = `chapter-${Date.now()}`;\n\n      // 1. chapters JSON에 새 챕터 추가\n      const chapters = JSON.parse(projectData.chapters || '{}');\n      chapters[newChapterId] = ''; // 빈 content로 시작\n\n      console.log('🔥 DEBUG: About to call setChapters', { newChapterId, chapters, stringified: JSON.stringify(chapters) });\n\n      projectData.setChapters(JSON.stringify(chapters));\n\n      console.log('🔥 DEBUG: setChapters called, now calling forceSave');\n\n      // 2. 현재 챕터 개수를 계산하여 올바른 번호 생성\n      const chapterCount = Object.keys(chapters).length;\n      const chapterTitle = `${chapterCount}챕터`;\n\n      // 3. 구조 데이터에도 챕터 정보 저장\n      const newStructureItem: ProjectStructure = {\n        id: newChapterId,\n        title: chapterTitle, // 🔥 자동 번호 증가 (1챕터, 2챕터, 3챕터...)\n        description: '',\n        type: 'chapter',\n        status: 'planning',\n        projectId,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      // 🔥 Zustand 스토어에 추가 (DB 저장 포함)\n      await useStructureStore.getState().addStructureItem(projectId, newStructureItem);\n\n      // 4. 즉시 DB에 저장\n      await projectData.forceSave();\n\n      // 5. 새 탭 생성 (올바른 번호 사용)\n      createNewTab('chapter', chapterTitle, newChapterId);\n\n      // 6. 쓰기 뷰로 설정\n      setCurrentView('write');\n      setEditingItemId(newChapterId);\n\n      Logger.info('PROJECT_EDITOR', 'New chapter created and saved', {\n        chapterId: newChapterId,\n        title\n      });\n    } catch (error) {\n      Logger.error('PROJECT_EDITOR', 'Chapter creation error', error);\n    }\n  }, [createNewTab, projectData]); const handleAddCharacter = useCallback(() => {\n    // 인물 뷰로 직접 이동 (탭 시스템 사용하지 않음)\n    setCurrentView('characters');\n    Logger.info('PROJECT_EDITOR', 'Add character triggered - switched to characters view');\n  }, []);\n\n  const handleAddNote = useCallback(() => {\n    // 노트 뷰로 직접 이동 (탭 시스템 사용하지 않음) \n    setCurrentView('notes');\n    Logger.info('PROJECT_EDITOR', 'Add note triggered - switched to notes view');\n  }, []);\n\n  // 🔥 공유 기능 핸들러\n  const handleShare = useCallback(() => {\n    setShowShareDialog(true);\n    Logger.info('PROJECT_EDITOR', 'Share dialog opened');\n  }, []);\n\n  // 🔥 삭제 기능 핸들러\n  const handleDelete = useCallback(() => {\n    setShowDeleteDialog(true);\n    Logger.info('PROJECT_EDITOR', 'Delete confirmation dialog opened');\n  }, []);\n\n  // 🔥 삭제 확인 핸들러\n  const handleConfirmDelete = useCallback(async () => {\n    try {\n      Logger.info('PROJECT_EDITOR', 'Deleting project', { projectId });\n\n      const result = await window.electronAPI.projects.delete(projectId);\n\n      if (result.success) {\n        Logger.info('PROJECT_EDITOR', 'Project deleted successfully');\n        setShowDeleteDialog(false);\n        // 🔥 삭제 후 대시보드로 이동\n        window.history.back();\n      } else {\n        throw new Error(result.error || 'Failed to delete project');\n      }\n    } catch (error) {\n      Logger.error('PROJECT_EDITOR', 'Failed to delete project', error);\n      // TODO: 에러 토스트 표시\n    }\n  }, [projectId]);\n\n  // 🔥 내보내기 기능 핸들러 (Markdown 파일로 내보내기)\n  const handleDownload = useCallback(async () => {\n    try {\n      const content = projectData.content || '';\n      const title = projectData.title || '제목없음';\n\n      // Markdown 파일로 내보내기\n      const blob = new Blob([content], { type: 'text/markdown;charset=utf-8' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${title.replace(/[^a-zA-Z0-9가-힣\\s]/g, '_')}.md`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      Logger.info('PROJECT_EDITOR', 'Project exported as markdown', { title });\n    } catch (error) {\n      Logger.error('PROJECT_EDITOR', 'Export failed', error);\n    }\n  }, [projectData.content, projectData.title]);\n  // 🔥 뷰 변경 핸들러 (글쓰기만 탭 시스템 사용)\n  const handleViewChange = useCallback((view: string) => {\n    Logger.info('PROJECT_EDITOR', 'View changed:', view);\n\n    if (view === 'write') {\n      // 글쓰기 뷰는 탭 시스템 사용 - 메인 탭으로 전환\n      const mainTab = tabs.find(tab => tab.type === 'main');\n      if (mainTab) {\n        switchToTab(mainTab.id);\n      }\n    } else {\n      // 다른 뷰들(구조, 인물, 노트 등)은 직접 전환\n      setCurrentView(view);\n    }\n  }, [tabs, switchToTab]);\n  const handleToolbarAction = useCallback((action: string) => Logger.info('PROJECT_EDITOR', 'Toolbar action:', action), []);\n\n  // 🔥 작가 친화적 키보드 단축키 핸들러\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    const { key, ctrlKey, metaKey, shiftKey, altKey } = event;\n    const modKey = ctrlKey || metaKey; // Windows: Ctrl, Mac: Cmd\n\n    // 🔥 기본 저장 단축키 (Ctrl+S / Cmd+S)\n    if (modKey && key === 's') {\n      event.preventDefault();\n      projectData.forceSave().then(() => {\n        handleSaveSuccess(); // 🔥 저장 완료 후 탭 상태 초기화\n      });\n      Logger.info('PROJECT_EDITOR', 'Save shortcut triggered');\n      return;\n    }\n\n    // 🔥 포커스 모드 토글 (Ctrl+F / Cmd+F)\n    if (modKey && key === 'f') {\n      event.preventDefault();\n      uiState.toggleFocusMode();\n      Logger.info('PROJECT_EDITOR', 'Focus mode shortcut triggered');\n      return;\n    }\n\n    // 🔥 사이드바 토글 (Ctrl+B / Cmd+B)\n    if (modKey && key === 'b') {\n      event.preventDefault();\n      setCollapsed(prev => !prev);\n      Logger.info('PROJECT_EDITOR', 'Sidebar shortcut triggered');\n      return;\n    }\n\n    // 🔥 다크모드 토글 (Ctrl+D / Cmd+D)\n    if (modKey && key === 'd') {\n      event.preventDefault();\n      uiState.toggleDarkMode();\n      Logger.info('PROJECT_EDITOR', 'Dark mode shortcut triggered');\n      return;\n    }\n\n    // 🔥 ESC 키 우선순위 (QA 가이드: 다이얼로그 > 슬라이드바 > 집중모드 > 뒤로가기)\n    if (key === 'Escape') {\n      // 1순위: 다이얼로그가 열려있는 경우\n      if (showDeleteDialog || showShareDialog) {\n        // 다이얼로그는 자체적으로 ESC 처리, 여기서는 무시\n        return;\n      }\n\n      // 2순위: 집중모드인 경우 집중모드 해제\n      if (uiState.isFocusMode) {\n        event.preventDefault();\n        uiState.toggleFocusMode();\n        Logger.info('PROJECT_EDITOR', 'Focus mode disabled by ESC');\n        return;\n      }\n\n      // 3순위: 전역 ESC 이벤트 발생 (ProjectHeader에서 슬라이드바 처리)\n      const escapeEvent = new CustomEvent('global:escape', {\n        detail: { source: 'ProjectEditor' }\n      });\n      window.dispatchEvent(escapeEvent);\n\n      // 4순위: 마지막 수단으로 뒤로가기\n      event.preventDefault();\n      handleBack();\n      Logger.info('PROJECT_EDITOR', 'Back shortcut triggered');\n      return;\n    }\n\n    // 🔥 단축키 도움말 (F1)\n    if (key === 'F1') {\n      event.preventDefault();\n      const helpEvent = new CustomEvent('shortcut:help');\n      window.dispatchEvent(helpEvent);\n      Logger.info('PROJECT_EDITOR', 'Help shortcut triggered');\n      return;\n    }\n  }, [projectData.forceSave, uiState.toggleFocusMode, uiState.toggleDarkMode, handleBack]);\n\n  // 🔥 키보드 이벤트 리스너 등록\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  // 🔥 에디터 저장 이벤트 리스너 (Ctrl+S에서 발생)\n  useEffect(() => {\n    const handleProjectSave = () => {\n      projectData.forceSave();\n      Logger.info('PROJECT_EDITOR', 'Project save triggered from editor');\n    };\n\n    window.addEventListener('project:save', handleProjectSave);\n    return () => window.removeEventListener('project:save', handleProjectSave);\n  }, [projectData.forceSave]);\n\n  // 🔥 데이터 로딩 상태를 기준으로 로딩 화면 표시 (무한 로딩 문제 해결)\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center bg-white dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400\">프로젝트를 불러오는 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div className=\"h-screen flex items-center justify-center text-red-500\">오류: {error}</div>;\n  }\n\n  return (\n    <EditorProvider>\n      <div className={WRITER_EDITOR_STYLES.container}>\n        {/* 🔥 모듈화된 ProjectHeader 사용 */}\n        <ProjectHeader\n          title={projectData.title}\n          onTitleChange={projectData.setTitle}\n          onBack={handleBack}\n          sidebarCollapsed={collapsed}\n          onToggleSidebar={handleToggleSidebar}\n          showRightSidebar={showRightSidebar}\n          onToggleAISidebar={handleToggleAISidebar}\n          isFocusMode={uiState.isFocusMode}\n          onToggleFocusMode={uiState.toggleFocusMode}\n          onSave={projectData.forceSave}\n          onShare={handleShare}\n          onDownload={handleDownload}\n          onDelete={handleDelete}\n          // 🔥 Google Docs 관련 props 추가\n          isGoogleDocsProject={isGoogleDocsProject}\n          googleDocMeta={googleDocMeta}\n          isSyncingWithGoogle={isSyncingWithGoogle}\n          onSyncWithGoogle={syncWithGoogleDocs}\n          onOpenGoogleDocs={openGoogleDocsExternal}\n        />\n\n        {/* 🔥 Chrome 스타일 탭 바 (글쓰기 관련 뷰에서 표시) */}\n        {['write', 'structure'].includes(currentView) && (\n          <EditorTabBar\n            tabs={tabs}\n            activeTabId={activeTabId}\n            onTabClick={switchToTab}\n            onTabClose={closeTab}\n            onNewTab={() => createNewTab('chapter', `새 챕터 ${nextTabOrder}`)}\n            onTabReorder={handleTabReorder}\n          />\n        )}\n\n        {/* 🔥 메인 영역 */}\n        <div className={WRITER_EDITOR_STYLES.main}>\n          {/* 🔥 모듈화된 WriterSidebar 사용 */}\n          {!collapsed && (\n            <WriterSidebar\n              currentView={currentView}\n              onViewChange={handleViewChange}\n              structure={projectData.structure}\n              characters={projectData.characters}\n              stats={projectData.writerStats}\n              collapsed={false}\n              onAddStructure={handleAddStructure}\n              onAddCharacter={handleAddCharacter}\n              onAddNote={handleAddNote}\n            />\n          )}\n\n          {/* 🔥 뷰 전환 영역 - WriterSidebar와 연동 */}\n          <div className={WRITER_EDITOR_STYLES.editorContainer}>\n            {currentView === 'write' && (\n              <WriteView\n                content={getCurrentTabContent()}\n                onChange={updateCurrentTabContent}\n                isFocusMode={uiState.isFocusMode}\n              />\n            )}\n            {currentView === 'structure' && (\n              <StructureView\n                projectId={projectId}\n                onNavigateToChapterEdit={handleNavigateToChapterEdit}\n                onNavigateToSynopsisEdit={handleNavigateToSynopsisEdit}\n                onNavigateToIdeaEdit={handleNavigateToIdeaEdit}\n                onAddNewChapter={() => setShowNewChapterModal(true)}\n              />\n            )}\n            {currentView === 'characters' && (\n              <CharactersView\n                projectId={projectId}\n                characters={projectData.characters}\n                onCharactersChange={projectData.setCharacters}\n              />\n            )}\n            {currentView === 'notes' && (\n              <NotesView\n                projectId={projectId}\n                notes={projectData.notes || []}\n                onNotesChange={projectData.setNotes}\n              />\n            )}\n            {currentView === 'synopsis' && (\n              <SynopsisView\n                synopsisId={editingItemId}\n                onBack={handleBackToStructure}\n              />\n            )}\n            {currentView === 'idea' && (\n              <IdeaView\n                ideaId={editingItemId}\n                onBack={handleBackToStructure}\n              />\n            )}\n          </div>\n\n          {/* 🔥 AI 창작 파트너 사이드바 (우측) */}\n          <WriterStatsPanel\n            showRightSidebar={showRightSidebar}\n            toggleRightSidebar={handleToggleAISidebar}\n            writerStats={projectData.writerStats}\n            setWordGoal={projectData.setWordGoal}\n            currentText={projectData.content}\n            projectId={projectId}\n          />\n        </div>\n      </div>\n\n      {/* 🔥 단축키 도움말 (우측 하단 고정) */}\n      <ShortcutHelp />\n\n      {/* 🔥 삭제 확인 다이얼로그 */}\n      <ConfirmDeleteDialog\n        isOpen={showDeleteDialog}\n        projectTitle={projectData.title}\n        onConfirm={handleConfirmDelete}\n        onCancel={() => setShowDeleteDialog(false)}\n      />\n\n      {/* 🔥 공유 다이얼로그 */}\n      <ShareDialog\n        isOpen={showShareDialog}\n        projectTitle={projectData.title}\n        projectId={projectId}\n        onClose={() => setShowShareDialog(false)}\n      />\n\n      {/* 🔥 NEW: 새 챕터 생성 모달 */}\n      <NewChapterModal\n        isOpen={showNewChapterModal}\n        onClose={() => setShowNewChapterModal(false)}\n        onConfirm={handleCreateNewChapter}\n        defaultTitle=\"새로운 챕터\"\n      />\n    </EditorProvider>\n  );\n});\n"],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AACA;AACA,ySAA8D,qBAAqB;AACnF,2SAA4D,iBAAiB;AAC7E,ySAA0D,cAAc;AACxE,+SAAgE,kBAAkB;AAClF;AACA;AACA;AACA;AACA,2PAAgE,mBAAmB;AACnF;AACA;AACA;AACA;AACA;AAIA,+BAA+B;AAC/B;AACA;AA1BA;;;;;;;;;;;;;;;;;;;;;;AA6BA,yBAAyB;AACzB,MAAM,uBAAuB;IAC3B,UAAU;IACV,WAAW;IAEX,uBAAuB;IACvB,QAAQ;IACR,YAAY;IACZ,cAAc;IACd,aAAa;IAEb,UAAU;IACV,MAAM;IAEN,kCAAkC;IAClC,iBAAiB;IACjB,eAAe;IAEf,SAAS;IACT,YAAY;IACZ,kBAAkB;IAClB,YAAY;IAEZ,wBAAwB;IACxB,YAAY;AACd;AAOO,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,OAAI,AAAD,EAAE,SAAS,cAAc,EAAE,SAAS,EAAsB;IACxF,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,gCAAgC;QAAE;IAAU,IAAI,mCAAmC;IAEjH,kBAAkB;IAClB,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,aAAa,GAAG,CAAA,GAAA,oKAAA,CAAA,iBAAc,AAAD,EAAE;IAC5D,MAAM,UAAU,CAAA,GAAA,gKAAA,CAAA,aAAU,AAAD;IACzB,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,UAAU,6BAA6B;IAC9F,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,KAAK,4BAA4B;IAC9F,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,KAAK,kBAAkB;IAClF,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IACpD,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW,QAAQ,mBAAmB;IAC7F,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAClE,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAChE,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW,QAAQ,qBAAqB;IAErG,8BAA8B;IAC9B,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;QAC5C;YACE,IAAI;YACJ,OAAO;YACP,MAAM;YACN,UAAU;YACV,OAAO;YACP,SAAS,GAAG,iBAAiB;QAC/B;KACD;IACD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IACvD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAEzD,kCAAkC;IAClC,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACpC,QAAQ,CAAA,WACN,SAAS,GAAG,CAAC,CAAA,MAAO,CAAC;oBAAE,GAAG,GAAG;oBAAE,SAAS;gBAAM,CAAC;QAEjD,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;IAChC,GAAG,EAAE;IAEL,6BAA6B;IAC7B,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,YAAY,UAAU,KAAK,SAAS;YACtC;QACF;IACF,GAAG;QAAC,YAAY,UAAU;QAAE;KAAkB;IAE9C,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAO;IAC9B,MAAM,kBAAkB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAE,QAAQ,gBAAgB;IAEvD,uCAAuC;IACvC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,aAAa,YAAY,QAAQ,IAAI,CAAC,gBAAgB,OAAO,EAAE;YAClE,IAAI;gBACF,MAAM,eAAe,KAAK,KAAK,CAAC,YAAY,QAAQ;gBACpD,MAAM,aAAa,OAAO,IAAI,CAAC;gBAE/B,IAAI,WAAW,MAAM,KAAK,GAAG,QAAQ,iBAAiB;gBAEtD,gDAAgD;gBAChD,MAAM,iBAAiB,8IAAA,CAAA,UAAiB,CAAC,QAAQ;gBACjD,MAAM,qBAAqB,eAAe,UAAU,CAAC,UAAU,IAAI,EAAE;gBACrE,MAAM,kBAAkB,WAAW,MAAM,CAAC,CAAA,YACxC,mBAAmB,IAAI,CAAC,CAAA,YAAa,UAAU,EAAE,KAAK,aAAa,UAAU,IAAI,KAAK;gBAGxF,IAAI,gBAAgB,MAAM,KAAK,GAAG,QAAQ,sBAAsB;gBAEhE,6BAA6B;gBAC7B,MAAM,cAA2B,gBAAgB,GAAG,CAAC,CAAC,WAAW;oBAC/D,MAAM,YAAY,mBAAmB,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK;oBACxD,OAAO;wBACL,IAAI,CAAC,YAAY,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,MAAM,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;wBACnF,OAAO,WAAW,SAAS,GAAG,QAAQ,EAAE,EAAE,CAAC;wBAC3C,MAAM;wBACN,UAAU;wBACV,OAAO,QAAQ;wBACf,SAAS,YAAY,CAAC,UAAU;wBAChC;wBACA,SAAS,MAAM,mBAAmB;oBACpC;gBACF;gBAEA,mBAAmB;gBACnB,QAAQ;oBACN;wBACE,IAAI;wBACJ,OAAO;wBACP,MAAM;wBACN,UAAU;wBACV,OAAO;wBACP,SAAS,YAAY,OAAO,IAAI;wBAChC,SAAS,MAAM,oBAAoB;oBACrC;uBACG;iBACJ;gBAED,kBAAkB;gBAClB,gBAAgB,YAAY,MAAM,GAAG;gBACrC,gBAAgB,OAAO,GAAG;gBAE1B,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,+CAA+C;oBAC3E,eAAe,YAAY,MAAM;oBACjC;oBACA,iBAAiB,WAAW,MAAM;gBACpC;YACF,EAAE,OAAO,OAAO;gBACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,wCAAwC;YACzE;QACF;IACF,GAAG;QAAC;QAAW,YAAY,QAAQ;QAAE,YAAY,OAAO;QAAE;KAAU;IAEpE,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW,QAAQ,kBAAkB;IAEtF,+BAA+B;IAC/B,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IACxE,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAKvC;IACV,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IACxE,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAO,OAAO,iBAAiB;IAEpF,oBAAoB;IACpB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,kBAAkB;YACtB,IAAI;gBACF,MAAM,SAAS,MAAM,OAAO,WAAW,EAAE,UAAU,QAAQ;gBAC3D,IAAI,QAAQ,WAAW,OAAO,IAAI,EAAE;oBAClC,mBAAmB,OAAO,IAAI;gBAChC;YACF,EAAE,OAAO,OAAO;gBACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,oCAAoC;YACrE;QACF;QAEA,IAAI,WAAW;YACb;QACF;IACF,GAAG;QAAC;KAAU;IAEd,+BAA+B;IAC/B,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,iBAAiB,aAAa;YAChC,IAAI;gBACF,MAAM,QAAQ,gBAAgB,WAAW,CAAC,KAAK,CAAC;gBAChD,IAAI,SAAS,KAAK,CAAC,EAAE,EAAE;oBACrB,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,CAAC,EAAE;oBAClC,IAAI,UAAU,OAAO,mBAAmB,EAAE;wBACxC,uBAAuB;wBACvB,iBAAiB;wBACjB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,gCAAgC;4BAC5D,aAAa,OAAO,WAAW;4BAC/B,cAAc,OAAO,YAAY;wBACnC;oBACF;gBACF;YACF,EAAE,OAAO,UAAU;gBACjB,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,2BAA2B;oBAAE,KAAK;oBAAU;gBAAU;YACvF;QACF;IACF,GAAG;QAAC,iBAAiB;QAAa;KAAU;IAE5C,iCAAiC;IACjC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,YAAY,OAAO,KAAK,WAAW;YACrC,QAAQ,CAAA,WACN,SAAS,GAAG,CAAC,CAAA,MACX,IAAI,IAAI,KAAK,SACT;wBAAE,GAAG,GAAG;wBAAE,SAAS,YAAY,OAAO;oBAAC,IACvC;QAGV;IACF,GAAG;QAAC,YAAY,OAAO;KAAC;IAExB,iBAAiB;IACjB,MAAM,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,GAAG,CAAA,GAAA,8IAAA,CAAA,UAAiB,AAAD;IAE/D,mCAAmC;IACnC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,WAAW;QAEhB,IAAI,gBAAgB,aAAa;YAC/B,iBAAiB;gBACf;gBACA,YAAY;YACd;QACF,OAAO,IAAI,gBAAgB,SAAS;YAClC,iBAAiB;gBACf;gBACA,YAAY;gBACZ,QAAQ;gBACR,WAAW,gBAAgB,GAAG,cAAc,EAAE,CAAC,GAAG;YACpD;QACF,OAAO,IAAI,gBAAgB,cAAc;YACvC,iBAAiB;gBACf;gBACA,YAAY;YACd;QACF,OAAO,IAAI,gBAAgB,SAAS;YAClC,iBAAiB;gBACf;gBACA,YAAY;YACd;QACF,OAAO,IAAI,gBAAgB,YAAY;YACrC,iBAAiB;gBACf;gBACA,YAAY;gBACZ,QAAQ;gBACR,WAAW;YACb;QACF,OAAO,IAAI,gBAAgB,QAAQ;YACjC,iBAAiB;gBACf;gBACA,YAAY;gBACZ,QAAQ;gBACR,WAAW;YACb;QACF;IACF,GAAG;QAAC;QAAa;QAAe;QAAW;KAAiB;IAE5D,yBAAyB;IACzB,MAAM,qBAAqB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACrC,IAAI,CAAC,uBAAuB,CAAC,eAAe,aAAa;QAEzD,uBAAuB;QACvB,IAAI;YACF,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,4BAA4B;gBAAE,aAAa,cAAc,WAAW;YAAC;YAEnG,2BAA2B;YAC3B,MAAM,SAAS,MAAM,OAAO,WAAW,EAAE,OAAO,gBAAgB,cAAc,WAAW;YAEzF,IAAI,QAAQ,WAAW,OAAO,IAAI,EAAE,SAAS;gBAC3C,eAAe;gBACf,YAAY,UAAU,CAAC,OAAO,IAAI,CAAC,OAAO;gBAC1C,MAAM,YAAY,SAAS;gBAC3B,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,8BAA8B;oBAC1D,eAAe,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM;gBAC3C;YACF,OAAO;gBACL,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,2BAA2B,QAAQ;YACnE;QACF,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,0BAA0B;QAC3D,SAAU;YACR,uBAAuB;QACzB;IACF,GAAG;QAAC;QAAqB,eAAe;QAAa;KAAY;IAEjE,0BAA0B;IAC1B,MAAM,eAAe,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC,MAAyB,OAAe;QACxE,kCAAkC;QAClC,MAAM,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;QAE1F,MAAM,SAAoB;YACxB,IAAI;YACJ;YACA;YACA;YACA,UAAU;YACV,OAAO;YACP,SAAS;YACT,SAAS,MAAM,qBAAqB;QACtC;QAEA,QAAQ,CAAA;YACN,qBAAqB;YACrB,IAAI,WAAW;gBACb,MAAM,cAAc,SAAS,IAAI,CAAC,CAAA,MAAO,IAAI,SAAS,KAAK;gBAC3D,IAAI,aAAa;oBACf,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,0CAA0C;wBAAE;oBAAU;oBACpF,YAAY;oBACZ,eAAe,YAAY,EAAE;oBAC7B,OAAO,SAAS,GAAG,CAAC,CAAA,MAAO,CAAC;4BAAE,GAAG,GAAG;4BAAE,UAAU,IAAI,EAAE,KAAK,YAAY,EAAE;wBAAC,CAAC;gBAC7E;YACF;YAEA,MAAM,cAAc,SAAS,GAAG,CAAC,CAAA,MAAO,CAAC;oBAAE,GAAG,GAAG;oBAAE,UAAU;gBAAM,CAAC;YACpE,OAAO;mBAAI;gBAAa;oBAAE,GAAG,MAAM;oBAAE,UAAU;gBAAK;aAAE;QACxD;QAEA,eAAe,OAAO,EAAE;QACxB,gBAAgB,CAAA,OAAQ,OAAO;QAE/B,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,mBAAmB;YAC/C,OAAO,OAAO,EAAE;YAChB,WAAW,OAAO,SAAS;YAC3B,MAAM,OAAO,IAAI;YACjB,OAAO,OAAO,KAAK;QACrB;QAEA,OAAO;IACT,GAAG;QAAC;KAAa;IAEjB,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC/B,QAAQ,CAAA,WACN,SAAS,GAAG,CAAC,CAAA,MAAO,CAAC;oBACnB,GAAG,GAAG;oBACN,UAAU,IAAI,EAAE,KAAK;gBACvB,CAAC;QAEH,eAAe;QAEf,yBAAyB;QACzB,MAAM,YAAY,KAAK,IAAI,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;QAC9C,IAAI,WAAW;YACb,IAAI,UAAU,IAAI,KAAK,WAAW;gBAChC,eAAe;gBACf,iBAAiB,UAAU,SAAS,IAAI;YAC1C,OAAO,IAAI,UAAU,IAAI,KAAK,QAAQ;gBACpC,0BAA0B;gBAC1B,eAAe;gBACf,iBAAiB,KAAK,wBAAwB;YAChD,OAAO;gBACL,eAAe,UAAU,IAAI;YAC/B;YAEA,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,mBAAmB;gBAC/C;gBACA,MAAM,UAAU,IAAI;gBACpB,OAAO,UAAU,KAAK;gBACtB,aAAa,UAAU,IAAI,KAAK,SAAS,UAAU,UAAU,IAAI;YACnE;QACF;IACF,GAAG;QAAC;KAAK;IAET,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QAClC,IAAI,UAAU,QAAQ,QAAQ,gBAAgB;QAE9C,gBAAgB;QAChB,MAAM,aAAa,KAAK,IAAI,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;QAE/C,QAAQ,CAAA;YACN,MAAM,eAAe,SAAS,MAAM,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;YAEvD,2BAA2B;YAC3B,IAAI,gBAAgB,SAAS,aAAa,MAAM,GAAG,GAAG;gBACpD,MAAM,eAAe,YAAY,CAAC,aAAa,MAAM,GAAG,EAAE;gBAC1D,IAAI,cAAc;oBAChB,aAAa,QAAQ,GAAG;oBACxB,eAAe,aAAa,EAAE;oBAE9B,mBAAmB;oBACnB,IAAI,aAAa,IAAI,KAAK,WAAW;wBACnC,eAAe;wBACf,iBAAiB,aAAa,SAAS,IAAI;oBAC7C,OAAO;wBACL,eAAe,aAAa,IAAI;oBAClC;gBACF;YACF;YAEA,OAAO,aAAa,GAAG,CAAC,CAAA,MAAO,CAAC;oBAC9B,GAAG,GAAG;oBACN,UAAU,IAAI,EAAE,KAAK,CAAC,gBAAgB,QAAQ,YAAY,CAAC,aAAa,MAAM,GAAG,EAAE,EAAE,KAAK,WAAW;gBACvG,CAAC;QACH;QAEA,oCAAoC;QACpC,IAAI,YAAY,SAAS,aAAa,WAAW,SAAS,EAAE;YAC1D,IAAI;gBACF,MAAM,WAAW,KAAK,KAAK,CAAC,YAAY,QAAQ,IAAI;gBACpD,OAAO,QAAQ,CAAC,WAAW,SAAS,CAAC;gBACrC,YAAY,WAAW,CAAC,KAAK,SAAS,CAAC;gBACvC,MAAM,YAAY,SAAS;gBAE3B,kBAAkB;gBAClB,MAAM,8IAAA,CAAA,UAAiB,CAAC,QAAQ,GAAG,mBAAmB,CAAC,WAAW,WAAW,SAAS;gBAEtF,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,2CAA2C;oBACvE;oBACA,WAAW,WAAW,SAAS;gBACjC;YACF,EAAE,OAAO,OAAO;gBACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,iCAAiC;oBAAE;oBAAO;gBAAM;YACjF;QACF;QAEA,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,cAAc;YAAE;QAAM;IACtD,GAAG;QAAC;QAAa;QAAM;QAAa;KAAU;IAE9C,eAAe;IACf,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC,WAAmB;QACvD,QAAQ,CAAA;YACN,MAAM,UAAU;mBAAI;aAAS;YAC7B,MAAM,CAAC,SAAS,GAAG,QAAQ,MAAM,CAAC,WAAW;YAE7C,IAAI,UAAU;gBACZ,QAAQ,MAAM,CAAC,SAAS,GAAG;gBAE3B,cAAc;gBACd,OAAO,QAAQ,GAAG,CAAC,CAAC,KAAK,QAAU,CAAC;wBAClC,GAAG,GAAG;wBACN,OAAO;oBACT,CAAC;YACH;YAEA,OAAO;QACT;QAEA,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,kBAAkB;YAAE;YAAW;QAAQ;IACvE,GAAG,EAAE;IAEL,2BAA2B;IAC3B,MAAM,uBAAuB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACvC,MAAM,YAAY,KAAK,IAAI,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;QAE9C,IAAI,CAAC,WAAW,OAAO;QAEvB,2BAA2B;QAC3B,IAAI,UAAU,IAAI,KAAK,QAAQ;YAC7B,OAAO,YAAY,OAAO,IAAI;QAChC;QAEA,qDAAqD;QACrD,IAAI,UAAU,IAAI,KAAK,aAAa,UAAU,SAAS,EAAE;YACvD,IAAI;gBACF,MAAM,WAAW,KAAK,KAAK,CAAC,YAAY,QAAQ,IAAI;gBACpD,OAAO,QAAQ,CAAC,UAAU,SAAS,CAAC,IAAI;YAC1C,EAAE,OAAM;gBACN,OAAO;YACT;QACF;QAEA,OAAO;IACT,GAAG;QAAC;QAAM;QAAa,YAAY,OAAO;QAAE,YAAY,QAAQ;KAAC;IAEjE,2BAA2B;IAC3B,MAAM,0BAA0B,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC3C,MAAM,YAAY,KAAK,IAAI,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;QAC9C,IAAI,CAAC,WAAW;QAEhB,uBAAuB;QACvB,QAAQ,CAAA,WACN,SAAS,GAAG,CAAC,CAAA,MACX,IAAI,EAAE,KAAK,cACP;oBAAE,GAAG,GAAG;oBAAE,SAAS;oBAAY,SAAS;gBAAK,IAC7C;QAIR,yBAAyB;QACzB,IAAI,UAAU,IAAI,KAAK,QAAQ;YAC7B,YAAY,UAAU,CAAC;QACzB;QAEA,qCAAqC;QACrC,IAAI,UAAU,IAAI,KAAK,aAAa,UAAU,SAAS,EAAE;YACvD,IAAI;gBACF,MAAM,WAAW,KAAK,KAAK,CAAC,YAAY,QAAQ,IAAI;gBACpD,QAAQ,CAAC,UAAU,SAAS,CAAC,GAAG;gBAChC,YAAY,WAAW,CAAC,KAAK,SAAS,CAAC;gBAEvC,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,2BAA2B;oBACxD,WAAW,UAAU,SAAS;oBAC9B,eAAe,WAAW,MAAM;gBAClC;YACF,EAAE,OAAO,OAAO;gBACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,oCAAoC;YACrE;QACF;QAEA,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,uBAAuB;YACpD,OAAO;YACP,MAAM,UAAU,IAAI;YACpB,eAAe,WAAW,MAAM;QAClC;IACF,GAAG;QAAC;QAAa;QAAM;KAAY;IAEnC,oCAAoC;IACpC,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QAC1C,IAAI,CAAC,uBAAuB,CAAC,eAAe,aAAa;QAEzD,IAAI;YACF,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,wBAAwB;gBACpD,aAAa,cAAc,WAAW;gBACtC,eAAe,QAAQ,MAAM;YAC/B;QAEA,0CAA0C;QAC1C,uGAAuG;QAEzG,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,4BAA4B;QAC7D;IACF,GAAG;QAAC;QAAqB,eAAe;KAAY;IAEpD,iBAAiB;IACjB,MAAM,yBAAyB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACzC,IAAI,eAAe,cAAc;YAC/B,IAAI;gBACF,IAAI,OAAO,WAAW,EAAE,OAAO,cAAc;oBAC3C,OAAO,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,cAAc,YAAY;gBAClE,OAAO;oBACL,OAAO,IAAI,CAAC,cAAc,YAAY,EAAE,UAAU;gBACpD;gBACA,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,iCAAiC;oBAAE,KAAK,cAAc,YAAY;gBAAC;YACnG,EAAE,OAAO,OAAO;gBACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,8BAA8B;YAC/D;QACF;IACF,GAAG;QAAC,eAAe;KAAa;IAEhC,mCAAmC;IACnC,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACrC,IAAI,QAAQ;YACV,UAAU,OAAO,GAAG;QACtB;QACA,iBAAiB,OAAO,kBAAkB;QAC1C,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;IAChC,GAAG,EAAE;IAEL,MAAM,aAAa,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,IAAM,OAAO,OAAO,CAAC,IAAI,IAAI,EAAE;IAC9D,MAAM,sBAAsB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,IAAM,aAAa,CAAC,OAAS,CAAC,OAAO,EAAE;IAE/E,uBAAuB;IACvB,MAAM,wBAAwB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACxC,oBAAoB,CAAC,OAAS,CAAC;QAC/B,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC,mBAAmB,WAAW,UAAU;IACvF,GAAG;QAAC;KAAiB;IAErB,gBAAgB;IAChB,MAAM,8BAA8B,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC/C,eAAe;QACf,iBAAiB;QACjB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,4BAA4B;YAAE;QAAU;IACxE,GAAG,EAAE;IAEL,MAAM,+BAA+B,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAChD,eAAe;QACf,kBAAkB;QAClB,iBAAiB;QACjB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,6BAA6B;YAAE;QAAW;IAC1E,GAAG,EAAE;IAEL,MAAM,2BAA2B,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC5C,eAAe;QACf,kBAAkB;QAClB,iBAAiB;QACjB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,yBAAyB;YAAE;QAAO;IAClE,GAAG,EAAE;IAEL,MAAM,wBAAwB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACxC,eAAe;QACf,kBAAkB;QAClB,iBAAiB;IACnB,GAAG,EAAE;IAEL,wBAAwB;IACxB,MAAM,qBAAqB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACrC,uBAAuB;QACvB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;IAChC,GAAG,EAAE;IAEL,yBAAyB;IACzB,MAAM,yBAAyB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QAChD,IAAI;YACF,MAAM,eAAe,CAAC,QAAQ,EAAE,KAAK,GAAG,IAAI;YAE5C,4BAA4B;YAC5B,MAAM,WAAW,KAAK,KAAK,CAAC,YAAY,QAAQ,IAAI;YACpD,QAAQ,CAAC,aAAa,GAAG,IAAI,gBAAgB;YAE7C,QAAQ,GAAG,CAAC,uCAAuC;gBAAE;gBAAc;gBAAU,aAAa,KAAK,SAAS,CAAC;YAAU;YAEnH,YAAY,WAAW,CAAC,KAAK,SAAS,CAAC;YAEvC,QAAQ,GAAG,CAAC;YAEZ,8BAA8B;YAC9B,MAAM,eAAe,OAAO,IAAI,CAAC,UAAU,MAAM;YACjD,MAAM,eAAe,GAAG,aAAa,EAAE,CAAC;YAExC,uBAAuB;YACvB,MAAM,mBAAqC;gBACzC,IAAI;gBACJ,OAAO;gBACP,aAAa;gBACb,MAAM;gBACN,QAAQ;gBACR;gBACA,WAAW,IAAI;gBACf,WAAW,IAAI;YACjB;YAEA,gCAAgC;YAChC,MAAM,8IAAA,CAAA,UAAiB,CAAC,QAAQ,GAAG,gBAAgB,CAAC,WAAW;YAE/D,eAAe;YACf,MAAM,YAAY,SAAS;YAE3B,wBAAwB;YACxB,aAAa,WAAW,cAAc;YAEtC,cAAc;YACd,eAAe;YACf,iBAAiB;YAEjB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,iCAAiC;gBAC7D,WAAW;gBACX;YACF;QACF,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,0BAA0B;QAC3D;IACF,GAAG;QAAC;QAAc;KAAY;IAAG,MAAM,qBAAqB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACtE,8BAA8B;QAC9B,eAAe;QACf,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;IAChC,GAAG,EAAE;IAEL,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QAChC,+BAA+B;QAC/B,eAAe;QACf,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;IAChC,GAAG,EAAE;IAEL,eAAe;IACf,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QAC9B,mBAAmB;QACnB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;IAChC,GAAG,EAAE;IAEL,eAAe;IACf,MAAM,eAAe,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QAC/B,oBAAoB;QACpB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;IAChC,GAAG,EAAE;IAEL,eAAe;IACf,MAAM,sBAAsB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACtC,IAAI;YACF,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,oBAAoB;gBAAE;YAAU;YAE9D,MAAM,SAAS,MAAM,OAAO,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC;YAExD,IAAI,OAAO,OAAO,EAAE;gBAClB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;gBAC9B,oBAAoB;gBACpB,mBAAmB;gBACnB,OAAO,OAAO,CAAC,IAAI;YACrB,OAAO;gBACL,MAAM,IAAI,MAAM,OAAO,KAAK,IAAI;YAClC;QACF,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,4BAA4B;QAC3D,kBAAkB;QACpB;IACF,GAAG;QAAC;KAAU;IAEd,qCAAqC;IACrC,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACjC,IAAI;YACF,MAAM,UAAU,YAAY,OAAO,IAAI;YACvC,MAAM,QAAQ,YAAY,KAAK,IAAI;YAEnC,oBAAoB;YACpB,MAAM,OAAO,IAAI,KAAK;gBAAC;aAAQ,EAAE;gBAAE,MAAM;YAA8B;YACvE,MAAM,MAAM,IAAI,eAAe,CAAC;YAChC,MAAM,IAAI,SAAS,aAAa,CAAC;YACjC,EAAE,IAAI,GAAG;YACT,EAAE,QAAQ,GAAG,GAAG,MAAM,OAAO,CAAC,sBAAsB,KAAK,GAAG,CAAC;YAC7D,SAAS,IAAI,CAAC,WAAW,CAAC;YAC1B,EAAE,KAAK;YACP,SAAS,IAAI,CAAC,WAAW,CAAC;YAC1B,IAAI,eAAe,CAAC;YAEpB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,gCAAgC;gBAAE;YAAM;QACxE,EAAE,OAAO,OAAO;YACd,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,kBAAkB,iBAAiB;QAClD;IACF,GAAG;QAAC,YAAY,OAAO;QAAE,YAAY,KAAK;KAAC;IAC3C,8BAA8B;IAC9B,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACpC,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,iBAAiB;QAE/C,IAAI,SAAS,SAAS;YACpB,8BAA8B;YAC9B,MAAM,UAAU,KAAK,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,KAAK;YAC9C,IAAI,SAAS;gBACX,YAAY,QAAQ,EAAE;YACxB;QACF,OAAO;YACL,6BAA6B;YAC7B,eAAe;QACjB;IACF,GAAG;QAAC;QAAM;KAAY;IACtB,MAAM,sBAAsB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC,SAAmB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB,mBAAmB,SAAS,EAAE;IAExH,wBAAwB;IACxB,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACjC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG;QACpD,MAAM,SAAS,WAAW,SAAS,0BAA0B;QAE7D,gCAAgC;QAChC,IAAI,UAAU,QAAQ,KAAK;YACzB,MAAM,cAAc;YACpB,YAAY,SAAS,GAAG,IAAI,CAAC;gBAC3B,qBAAqB,sBAAsB;YAC7C;YACA,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;YAC9B;QACF;QAEA,gCAAgC;QAChC,IAAI,UAAU,QAAQ,KAAK;YACzB,MAAM,cAAc;YACpB,QAAQ,eAAe;YACvB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;YAC9B;QACF;QAEA,8BAA8B;QAC9B,IAAI,UAAU,QAAQ,KAAK;YACzB,MAAM,cAAc;YACpB,aAAa,CAAA,OAAQ,CAAC;YACtB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;YAC9B;QACF;QAEA,8BAA8B;QAC9B,IAAI,UAAU,QAAQ,KAAK;YACzB,MAAM,cAAc;YACpB,QAAQ,cAAc;YACtB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;YAC9B;QACF;QAEA,sDAAsD;QACtD,IAAI,QAAQ,UAAU;YACpB,sBAAsB;YACtB,IAAI,oBAAoB,iBAAiB;gBACvC,+BAA+B;gBAC/B;YACF;YAEA,wBAAwB;YACxB,IAAI,QAAQ,WAAW,EAAE;gBACvB,MAAM,cAAc;gBACpB,QAAQ,eAAe;gBACvB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;gBAC9B;YACF;YAEA,gDAAgD;YAChD,MAAM,cAAc,IAAI,YAAY,iBAAiB;gBACnD,QAAQ;oBAAE,QAAQ;gBAAgB;YACpC;YACA,OAAO,aAAa,CAAC;YAErB,qBAAqB;YACrB,MAAM,cAAc;YACpB;YACA,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;YAC9B;QACF;QAEA,kBAAkB;QAClB,IAAI,QAAQ,MAAM;YAChB,MAAM,cAAc;YACpB,MAAM,YAAY,IAAI,YAAY;YAClC,OAAO,aAAa,CAAC;YACrB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;YAC9B;QACF;IACF,GAAG;QAAC,YAAY,SAAS;QAAE,QAAQ,eAAe;QAAE,QAAQ,cAAc;QAAE;KAAW;IAEvF,oBAAoB;IACpB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,OAAO,gBAAgB,CAAC,WAAW;QACnC,OAAO,IAAM,OAAO,mBAAmB,CAAC,WAAW;IACrD,GAAG;QAAC;KAAc;IAElB,kCAAkC;IAClC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,oBAAoB;YACxB,YAAY,SAAS;YACrB,uHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,kBAAkB;QAChC;QAEA,OAAO,gBAAgB,CAAC,gBAAgB;QACxC,OAAO,IAAM,OAAO,mBAAmB,CAAC,gBAAgB;IAC1D,GAAG;QAAC,YAAY,SAAS;KAAC;IAE1B,4CAA4C;IAC5C,IAAI,WAAW;QACb,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;;;;;kCACf,8OAAC;wBAAE,WAAU;kCAAmC;;;;;;;;;;;;;;;;;IAIxD;IAEA,IAAI,OAAO;QACT,qBAAO,8OAAC;YAAI,WAAU;;gBAAyD;gBAAK;;;;;;;IACtF;IAEA,qBACE,8OAAC,sKAAA,CAAA,iBAAc;;0BACb,8OAAC;gBAAI,WAAW,qBAAqB,SAAS;;kCAE5C,8OAAC,yKAAA,CAAA,gBAAa;wBACZ,OAAO,YAAY,KAAK;wBACxB,eAAe,YAAY,QAAQ;wBACnC,QAAQ;wBACR,kBAAkB;wBAClB,iBAAiB;wBACjB,kBAAkB;wBAClB,mBAAmB;wBACnB,aAAa,QAAQ,WAAW;wBAChC,mBAAmB,QAAQ,eAAe;wBAC1C,QAAQ,YAAY,SAAS;wBAC7B,SAAS;wBACT,YAAY;wBACZ,UAAU;wBACV,6BAA6B;wBAC7B,qBAAqB;wBACrB,eAAe;wBACf,qBAAqB;wBACrB,kBAAkB;wBAClB,kBAAkB;;;;;;oBAInB;wBAAC;wBAAS;qBAAY,CAAC,QAAQ,CAAC,8BAC/B,8OAAC,wKAAA,CAAA,eAAY;wBACX,MAAM;wBACN,aAAa;wBACb,YAAY;wBACZ,YAAY;wBACZ,UAAU,IAAM,aAAa,WAAW,CAAC,KAAK,EAAE,cAAc;wBAC9D,cAAc;;;;;;kCAKlB,8OAAC;wBAAI,WAAW,qBAAqB,IAAI;;4BAEtC,CAAC,2BACA,8OAAC,yKAAA,CAAA,gBAAa;gCACZ,aAAa;gCACb,cAAc;gCACd,WAAW,YAAY,SAAS;gCAChC,YAAY,YAAY,UAAU;gCAClC,OAAO,YAAY,WAAW;gCAC9B,WAAW;gCACX,gBAAgB;gCAChB,gBAAgB;gCAChB,WAAW;;;;;;0CAKf,8OAAC;gCAAI,WAAW,qBAAqB,eAAe;;oCACjD,gBAAgB,yBACf,8OAAC,gKAAA,CAAA,YAAS;wCACR,SAAS;wCACT,UAAU;wCACV,aAAa,QAAQ,WAAW;;;;;;oCAGnC,gBAAgB,6BACf,8OAAC,oKAAA,CAAA,gBAAa;wCACZ,WAAW;wCACX,yBAAyB;wCACzB,0BAA0B;wCAC1B,sBAAsB;wCACtB,iBAAiB,IAAM,uBAAuB;;;;;;oCAGjD,gBAAgB,8BACf,8OAAC,qKAAA,CAAA,iBAAc;wCACb,WAAW;wCACX,YAAY,YAAY,UAAU;wCAClC,oBAAoB,YAAY,aAAa;;;;;;oCAGhD,gBAAgB,yBACf,8OAAC,gKAAA,CAAA,YAAS;wCACR,WAAW;wCACX,OAAO,YAAY,KAAK,IAAI,EAAE;wCAC9B,eAAe,YAAY,QAAQ;;;;;;oCAGtC,gBAAgB,4BACf,8OAAC,mKAAA,CAAA,eAAY;wCACX,YAAY;wCACZ,QAAQ;;;;;;oCAGX,gBAAgB,wBACf,8OAAC,+JAAA,CAAA,WAAQ;wCACP,QAAQ;wCACR,QAAQ;;;;;;;;;;;;0CAMd,8OAAC,wKAAA,CAAA,mBAAgB;gCACf,kBAAkB;gCAClB,oBAAoB;gCACpB,aAAa,YAAY,WAAW;gCACpC,aAAa,YAAY,WAAW;gCACpC,aAAa,YAAY,OAAO;gCAChC,WAAW;;;;;;;;;;;;;;;;;;0BAMjB,8OAAC,oKAAA,CAAA,eAAY;;;;;0BAGb,8OAAC,+KAAA,CAAA,sBAAmB;gBAClB,QAAQ;gBACR,cAAc,YAAY,KAAK;gBAC/B,WAAW;gBACX,UAAU,IAAM,oBAAoB;;;;;;0BAItC,8OAAC,uKAAA,CAAA,cAAW;gBACV,QAAQ;gBACR,cAAc,YAAY,KAAK;gBAC/B,WAAW;gBACX,SAAS,IAAM,mBAAmB;;;;;;0BAIpC,8OAAC,2KAAA,CAAA,kBAAe;gBACd,QAAQ;gBACR,SAAS,IAAM,uBAAuB;gBACtC,WAAW;gBACX,cAAa;;;;;;;;;;;;AAIrB","debugId":null}},
    {"offset": {"line": 13887, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop/src/renderer/components/projects/ErrorBoundary.tsx"],"sourcesContent":["'use client';\n\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { Logger } from '../../../shared/logger';\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\nexport class ProjectErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    this.setState({ error, errorInfo });\n\n    Logger.error('PROJECT_ERROR_BOUNDARY', 'Client-side exception caught', {\n      error: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <div className=\"h-screen flex items-center justify-center bg-white dark:bg-gray-900\">\n          <div className=\"max-w-md text-center p-6\">\n            <div className=\"text-6xl mb-4\">😵</div>\n            <h1 className=\"text-2xl font-bold text-red-600 mb-4\">앗! 오류가 발생했습니다</h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n              클라이언트에서 예외가 발생했습니다. 페이지를 새로고침하거나 다시 시도해보세요.\n            </p>\n\n            {process.env.NODE_ENV === 'development' && this.state.error && (\n              <details className=\"text-left text-xs bg-gray-100 dark:bg-gray-800 p-4 rounded mb-4\">\n                <summary className=\"cursor-pointer font-medium\">기술적 세부사항</summary>\n                <pre className=\"mt-2 whitespace-pre-wrap\">\n                  {this.state.error.message}\n                  {'\\n\\n'}\n                  {this.state.error.stack}\n                </pre>\n              </details>\n            )}\n\n            <div className=\"space-x-4\">\n              <button\n                onClick={() => window.location.reload()}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n              >\n                페이지 새로고침\n              </button>\n              <button\n                onClick={() => window.history.back()}\n                className=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700\"\n              >\n                뒤로 가기\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAgBO,MAAM,6BAA6B,qMAAA,CAAA,YAAS;IACjD,YAAY,KAAyB,CAAE;QACrC,KAAK,CAAC;QACN,IAAI,CAAC,KAAK,GAAG;YAAE,UAAU;QAAM;IACjC;IAEA,OAAO,yBAAyB,KAAY,EAAsB;QAChE,OAAO;YAAE,UAAU;YAAM;QAAM;IACjC;IAEA,kBAAkB,KAAY,EAAE,SAAoB,EAAE;QACpD,IAAI,CAAC,QAAQ,CAAC;YAAE;YAAO;QAAU;QAEjC,uHAAA,CAAA,SAAM,CAAC,KAAK,CAAC,0BAA0B,gCAAgC;YACrE,OAAO,MAAM,OAAO;YACpB,OAAO,MAAM,KAAK;YAClB,gBAAgB,UAAU,cAAc;QAC1C;IACF;IAEA,SAAS;QACP,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACvB,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACvB,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ;YAC5B;YAEA,qBACE,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;sCAAgB;;;;;;sCAC/B,8OAAC;4BAAG,WAAU;sCAAuC;;;;;;sCACrD,8OAAC;4BAAE,WAAU;sCAAwC;;;;;;wBAIpD,oDAAyB,iBAAiB,IAAI,CAAC,KAAK,CAAC,KAAK,kBACzD,8OAAC;4BAAQ,WAAU;;8CACjB,8OAAC;oCAAQ,WAAU;8CAA6B;;;;;;8CAChD,8OAAC;oCAAI,WAAU;;wCACZ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO;wCACxB;wCACA,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK;;;;;;;;;;;;;sCAK7B,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCACC,SAAS,IAAM,OAAO,QAAQ,CAAC,MAAM;oCACrC,WAAU;8CACX;;;;;;8CAGD,8OAAC;oCACC,SAAS,IAAM,OAAO,OAAO,CAAC,IAAI;oCAClC,WAAU;8CACX;;;;;;;;;;;;;;;;;;;;;;;QAOX;QAEA,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ;IAC5B;AACF","debugId":null}}]
}